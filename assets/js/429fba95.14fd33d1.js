"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[6497],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var t=n(6540);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,g=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return n?t.createElement(g,o(o({ref:a},d),{},{components:n})):t.createElement(g,o({ref:a},d))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6547:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var t=n(8168),i=(n(6540),n(5680));const r={sidebar_position:2},o="Typescript  - Parte 2",l={unversionedId:"Typescript/typescript2",id:"Typescript/typescript2",title:"Typescript  - Parte 2",description:"Typeof",source:"@site/docs/Typescript/typescript2.md",sourceDirName:"Typescript",slug:"/Typescript/typescript2",permalink:"/documentacion/docs/Typescript/typescript2",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Typescript/typescript2.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"Typescript",previous:{title:"Typescript",permalink:"/documentacion/docs/Typescript/"},next:{title:"Herramientas",permalink:"/documentacion/docs/Typescript/herramientas"}},s={},p=[{value:"Typeof",id:"typeof",level:2},{value:"ReturnType",id:"returntype",level:2},{value:"Interface",id:"interface",level:2},{value:"Extends",id:"extends",level:4},{value:"Funciones",id:"funciones",level:4},{value:"Mismo nombre",id:"mismo-nombre",level:4},{value:"Type vs interface",id:"type-vs-interface",level:2},{value:"Narrowing",id:"narrowing",level:2},{value:"\xbfPero qu\xe9 pasar\xeda si no tenemos la propiedad company?",id:"pero-qu\xe9-pasar\xeda-si-no-tenemos-la-propiedad-company",level:4},{value:"Never",id:"never",level:2},{value:"Convencion d.ts",id:"convencion-dts",level:2},{value:"Generico",id:"generico",level:2},{value:"Problema",id:"problema",level:4},{value:"Interfaces",id:"interfaces",level:4},{value:"Clases",id:"clases",level:4},{value:"Utility type",id:"utility-type",level:2},{value:"Awaited&lt;x&gt;",id:"awaitedx",level:4},{value:"Parcial&lt;X&gt;",id:"parcialx",level:4},{value:"Required&lt;X&gt;",id:"requiredx",level:4},{value:"Readonly&lt;X&gt;",id:"readonlyx",level:4},{value:"Record&lt;K,T&gt;",id:"recordkt",level:4},{value:"Pick&lt;T,K&gt;",id:"picktk",level:4},{value:"Omit&lt;T,K&gt;",id:"omittk",level:4},{value:"Exclude&lt;T,U&gt;",id:"excludetu",level:4},{value:"Extract&lt;T,U&gt;",id:"extracttu",level:4},{value:"NonNullable&lt;T&gt;",id:"nonnullablet",level:4},{value:"Parameters&lt;T&gt;",id:"parameterst",level:4},{value:"ConstructorParameters&lt;T&gt;",id:"constructorparameterst",level:4},{value:"InstanceType&lt;T&gt;",id:"instancetypet",level:4},{value:"ThisParameterType&lt;T&gt;",id:"thisparametertypet",level:4},{value:"NoInfer&lt;T&gt;",id:"noinfert",level:4},{value:"OmitThisParameterType&lt;T&gt; (Tambien  OmitThisParameter&lt;T&gt;)",id:"omitthisparametertypet-tambien--omitthisparametert",level:4},{value:"ThisType&lt;T&gt;",id:"thistypet",level:4},{value:"Manipulaci\xf3n de cadenas",id:"manipulaci\xf3n-de-cadenas",level:4},{value:"Keyof",id:"keyof",level:2},{value:"Modulos",id:"modulos",level:2},{value:"Ejemplo para Vue",id:"ejemplo-para-vue",level:4},{value:"Firmas de \xedndice",id:"firmas-de-\xedndice",level:2},{value:"Seguir aprendiendo",id:"seguir-aprendiendo",level:2}],d={toc:p},c="wrapper";function m(e){let{components:a,...n}=e;return(0,i.yg)(c,(0,t.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"typescript----parte-2"},"Typescript  - Parte 2"),(0,i.yg)("h2",{id:"typeof"},"Typeof"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Sirve para crear un tipo de dato a partir de una constante (variable):")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"const address = {\n   planet : 'Tierra' ,\n   city : 'Madrid'\n}\n\ntype Address = typeof address\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Typeof analiza la variable y crea un tipo de dato que representa a la constante."),(0,i.yg)("li",{parentName:"ul"},"En este caso Typeof generar\xeda: ")),(0,i.yg)("pre",{parentName:"div"},(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type address = {\nplanet: string;\ncity: string;\n}\n")),(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Typeof es m\xe1s complejo en typescript que en javascript.")))),(0,i.yg)("h2",{id:"returntype"},"ReturnType"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es una Utility Type."),(0,i.yg)("li",{parentName:"ul"},"Funciona igual que typeof solamente que sirve para obtener el tipo de dato del retorno de una funci\xf3n."),(0,i.yg)("li",{parentName:"ul"},"\xd3sea obtiene el tipo de dato que retorna la funci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function createAddress() {\n   return {\n      planet: 'Tierra',\n      city: 'Barcelona'\n   }\n}\n\ntype Address = ReturnType<typeof createAddress>\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Se usa junto con typeof."),(0,i.yg)("li",{parentName:"ul"},"Sintaxis: ReturnType ","<","typeof funcion-X>."),(0,i.yg)("li",{parentName:"ul"},"Esto obtiene el tipo de dato que retorna la funcion-X."),(0,i.yg)("li",{parentName:"ul"},"Entonces ReturnType recibe dentro de los \u201c","<",">\u201d la funci\xf3n a analizar para obtener el tipo de dato que devuelve.")))),(0,i.yg)("h2",{id:"interface"},"Interface"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es como type, sirve para crear un tipo de dato que especifique la estructura de un objeto."),(0,i.yg)("li",{parentName:"ul"},"Las interfaces solo definen las propiedades y m\xe9todos que debe tener el objeto, pero no su implementaci\xf3n, eso significa que no sabemos el valor de las propiedades ni la l\xf3gica de los m\xe9todos."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Heroe {\n    id: string \n    name : string\n    age : number \n    saludar : () => void\n}\n\nconst hero : Heroe = {\n    id : '1' ,\n    name: 'Spiderman' ,\n    age: 30 ,\n    saludar: () => {\n        console.log('Hola');\n    }\n}\n \n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Es parecido a ",(0,i.yg)("a",{parentName:"li",href:"https://flevatti.github.io/documentacion/docs/C--/POO#interfaces"},"POO"),".")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Las interfaces pueden estar anidadas:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Producto {\n    id: number\n    nombre: string \n  precio: number , \n  quantity : number\n}\n\ninterface CarritoDeCompras {\n    totalPrice: number\n    productos: Producto[]\n}\n\nconst carrito: CarritoDeCompras = {\n    totalPrice: 100 ,\n    productos : [\n        {\n            id: 1 ,\n            nombre: 'Producto 1',\n            precio : 100 ,\n            quantity: 1\n        }\n    ]\n}\n\n \n\n")),(0,i.yg)("h4",{id:"extends"},"Extends"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Puedes usar el mecanismo de ",(0,i.yg)("a",{parentName:"li",href:"https://flevatti.github.io/documentacion/docs/C--/POO2#herencia"},"\u201cherencia\u201d")," entre interfaces con la palabra extends."),(0,i.yg)("li",{parentName:"ul"},"Con la palabra clave extends, una interfaz puede adquirir las propiedades/m\xe9todos de otra interfaz y a su vez crear los suyos."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Producto {\n    id: number\n    nombre: string \n  precio: number , \n  quantity : number\n}\n\ninterface Zapatilla extends Producto {\n    talla: number\n}\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Los types no pueden usar la palabra clave extends, en su lugar usan la uni\xf3n y intersection type.")))),(0,i.yg)("h4",{id:"funciones"},"Funciones"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"1 forma:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface CarritoOps {\n    add : (product : Producto) => void,\n    remove: (id:number) => void,\n    clear: () => void\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"2 forma:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface CarritoOps {\n    add(product: Producto): void ,\n    remove(id:number) : void ,\n    clear():void\n}\n\n\n")),(0,i.yg)("h4",{id:"mismo-nombre"},"Mismo nombre"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Se pueden crear dos interfaces con el mismo nombre, de forma autom\xe1tica Typescript las une (como si usara extends) formando una sola con todos los m\xe9todos/propiedades de las dos:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface CarritoOps {\n    add : (product : Producto) => void,\n    remove: (id:number) => void,\n   \n}\n\ninterface CarritoOps {\n    clear: () => void\n}\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Esto con los type no ocurre."),(0,i.yg)("li",{parentName:"ul"},"Las interfaces no hacen validaciones en tiempo de ejecuci\xf3n.")))),(0,i.yg)("h2",{id:"type-vs-interface"},"Type vs interface"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Con la interface pod\xe9s usar extends, con type es imposible realizar eso."),(0,i.yg)("li",{parentName:"ul"},"Podes tener dos interfaces con el mismo nombre, los types son \xfanicos y no se pueden repetir."),(0,i.yg)("li",{parentName:"ul"},"Un type puede trabajar con tipos de datos \u201cprimitivos\u201d y objetos, las interfaces solo trabajan con objetos."),(0,i.yg)("li",{parentName:"ul"},"Entonces para clases y objetos se deber\xeda utilizar interfaces, para el resto types.")),(0,i.yg)("h2",{id:"narrowing"},"Narrowing"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Se le denomina Narrowing al siguiente error:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function mostrarLongitud (objeto: number | string) {\n    return objeto.lenght;\n}\n\nmostrarLongitud('2');\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"La propiedad lenght no existe en number | String . Esto se debe a que la propiedad existe en String pero no en number.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para solucionar esto, se debe \u201cfiltrar/descartar\u201d tipos de datos para poder utilizar los m\xe9todos de uno en espec\xedfico."),(0,i.yg)("li",{parentName:"ul"},"Esto es id\xe9ntico a las aserciones de tipo, lo podemos hacer con Instanceof o con typeof tambi\xe9n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function mostrarLongitud (objeto: number | string) {\n\n    if (typeof objeto === 'string') {\n        // Aca se trata al objeto como string\n        return objeto.length\n    }\n    // Aca Typescript se dio cuenta que es un numero ya que descarto string con el if anterior\n    return objeto.toString().length\n\n}\n\nmostrarLongitud('2');\n\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Typescript analiza las comprobaciones para detectar que tipo de dato es concretamente.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Otra forma de realizar lo mismo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Mario {\n    company : 'Nintendo' ,\n    nombre: string ,\n    saltar: () => void\n}\n\ninterface Sonic {\n    company : 'Sega' ,\n    nombre: string ,\n    correr: ()=> void\n}\n\ntype Personaje = Mario | Sonic\n\nfunction jugar(personaje: Personaje) {\n     if (personaje.company === \"Nintendo\") {\n        // Aca ya se trata como Mario\n         personaje.saltar();\n         return;\n     }\n     // Si el c\xf3digo llega aca es porque se trata de Sonic\n       personaje.correr()\n}\n\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Analizando la propiedad company que tiene un valor fijo, Typescript se da cuenta si es Mario o Sonic."),(0,i.yg)("li",{parentName:"ul"},"Es obligatorio usar return para evitar que Mario pueda usar los m\xe9todos de Sonic y que Typescript descarte a Mario (tipo de dato) cuando llegue a esa l\xednea, en caso contrario Typescript te va a tirar un error.")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Instanceof es para saber la clase que se us\xf3 para crear X objeto. Es para ver el tipo de dato de una instancia de objeto."),(0,i.yg)("li",{parentName:"ul"},"Typeof solo te devuelve el tipo de forma muy general, ejemplo: function , String , number , object , boolean , etc.")))),(0,i.yg)("h4",{id:"pero-qu\xe9-pasar\xeda-si-no-tenemos-la-propiedad-company"},"\xbfPero qu\xe9 pasar\xeda si no tenemos la propiedad company?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En este caso tendr\xedamos que implementar un \u201ctype guard\u201d:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"\n// Una funcion para comprobar si es sonic\n\nfunction checkisSonic (personaje: Personaje) : personaje is Sonic {\n    return (personaje as Sonic).correr != undefined\n}\n\n\nfunction jugar(personaje: Personaje) {\n     if (checkisSonic(personaje)) {\n          // Pasa la validaci\xf3n, se trata como Sonic\n          personaje.correr();\n          return;\n     }\n          // Si el c\xf3digo llega aca es porque se trata de Mario\n     personaje.saltar();\n}\n\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En el retorno del m\xe9todo checkisSonic especificamos \u201cpersonaje is Sonic\u201d, con esto le estamos diciendo a Typescript que la funci\xf3n va a comprobar si Personaje es Sonic o no. La l\xf3gica de comprobaci\xf3n la tiene que a\xf1adir el programador y puede ser cualquiera mientras funcione."),(0,i.yg)("li",{parentName:"ul"},"Luego usamos ese m\xe9todo en la funci\xf3n jugar para que Typescript sepa que tipo de dato es personaje.")))),(0,i.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Este m\xe9todo hay que evitarlo ya que hace que el c\xf3digo tenga muchas lineas y demasiadas comprobaciones."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html"},"M\xe1s informaci\xf3n"))))),(0,i.yg)("h2",{id:"never"},"Never"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es un tipo de dato."),(0,i.yg)("li",{parentName:"ul"},"Es una especie de undefined para especificar un valor que nunca se va a producir/generar ya que por lo general se reproduce un error o algo que interrumpe el m\xe9todo y que impide que se llegue a esa l\xednea de c\xf3digo."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"\nfunction fn(x: string | number) {\n      if (typeof x === \"string\") {\n         // Aca es string\n         x.toUpperCase()\n      } else if (typeof x === 'number') {\n        // Aca es number\n        x.toFixed();\n    } else {\n        // Aca es never\n        x\n    }\n      \n}\n\n\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"La X en el else es de tipo Never ya que nunca se va a llegar a esa l\xednea (\xbfadivina por qu\xe9?).")))),(0,i.yg)("h2",{id:"convencion-dts"},"Convencion d.ts"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Los tipos de datos se suelen agregar en un archivo que termina en d.ts "),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="types.d.ts"',title:'"types.d.ts"'},"export interface Avenger {\n    name: string;\n    powerScore: number;\n    wonBattles: number;\n    age: number;\n  }\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Los tipos de datos los exportas."),(0,i.yg)("li",{parentName:"ul"},"Cuando vayas a utilizar alg\xfan tipo en un archivo especifico, simplemente lo importas.")))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript",metastring:'title="script.ts"',title:'"script.ts"'},'import {type Avenger} from \'./types.d\'\n\nclass Avanger implements Avenger {\n  name: string;\n  public powerScore: number;\n  readonly wonBattles: number = 0;\n  age: number = 0;\n  constructor(name: string, powerScore: number) {\n    this.name = name;\n    this.powerScore = powerScore;\n  } \n\n\n\n\n  get fullName() {\n    return `${this.name}, de poder ${this.powerScore}`;\n  }\n\n  set power(newPower: number) {\n    if (newPower <= 100) {\n      this.powerScore = newPower;\n    } else {\n      throw new Error("Power score cann\xb4t be more than 100");\n    }\n  }\n}\n\nconst avanger = new Avanger("Spidey", 80);\navanger.powerScore;\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Al importarlo especificamos que es un tipo de dato con la palabra type."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/modules/reference.html#module-syntax"},"M\xe1s informaci\xf3n"))))),(0,i.yg)("h2",{id:"generico"},"Generico"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Observemos el siguiente c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'interface IUser {\n  id: number;\n  name?:string\n}\n\ninterface ICar {\n  id:number;\n  color?:CarColor\n}\n\ntype CarColor = "blue" | "red"\n\nconst user : IUser = {\n  id:1\n}\n\nconst car : ICar = {\n  id:1\n}\n\n// keyof genera el siguiente tipo: type userFields = "id" | "color" | ...propiedades\nfunction validateField(user: IUser , field: keyof IUser) : boolean {\n  // Devuelve true si existe la propiedad en el objeto\n  return Boolean(user[field])\n}\n\n\nfunction validateField2(car: ICar , field: keyof ICar) : boolean {\n  // Devuelve true si existe la propiedad en el objeto\n  return Boolean(car[field])\n}\n\nconsole.log(validateField(user , "id"))\nconsole.log(validateField2(car , "id"))\n\n\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Gracias a keyof obtenemos acceso a todos los campos de la interface especificada (IUser).")))),(0,i.yg)("h4",{id:"problema"},"Problema"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Tenemos dos m\xe9todos (validateField  y validateField2 ) que hacen exactamente lo mismo, la \xfanica diferencia es que los par\xe1metros son de diferentes tipos de datos."),(0,i.yg)("li",{parentName:"ul"},"Gracias a los gen\xe9ricos podemos crear un solo m\xe9todo en lugar de dos y as\xed nos ahorramos mucho c\xf3digo."),(0,i.yg)("li",{parentName:"ul"},"Entonces creamos el m\xe9todo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function validateField<T>(entity: T , field: keyof T) : boolean {\n  // Devuelve true si existe la propiedad en el objeto\n  return Boolean(entity[field])\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Lo que se encuentra dentro de \u201c","<",">\u201d, ej:  ","<","A, B, C, \u2026> Son par\xe1metros(variables) que van a almacenar alg\xfan tipo de dato."),(0,i.yg)("li",{parentName:"ul"},"A la hora de invocar el m\xe9todo a trav\xe9s del mismo signo \u201c","<",">\u201d asignamos los tipos de datos para cada par\xe1metro en el mismo orden.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Vamos al c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'function validateField<T>(entity: T , field: keyof T) : boolean {\n  // Devuelve true si existe la propiedad en el objeto\n  return Boolean(entity[field])\n}\n\nconsole.log(validateField<IUser>(user , "id"))\nconsole.log(validateField<ICar>(car , "id"))\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"La primera vez que se invoca el m\xe9todo T contiene el valor de IUser y por lo tanto seria: entity : IUser y field: keyof IUser."),(0,i.yg)("li",{parentName:"ul"},"La segunda vez que se invoca el m\xe9todo T contiene el valor de ICar.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Pero si no especificamos ning\xfan valor, Typescript va a usar su inferencia para reducir el tipo de dato y asignarle un tipo a cada par\xe1metro de forma autom\xe1tica:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'console.log(validateField(car , "color"))\n')),(0,i.yg)("h4",{id:"interfaces"},"Interfaces"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'// Creamos los parametros genericos\ninterface IEntity<T> {\n  id: T\n}\n\n// Le asignamos valor en una variable\nconst entity: IEntity<string> = {\n  id : "2"\n}\n\n// Le asignamos valor en una interface\ninterface IPerson extends IEntity<string> {\n  name: string\n}\n\n\nconst entity2 : IPerson = {\n   id : "2" ,\n   name: "Felipe"\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Otro ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'// Le asignamos un valor generico  en una interface\ninterface IPerson<T> extends IEntity<T> {\n  name: string\n}\n\n\nconst entity2 : IPerson<string> = {\n   id : "2" ,\n   name: "Felipe"\n}\n\n\n')),(0,i.yg)("h4",{id:"clases"},"Clases"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'class Person implements IPerson<string>{\n  id:string = "121345"\n  name:string = "name"\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A su vez una clase puede tener gen\xe9ricos:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'class Person<K> implements IPerson<K>{\n  id:K;\n  name: string = "name"\n\n  constructor(id: K) {\n    this.id = id;\n  }\n}\n\nconst person = new Person<number>(5)\nconsole.log(person);\n\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://flevatti.github.io/documentacion/docs/C--/guiaC2#gen%C3%A9rico"},"Genericos en C#")),(0,i.yg)("li",{parentName:"ul"},"A buscar informaci\xf3n porque se puede implementar en la mayor\xeda de casos!")))),(0,i.yg)("h2",{id:"utility-type"},"Utility type"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Los utility type pueden manipular las caracteristicas de los tipos de datos existente para crear otros nuevos."),(0,i.yg)("li",{parentName:"ul"},"Esto puede ayudar a agilizar el desarrollo de sus programas actuales y futuros, al reducir la carga de mantener varios tipos similares."),(0,i.yg)("li",{parentName:"ul"},"La mayor\xeda utilizan gen\xe9ricos para especificar los tipos a manipular para crear nuevos tipos."),(0,i.yg)("li",{parentName:"ul"},"Veamos algunos\u2026")),(0,i.yg)("h4",{id:"awaitedx"},"Awaited","<","x>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Le permite extraer el tipo de dato de respuesta de una promesa X."),(0,i.yg)("li",{parentName:"ul"},"Considere la definici\xf3n b\xe1sica de Promise. Si tiene una promesa que se resuelve en una cadena, su tipo ser\xeda Promise","<","string>. Si desea saber el tipo al que se resuelve la promesa (en este caso, string), puede utilizar el tipo Awaited."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"// A = string\ntype A = Awaited<Promise<string>>;\n")),(0,i.yg)("h4",{id:"parcialx"},"Parcial","<","X>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad le permite hacer que todas las propiedades de un tipo X sean opcionales, lo que significa que puede optar por proporcionar u omitir valores para esas propiedades."),(0,i.yg)("li",{parentName:"ul"},"Es \xfatil cuando deseas construir un objeto de forma incremental o cuando tienes una funci\xf3n que acepta un objeto con propiedades opcionales."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n  name: string;\n  age: number;\n  address: string;\n}\n\nfunction updatePerson(person: Partial<Person>): void {\n  // C\xf3digo para actualizar una persona\n}\n// Lo usamos\nconst partialPerson: Partial<Person> = { name: 'John' }; // Todas las propiedades de Person son opcionales\nupdatePerson(partialPerson);\n\n")),(0,i.yg)("h4",{id:"requiredx"},"Required","<","X>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad hace que todas las propiedades de un tipo x sean obligatorias. Garantiza que todas las propiedades del tipo deben estar presentes."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n  name?: string;\n  age?: number;\n}\n\nconst person: Required<Person> = {\n  name: 'John',\n  age: 30,\n};   // Todas las propiedades son obligatorias\n\n\n")),(0,i.yg)("h4",{id:"readonlyx"},"Readonly","<","X>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad hace que todas las propiedades de un tipo X sean solo de lectura. "),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n  name: string;\n  age: number;\n}\nconst person: Readonly<Person> = {\n  name: 'John',\n  age: 30,\n};\n\n")),(0,i.yg)("h4",{id:"recordkt"},"Record","<","K,T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad crea un nuevo tipo con un conjunto de propiedades K de tipo T. Se usa com\xfanmente para definir un diccionario o un objeto donde las claves del objeto tienen un tipo espec\xedfico y los valores tienen un tipo espec\xedfico."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type Fruit = 'apple' | 'banana' | 'orange';\ntype FruitInventory = Record<Fruit, number>;\nconst inventory: FruitInventory = {\n  apple: 5,\n  banana: 10,\n  orange: 3,\n};\n\n")),(0,i.yg)("h4",{id:"picktk"},"Pick<T,K>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad le permite crear un nuevo tipo seleccionando un subconjunto de propiedades K del tipo T."),(0,i.yg)("li",{parentName:"ul"},"Es \xfatil cuando desea extraer propiedades espec\xedficas de un tipo existente para crear un nuevo tipo que solo incluya esas propiedades."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n \ntype TodoPreview = Pick<Todo, "title" | "completed">;\n \nconst todo: TodoPreview = {\n  title: "Clean room",\n  completed: false,\n};\n\n\n')),(0,i.yg)("h4",{id:"omittk"},"Omit","<","T,K>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad crea un nuevo tipo al excluir propiedades K del tipo T. Es lo opuesto Pick y le permite crear un nuevo tipo que incluye todas las propiedades T excepto las especificadas."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Person {\n  name: string;\n  age: number;\n  address: string;\n  email: string;\n}\ntype PersonWithoutEmail = Omit<Person, 'email'>;\nconst person: PersonWithoutEmail = {\n  name: 'John',\n  age: 30,\n  address: '123 Main St',\n};\n\n")),(0,i.yg)("h4",{id:"excludetu"},"Exclude","<","T,U>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad crea un nuevo tipo eliminando tipos de T que est\xe1n presentes en U."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type Color = 'red' | 'blue' | 'green';\ntype PrimaryColor = 'red' | 'blue';\ntype SecondaryColor = Exclude<Color, PrimaryColor>; // 'green'\n\n")),(0,i.yg)("h4",{id:"extracttu"},"Extract","<","T,U>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Crea un nuevo tipo seleccionando los  tipos T que tambi\xe9n est\xe1n presentes en U:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type Color = 'red' | 'blue' | 'green';\ntype PrimaryColor = 'red' | 'blue';\ntype PrimaryColors = Extract<Color, PrimaryColor>; // 'red' | 'blue'\n")),(0,i.yg)("h4",{id:"nonnullablet"},"NonNullable","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad crea un nuevo tipo de T excluyendo null y undefined. Garantiza que el tipo resultante no puede ser null o undefined:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type Value = string | null | undefined;\nconst value: NonNullable<Value> = 'Hello'; // El valor no puede ser null o undefined\n")),(0,i.yg)("h4",{id:"parameterst"},"Parameters","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad extrae los tipos de datos de los par\xe1metros de un tipo de funci\xf3n T y los representa como un tipo de tupla:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type SumFunc = (a: number, b: number) => number;\ntype SumParams = Parameters<SumFunc>; // [number, number]\n\n")),(0,i.yg)("h4",{id:"constructorparameterst"},"ConstructorParameters","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad extrae los tipos de par\xe1metros del constructor de un tipo de clase T y los representa como un tipo de tupla:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"class Person {\n  constructor(name: string, age: number) {\n    // ...\n  }\n}\n\ntype PersonConstructorParams = ConstructorParameters<typeof Person>; // [string, number]\n")),(0,i.yg)("h4",{id:"instancetypet"},"InstanceType","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad extrae el tipo de instancia de un tipo de clase T. Representa el tipo que tendr\xeda una instancia de la clase:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"class Person {\n  name: string;\n  age: number;\n}\ntype PersonInstance = InstanceType<typeof Person>; // Person\n")),(0,i.yg)("h4",{id:"thisparametertypet"},"ThisParameterType","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad extrae el tipo de this de un tipo de funci\xf3n T. Representa el tipo de this dentro de la funci\xf3n, \xf3sea el contexto de la funci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type LogFunc = (this: Console, message: string) => void;\nconst log: ThisParameterType<LogFunc> = console;\nlog.log(console, 'Log message');\n")),(0,i.yg)("h4",{id:"noinfert"},"NoInfer","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"NoInfer es un tipo de utilidad que se puede utilizar para evitar que TypeScript infiera un tipo desde la funci\xf3n gen\xe9rica."),(0,i.yg)("li",{parentName:"ul"},"Imaginemos que tenemos una funci\xf3n gen\xe9rica que simplemente devuelve el tipo del valor pasado:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},' const returnWhatIPassedIn = <T>(value: T) => value;\n const result = returnWhatIPassedIn("hello");\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'En este caso, TypeScript infiere que el tipo result  es  "hello".'),(0,i.yg)("li",{parentName:"ul"},"\xbfPero qu\xe9 pasar\xeda si usaramos NoInfer?")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'const returnWhatIPassedIn = <T>(value: NoInfer<T>) => value;\nconst result = returnWhatIPassedIn("hello");\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"NoInfer ha impedido  que value sea una fuente v\xe1lida de inferencia para T."),(0,i.yg)("li",{parentName:"ul"},"Entonces ahora, result se infiere como unknown.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Tendr\xedamos que proporcionar expl\xedcitamente el tipo para obtener el tipo de retorno deseado:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'const returnWhatIPassedIn = <T>(value: NoInfer<T>) => value;\n \nconst result = returnWhatIPassedIn<"hello">("hello");\n\n')),(0,i.yg)("h4",{id:"omitthisparametertypet-tambien--omitthisparametert"},"OmitThisParameterType","<","T> (Tambien  OmitThisParameter","<","T>)"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Elimina el par\xe1metro this de la funci\xf3n t:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"function toHex(this: Number) {\n  return this.toString(16);\n}\n \nconst fiveToHex: OmitThisParameter<typeof toHex> = toHex.bind(5);\n \nconsole.log(fiveToHex());\n\n")),(0,i.yg)("h4",{id:"thistypet"},"ThisType","<","T>"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Este tipo de utilidad se utiliza en un archivo de declaraci\xf3n (d.ts) para especificar el tipo de dato que va a ser this dentro de una funci\xf3n o m\xe9todo (contexto).")),(0,i.yg)("h4",{id:"manipulaci\xf3n-de-cadenas"},"Manipulaci\xf3n de cadenas"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para ayudar con la manipulaci\xf3n de cadenas, TypeScript incluye un conjunto de tipos que permiten usar la manipulaci\xf3n de cadenas dentro del sistema de tipos:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Uppercase","<","StringType>"),(0,i.yg)("li",{parentName:"ul"},"Lowercase","<","StringType>"),(0,i.yg)("li",{parentName:"ul"},"Capitalize","<","StringType>"),(0,i.yg)("li",{parentName:"ul"},"Uncapitalize","<","StringType>"))),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"type UppercaseGreeting = Uppercase<'hello'>; // 'HELLO'\ntype LowercaseGreeting = Lowercase<'HELLO'>; // 'hello'\ntype CapitalizedWord = Capitalize<'world'>; // 'World'\ntype UncapitalizedWord = Uncapitalize<'World'>; // 'world'\n")),(0,i.yg)("h2",{id:"keyof"},"Keyof"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El operador keyof toma un tipo de objeto y produce una cadena o una union type de sus claves(propiedades)."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'type Staff = {\n    name: string;\n    salary: number;\n   } \ntype staffKeys = keyof Staff; // produce "name" | "salary"\n\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El operador  keyof se utiliza para un tipo de objeto pero tambi\xe9n se puede utilizar para tipos que no son de objeto, incluidos los tipos primitivos:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},'type BooleanKeys = keyof boolean; // "valueOf"\n\ntype NumberKeys = keyof number; // "toString" | "valueOf" | "toFixed" | "toExponential" | "toPrecision" | "toLocaleString"\n\ntype SymbolKeys = keyof symbol; \n//typeof Symbol.toPrimitive | typeof Symbol.toStringTag | "toString" | "valueOf"\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como se muestra en los ejemplos anteriores, es menos \xfatil cuando se aplica a tipos primitivos."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://blog.logrocket.com/how-to-use-keyof-operator-typescript/"},"M\xe1s informaci\xf3n"))))),(0,i.yg)("h2",{id:"modulos"},"Modulos"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'La palabra clave "declare module" se utiliza en TypeScript para definir un m\xf3dulo que no existe en el c\xf3digo fuente, pero que se espera que est\xe9 disponible en tiempo de ejecuci\xf3n. Esto es \xfatil cuando se trabaja con bibliotecas de terceros que no tienen tipos de TypeScript definidos, o cuando se trabaja con archivos que no son de TypeScript, como archivos .js o .css.'),(0,i.yg)("li",{parentName:"ul"},'La sintaxis de "declare module" es similar a la de import y export, pero en lugar de importar o exportar elementos de c\xf3digo, se utiliza para definir el tipo de un m\xf3dulo. Por ejemplo, si se est\xe1 trabajando con una biblioteca de terceros llamada miBiblioteca que no tiene tipos de TypeScript definidos, se puede definir un m\xf3dulo de la siguiente manera:')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"declare module 'miBiblioteca' {\n  export function sumar(a: number, b: number): number;\n}\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Esto le dice a TypeScript que el m\xf3dulo miBiblioteca tiene una funci\xf3n llamada sumar que toma dos n\xfameros como argumentos y devuelve un n\xfamero. Ahora se puede importar y utilizar la funci\xf3n sumar en otro archivo de la siguiente manera:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"import { sumar } from 'miBiblioteca';\n\nconst resultado = sumar(2, 3);\nconsole.log(resultado); // 5\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'En resumen, la palabra clave declare module se utiliza en TypeScript para definir un m\xf3dulo que no existe en el c\xf3digo fuente, pero que se espera que est\xe9 disponible en tiempo de ejecuci\xf3n. Esto es \xfatil cuando se trabaja con bibliotecas de terceros que no tienen tipos de TypeScript definidos, o cuando se trabaja con archivos que no son de TypeScript, como archivos .js o .css. La sintaxis de "declare module" es similar a la de import y export, pero en lugar de importar o exportar elementos de c\xf3digo, se utiliza para definir el tipo de un m\xf3dulo.')),(0,i.yg)("h4",{id:"ejemplo-para-vue"},"Ejemplo para Vue"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"declare module '*.vue' {\n  import { DefineComponent } from 'vue'\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"La l\xednea import { DefineComponent } from 'vue' importa el tipo DefineComponent de la biblioteca de Vue.js. Este tipo se utiliza para definir componentes de Vue.js."),(0,i.yg)("li",{parentName:"ul"},"La l\xednea const component: DefineComponent<{}, {}, any> define una variable component de tipo DefineComponent, lo que significa que es un componente de Vue.js. Los tres par\xe1metros gen\xe9ricos de DefineComponent especifican el tipo de las props, el tipo de los datos y el tipo de los m\xe9todos del componente, respectivamente. En este caso, se especifica que el componente no tiene props ({}), que no tiene datos ({}) y que tiene m\xe9todos de cualquier tipo (any). Con esto especificamos el componente como si usaramos Options API."),(0,i.yg)("li",{parentName:"ul"},"La l\xednea export default component exporta el componente como el valor predeterminado del m\xf3dulo, lo que significa que se puede importar de la siguiente manera:")),(0,i.yg)("pre",{parentName:"div"},(0,i.yg)("code",{parentName:"pre",className:"language-js"},"import MiComponente from './MiComponente.vue';\n")),(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En resumen, este c\xf3digo de TypeScript describe el tipo de un archivo .vue de Vue.js, especificando que es un componente de Vue.js sin props, sin datos y con m\xe9todos de cualquier tipo. El componente se exporta como el valor predeterminado del m\xf3dulo, lo que significa que se puede importar f\xe1cilmente en otros archivos de la aplicaci\xf3n.")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\xbfPOR QU\xc9 se importa adentro el tipo de dato?")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Si usamos el siguiente c\xf3digo funciona igual:")),(0,i.yg)("pre",{parentName:"div"},(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"import { DefineComponent } from 'vue'\ndeclare module '*.vue' {\n  const component: DefineComponent<{}, {}, any>\n  export default component\n}\n")),(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En este c\xf3digo, el tipo DefineComponent se importa fuera del bloque declare module '",(0,i.yg)("em",{parentName:"li"},".vue', lo que significa que se importa en el \xe1mbito global del archivo. Luego, dentro del bloque declare module '"),".vue', se utiliza el tipo DefineComponent importado previamente para definir el tipo de la constante component."),(0,i.yg)("li",{parentName:"ul"},"En el otro c\xf3digo, el tipo DefineComponent se importa dentro del bloque declare module '",(0,i.yg)("em",{parentName:"li"},".vue', lo que significa que se importa solo dentro del \xe1mbito de ese m\xf3dulo. En otras palabras, el tipo DefineComponent solo est\xe1 disponible dentro del bloque declare module '"),".vue' y no se exporta fuera de \xe9l."),(0,i.yg)("li",{parentName:"ul"},"Ambos c\xf3digos  funcionan correctamente, pero hay una peque\xf1a diferencia en la forma en que se manejan las importaciones. En este c\xf3digo, el tipo DefineComponent se importa en el \xe1mbito global, lo que podr\xeda causar conflictos si se utiliza el mismo nombre de importaci\xf3n en otros lugares del archivo. En el segundo c\xf3digo, el tipo DefineComponent se importa solo dentro del bloque declare module '*.vue', lo que reduce el riesgo de conflictos.")))),(0,i.yg)("h2",{id:"firmas-de-\xedndice"},"Firmas de \xedndice"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A veces no se conocen de antemano todos los nombres de las propiedades de un tipo, pero s\xed se conoce el tipo de valor que se usara."),(0,i.yg)("li",{parentName:"ul"},"En esos casos, puede utilizar una firma de \xedndice para describir los tipos de valores posibles, por ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface StringArray {\n  [index: number]: string;\n}\n \nconst myArray: StringArray = getStringArray();\nconst secondItem = myArray[1];\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Esta firma de \xedndice establece que cuando un StringArray tiene un indice number, devolver\xe1 un string"),(0,i.yg)("li",{parentName:"ul"},"El \xedndice es lo que usamos para acceder a una propiedad, o sea generalmente usamos obj.indice   o obj",'["indice"]',"."),(0,i.yg)("li",{parentName:"ul"},"Se  utilizan corchetes [] para especificar el tipo de dato del indice. Aunque los tipos que podemos especificar son bastante limitados: string , number , symbol , template string patterns y union types.")))),(0,i.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"El tipo devuelto por un indexador num\xe9rico debe ser un subtipo del tipo devuelto por el indexador de string."),(0,i.yg)("li",{parentName:"ul"},"Esto se debe a que al indexar con un number, JavaScript en realidad lo convertir\xe1 en un string. Eso significa que el \xedndice ","[100]"," es lo mismo que el \xedndice ",'["100"]'," , por lo que ambos deben coincidir."),(0,i.yg)("li",{parentName:"ul"},"Adivina el error del siguiente c\xf3digo:")),(0,i.yg)("pre",{parentName:"div"},(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface Animal {\n  name: string;\n}\n \ninterface Dog extends Animal {\n  breed: string;\n}\n \n\ninterface NotOkay {\n  [x: number]: Animal;\n //'number' index type 'Animal' is not assignable to 'string' index type 'Dog'.\n  [x: string]: Dog;\n}\n")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Otro ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"interface NumberOrStringDictionary {\n  [index: string]: number | string;\n  length: number; // ok, length is a number\n  name: string; // ok, name is a string\n}\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Se usa una union type en el index para luego poder especificar correctamente el valor de cada propiedad que \u201cconocemos\u201d.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En los ejemplos anteriores usamos ","[index : tipo de dato]"," para especificar el tipo de dato del \xedndice, pero podemos remplazar la palabra index por cualquier otra, ya que solo es un placeholder, un nombre de variable que se utiliza para indicar que la propiedad es indexada, pero no tiene un valor espec\xedfico."),(0,i.yg)("li",{parentName:"ul"},"Entonces se puede utilizar  cualquier nombre de variable en lugar de index, como key, prop, x, y, etc. Lo importante es que la sintaxis ","[nombre: tipo]"," indica que la propiedad es indexada y que el tipo de la clave es el especificado , por ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"export interface HistoryState {\n  [x: number]: HistoryStateValue\n  [x: string]: HistoryStateValue\n}\n\n")),(0,i.yg)("h2",{id:"seguir-aprendiendo"},"Seguir aprendiendo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/"},"TypeScript Documentation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/training/browse/?terms=typescript"},"Cursos de Typescript")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.w3schools.com/typescript/"},"TypeScript Tutorial")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://rmolinamir.github.io/typescript-cheatsheet/"},"typescript cheatSheet")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://doabledanny.gumroad.com/l/typescript-cheat-sheet-pdf"},"typescript cheatSheet2"))))}m.isMDXComponent=!0}}]);