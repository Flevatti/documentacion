"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[3529],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var i=n(6540);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,i,s=function(e,a){if(null==e)return{};var n,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var t=i.createContext({}),c=function(e){var a=i.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=c(e.components);return i.createElement(t.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},m=i.forwardRef((function(e,a){var n=e.components,s=e.mdxType,o=e.originalType,t=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=s,g=u["".concat(t,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(g,r(r({ref:a},d),{},{components:n})):i.createElement(g,r({ref:a},d))}));function g(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var t in a)hasOwnProperty.call(a,t)&&(l[t]=a[t]);l.originalType=e,l[u]="string"==typeof e?e:s,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},140:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(8168),s=(n(6540),n(5680));const o={sidebar_position:11},r="Arquitecturas",l={unversionedId:"Node/arquitecturas",id:"Node/arquitecturas",title:"Arquitecturas",description:"- La arquitectura de un sistema de software define los componentes que lo conforman, sus responsabilidades y c\xf3mo se relacionan entre s\xed y dependen unos de otros. Es completamente independiente de la tecnolog\xeda utilizada y no debe representar en ning\xfan caso el framework, la base de datos o la forma de interacci\xf3n con el usuario.",source:"@site/docs/Node/arquitecturas.md",sourceDirName:"Node",slug:"/Node/arquitecturas",permalink:"/documentacion/docs/Node/arquitecturas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Node/arquitecturas.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"Node",previous:{title:"Extra #03",permalink:"/documentacion/docs/Node/extra03"}},t={},c=[{value:"Analog\xeda",id:"analog\xeda",level:4},{value:"Arquitectura Monolitica",id:"arquitectura-monolitica",level:2},{value:"Analog\xeda",id:"analog\xeda-1",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs",level:4},{value:"Arquitectura Microservicios",id:"arquitectura-microservicios",level:2},{value:"Analog\xeda",id:"analog\xeda-2",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core",id:"ejemplo-de-estructura-de-proyecto-en-net-core",level:4},{value:"Arquitectura Sin servidor",id:"arquitectura-sin-servidor",level:2},{value:"Analog\xeda",id:"analog\xeda-3",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-1",level:4},{value:"Arquitectura Orientada a Servicios (SOA)",id:"arquitectura-orientada-a-servicios-soa",level:2},{value:"Analog\xeda",id:"analog\xeda-4",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core",id:"ejemplo-de-estructura-de-proyecto-en-net-core-1",level:4},{value:"Arquitectura de Eventos (Event-Driven Architecture)",id:"arquitectura-de-eventos-event-driven-architecture",level:2},{value:"Analog\xeda",id:"analog\xeda-5",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-2",level:4},{value:"Arquitectura Multicapa (Multitier y Multilayer)",id:"arquitectura-multicapa-multitier-y-multilayer",level:2},{value:"Multitier (Multicapa)",id:"multitier-multicapa",level:4},{value:"Multilayer (En Capas)",id:"multilayer-en-capas",level:4},{value:"Analog\xeda",id:"analog\xeda-6",level:4},{value:"Ejemplo de Estructura",id:"ejemplo-de-estructura",level:4},{value:"Multitier en .NET Core",id:"multitier-en-net-core",level:5},{value:"Multilayer en Node.js",id:"multilayer-en-nodejs",level:5},{value:"Diferencias",id:"diferencias",level:4},{value:"Arquitectura de Tres Capas",id:"arquitectura-de-tres-capas",level:2},{value:"Analog\xeda",id:"analog\xeda-7",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-3",level:4},{value:"Arquitectura Onion (Cebolla)",id:"arquitectura-onion-cebolla",level:2},{value:"Analog\xeda",id:"analog\xeda-8",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core",id:"ejemplo-de-estructura-de-proyecto-en-net-core-2",level:4},{value:"Arquitectura Hexagonal",id:"arquitectura-hexagonal",level:2},{value:"Analog\xeda",id:"analog\xeda-9",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-4",level:4},{value:"Clean Architecture (Arquitectura Limpia)",id:"clean-architecture-arquitectura-limpia",level:2},{value:"Analog\xeda",id:"analog\xeda-10",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core",id:"ejemplo-de-estructura-de-proyecto-en-net-core-3",level:4},{value:"Arquitectura Prerenderizada",id:"arquitectura-prerenderizada",level:2},{value:"1- Proceso de Prerenderizaci\xf3n",id:"1--proceso-de-prerenderizaci\xf3n",level:4},{value:"2- Ventajas de la Prerenderizaci\xf3n",id:"2--ventajas-de-la-prerenderizaci\xf3n",level:4},{value:"3- Desventajas de la Prerenderizaci\xf3n",id:"3--desventajas-de-la-prerenderizaci\xf3n",level:4},{value:"4- Frameworks y Bibliotecas",id:"4--frameworks-y-bibliotecas",level:4},{value:"Analog\xeda",id:"analog\xeda-11",level:4},{value:"Ejemplo de Estructura de Proyecto en Gatsby (React)",id:"ejemplo-de-estructura-de-proyecto-en-gatsby-react",level:4},{value:"Arquitectura de Aplicaciones Isom\xf3rficas",id:"arquitectura-de-aplicaciones-isom\xf3rficas",level:2},{value:"1- Proceso Isom\xf3rfico",id:"1--proceso-isom\xf3rfico",level:4},{value:"2- Ventajas de las Aplicaciones Isom\xf3rficas",id:"2--ventajas-de-las-aplicaciones-isom\xf3rficas",level:4},{value:"3- Desaf\xedos de las Aplicaciones Isom\xf3rficas",id:"3--desaf\xedos-de-las-aplicaciones-isom\xf3rficas",level:4},{value:"4- Frameworks y Bibliotecas",id:"4--frameworks-y-bibliotecas-1",level:4},{value:"Analog\xeda",id:"analog\xeda-12",level:4},{value:"Ejemplo de Estructura de Proyecto en Next.js (React)",id:"ejemplo-de-estructura-de-proyecto-en-nextjs-react",level:4},{value:"Arquitectura Headless",id:"arquitectura-headless",level:2},{value:"Componentes Clave",id:"componentes-clave",level:4},{value:"Ventajas de la Arquitectura Headless",id:"ventajas-de-la-arquitectura-headless",level:4},{value:"Desventajas de la Arquitectura Headless",id:"desventajas-de-la-arquitectura-headless",level:4},{value:"Frameworks y Herramientas",id:"frameworks-y-herramientas",level:4},{value:"Analog\xeda",id:"analog\xeda-13",level:4},{value:"Ejemplo de Estructura de Proyecto",id:"ejemplo-de-estructura-de-proyecto",level:4},{value:"Arquitectura CMS Tradicional",id:"arquitectura-cms-tradicional",level:2},{value:"Componentes Clave",id:"componentes-clave-1",level:4},{value:"Ventajas de un CMS Tradicional",id:"ventajas-de-un-cms-tradicional",level:4},{value:"Desventajas de un CMS Tradicional",id:"desventajas-de-un-cms-tradicional",level:4},{value:"Ejemplos de CMS Tradicionales",id:"ejemplos-de-cms-tradicionales",level:4},{value:"Analog\xeda",id:"analog\xeda-14",level:4},{value:"Ejemplo de Estructura de Proyecto en WordPress",id:"ejemplo-de-estructura-de-proyecto-en-wordpress",level:4},{value:"Arquitectura de Microkernel",id:"arquitectura-de-microkernel",level:2},{value:"Componentes Clave",id:"componentes-clave-2",level:4},{value:"Ventajas de la Arquitectura de Microkernel",id:"ventajas-de-la-arquitectura-de-microkernel",level:4},{value:"Desventajas de la Arquitectura de Microkernel",id:"desventajas-de-la-arquitectura-de-microkernel",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso",level:4},{value:"Analog\xeda",id:"analog\xeda-15",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core",id:"ejemplo-de-estructura-de-proyecto-en-net-core-4",level:4},{value:"Arquitectura de Contenedores",id:"arquitectura-de-contenedores",level:2},{value:"Componentes claves",id:"componentes-claves",level:4},{value:"Ventajas de la Arquitectura de Contenedores",id:"ventajas-de-la-arquitectura-de-contenedores",level:4},{value:"Desventajas de la Arquitectura de Contenedores",id:"desventajas-de-la-arquitectura-de-contenedores",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-1",level:4},{value:"Analog\xeda",id:"analog\xeda-16",level:4},{value:"Ejemplo de Estructura de Proyecto en .NET Core usando Docker",id:"ejemplo-de-estructura-de-proyecto-en-net-core-usando-docker",level:4},{value:"Arquitectura de Cola (Message Queue)",id:"arquitectura-de-cola-message-queue",level:2},{value:"Componentes claves",id:"componentes-claves-1",level:4},{value:"Ventajas de la Arquitectura de Cola",id:"ventajas-de-la-arquitectura-de-cola",level:4},{value:"Desventajas de la Arquitectura de Cola",id:"desventajas-de-la-arquitectura-de-cola",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-2",level:4},{value:"Analog\xeda",id:"analog\xeda-17",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js usando RabbitMQ",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-rabbitmq",level:4},{value:"Arquitectura de Cach\xe9 Distribuida",id:"arquitectura-de-cach\xe9-distribuida",level:2},{value:"Componentes Clave",id:"componentes-clave-3",level:4},{value:"Ventajas de la Arquitectura de Cach\xe9 Distribuida",id:"ventajas-de-la-arquitectura-de-cach\xe9-distribuida",level:4},{value:"Desventajas de la Arquitectura de Cach\xe9 Distribuida",id:"desventajas-de-la-arquitectura-de-cach\xe9-distribuida",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-3",level:4},{value:"Analog\xeda",id:"analog\xeda-18",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js usando Redis",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-redis",level:4},{value:"Arquitectura de eventos y colas",id:"arquitectura-de-eventos-y-colas",level:2},{value:"Componentes Clave",id:"componentes-clave-4",level:4},{value:"Funcionamiento",id:"funcionamiento",level:4},{value:"Ventajas",id:"ventajas",level:4},{value:"Desaf\xedos",id:"desaf\xedos",level:4},{value:"Analog\xeda",id:"analog\xeda-19",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js usando Kafka",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-kafka",level:4},{value:"Arquitectura de API Gateway",id:"arquitectura-de-api-gateway",level:2},{value:"Componentes claves",id:"componentes-claves-2",level:4},{value:"Ventajas",id:"ventajas-1",level:4},{value:"Desventajas",id:"desventajas",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-4",level:4},{value:"Analog\xeda",id:"analog\xeda-20",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js usando Express y Express Gateway",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-express-y-express-gateway",level:4},{value:"Arquitectura de Balanceo de Carga",id:"arquitectura-de-balanceo-de-carga",level:2},{value:"Componentes claves",id:"componentes-claves-3",level:4},{value:"Ventajas",id:"ventajas-2",level:5},{value:"Desventajas",id:"desventajas-1",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-5",level:4},{value:"Analog\xeda",id:"analog\xeda-21",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js con NGINX como Balanceador de Carga",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-con-nginx-como-balanceador-de-carga",level:4},{value:"Arquitectura Master-Slave",id:"arquitectura-master-slave",level:2},{value:"Componentes claves",id:"componentes-claves-4",level:4},{value:"Ventajas",id:"ventajas-3",level:4},{value:"Desventajas",id:"desventajas-2",level:4},{value:"Ejemplos de Uso",id:"ejemplos-de-uso-6",level:4},{value:"Analog\xeda",id:"analog\xeda-22",level:4},{value:"Ejemplo de Estructura de Proyecto en Node.js",id:"ejemplo-de-estructura-de-proyecto-en-nodejs-5",level:4}],d={toc:c},u="wrapper";function p(e){let{components:a,...n}=e;return(0,s.yg)(u,(0,i.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"arquitecturas"},"Arquitecturas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de un sistema de software define los componentes que lo conforman, sus responsabilidades y c\xf3mo se relacionan entre s\xed y dependen unos de otros. Es completamente independiente de la tecnolog\xeda utilizada y no debe representar en ning\xfan caso el framework, la base de datos o la forma de interacci\xf3n con el usuario."),(0,s.yg)("li",{parentName:"ul"},"La arquitectura en el desarrollo de software se refiere a las reglas o normas que se siguen para dise\xf1ar y organizar un sistema, y que determinan c\xf3mo se eligen los componentes principales, c\xf3mo interact\xfaan entre s\xed, las interfaces que se usar\xe1n y las tecnolog\xedas que se usar\xe1n."),(0,s.yg)("li",{parentName:"ul"},"La arquitectura define tanto la estructura como el comportamiento del sistema y establece las condiciones necesarias para satisfacer los requisitos t\xe9cnicos y de negocio.")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"La arquitectura define qu\xe9 componentes ser\xe1n necesarios, sus responsabilidades y c\xf3mo se relacionar\xe1n entre s\xed. Sin embargo, en la fase de implementaci\xf3n, La arquitectura te ayudar\xe1 a elegir las tecnolog\xedas m\xe1s adecuadas para el sistema, como el tipo de framework, la base de datos y otras herramientas, seg\xfan las necesidades del software."))),(0,s.yg)("h4",{id:"analog\xeda"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina que est\xe1s planeando la construcci\xf3n de un edificio:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Dise\xf1o Arquitect\xf3nico: Al igual que un arquitecto de edificios crea un plano detallado que especifica la estructura del edificio, los materiales a usar, la distribuci\xf3n de habitaciones, y c\xf3mo interactuar\xe1n las diferentes partes del edificio, un arquitecto de software dise\xf1a la estructura del sistema, define los componentes principales (como m\xf3dulos, servicios, bases de datos), y establece c\xf3mo interactuar\xe1n entre ellos."),(0,s.yg)("li",{parentName:"ul"},"Componentes: En un edificio, los componentes principales pueden ser las paredes, techos, ventanas, sistemas el\xe9ctricos y de plomer\xeda. En un sistema de software, estos componentes pueden ser servicios, bases de datos, interfaces de usuario, y APIs."),(0,s.yg)("li",{parentName:"ul"},"Interacciones: As\xed como en un edificio es crucial planificar c\xf3mo los diferentes sistemas interactuar\xe1n (por ejemplo, c\xf3mo la electricidad llegar\xe1 a todas las habitaciones, c\xf3mo se distribuir\xe1 el agua), en un sistema de software es crucial definir c\xf3mo los diferentes componentes se comunicar\xe1n e interactuar\xe1n entre s\xed."),(0,s.yg)("li",{parentName:"ul"},"Tecnolog\xedas y Materiales: En la construcci\xf3n, la selecci\xf3n de materiales (como concreto, acero, vidrio) es crucial para asegurar la durabilidad y funcionalidad del edificio. En el desarrollo de software, la selecci\xf3n de tecnolog\xedas (lenguajes de programaci\xf3n, frameworks, bases de datos) es esencial para asegurar que el sistema sea robusto, escalable y mantenible.")))),(0,s.yg)("h2",{id:"arquitectura-monolitica"},"Arquitectura Monolitica"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura monol\xedtica se caracteriza por tener todas las funcionalidades y componentes de una aplicaci\xf3n contenidas en un \xfanico paquete o c\xf3digo base. "),(0,s.yg)("li",{parentName:"ul"},"En este enfoque, la aplicaci\xf3n se despliega como una \xfanica unidad, lo que significa que todos los m\xf3dulos, como la interfaz de usuario, la l\xf3gica de negocio y el acceso a datos, est\xe1n interconectados y dependen unos de otros."),(0,s.yg)("li",{parentName:"ul"},"Este dise\xf1o facilita el desarrollo inicial, ya que los desarrolladores pueden trabajar en un solo proyecto sin preocuparse por la comunicaci\xf3n entre servicios separados. La simplicidad de una arquitectura monol\xedtica tambi\xe9n se traduce en una menor sobrecarga de gesti\xf3n y despliegue, ya que solo hay una \xfanica entidad a considerar."),(0,s.yg)("li",{parentName:"ul"},"Sin embargo, a medida que la aplicaci\xf3n crece, la arquitectura monol\xedtica puede volverse dif\xedcil de mantener y escalar. Cualquier cambio en una parte de la aplicaci\xf3n puede requerir recompilar y redeployar toda la aplicaci\xf3n, lo que puede ser lento y propenso a errores. Adem\xe1s, la alta interdependencia entre m\xf3dulos puede llevar a una alta complejidad en el c\xf3digo, haciendo que el desarrollo de nuevas caracter\xedsticas o la correcci\xf3n de errores sea m\xe1s complicado. La escalabilidad tambi\xe9n puede ser un problema, ya que todos los componentes deben escalarse juntos, lo que puede llevar a un uso ineficiente de recursos."),(0,s.yg)("li",{parentName:"ul"},"En t\xe9rminos de rendimiento, una aplicaci\xf3n monol\xedtica puede tener ventajas al principio debido a la comunicaci\xf3n directa entre m\xf3dulos, pero a largo plazo, la falta de modularidad puede causar cuellos de botella y dificultades para mejorar el rendimiento de componentes individuales. Para mitigar algunos de estos problemas, las aplicaciones monol\xedticas a menudo se estructuran internamente en capas (por ejemplo, capa de presentaci\xf3n, capa de l\xf3gica de negocio, capa de datos) para separar las preocupaciones y mejorar la mantenibilidad.")),(0,s.yg)("h4",{id:"analog\xeda-1"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una librer\xeda f\xedsica donde todos los libros, secciones, empleados y sistemas de gesti\xf3n est\xe1n dentro de un \xfanico edificio. Si necesitas hacer cambios o reparaciones, debes trabajar dentro del mismo edificio. Cualquier problema en una parte del edificio podr\xeda afectar a toda la operaci\xf3n de la librer\xeda. Del mismo modo, en una arquitectura monol\xedtica, cualquier cambio o error en una parte de la aplicaci\xf3n puede tener un impacto en todo el sistema.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/my-monolithic-app\n\u251c\u2500\u2500 controllers\n\u2502   \u251c\u2500\u2500 userController.js\n\u2502   \u2514\u2500\u2500 productController.js\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 userModel.js\n\u2502   \u2514\u2500\u2500 productModel.js\n\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 userRoutes.js\n\u2502   \u2514\u2500\u2500 productRoutes.js\n\u251c\u2500\u2500 views\n\u2502   \u251c\u2500\u2500 userView.ejs\n\u2502   \u2514\u2500\u2500 productView.ejs\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 userService.js\n\u2502   \u2514\u2500\u2500 productService.js\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("h2",{id:"arquitectura-microservicios"},"Arquitectura Microservicios"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de microservicios divide una aplicaci\xf3n en peque\xf1os servicios independientes, cada uno de los cuales es responsable de una funcionalidad espec\xedfica del negocio. Cada microservicio es aut\xf3nomo y puede ser desarrollado, desplegado y escalado de manera independiente. Los microservicios se comunican entre s\xed a trav\xe9s de APIs ligeras, usualmente utilizando protocolos como HTTP/REST o mensajes a trav\xe9s de colas."),(0,s.yg)("li",{parentName:"ul"},"Esta separaci\xf3n de preocupaciones permite una mayor flexibilidad y escalabilidad, ya que cada servicio puede ser optimizado y gestionado por separado."),(0,s.yg)("li",{parentName:"ul"},"Uno de los principales beneficios de la arquitectura de microservicios es la capacidad de escalar de manera granular. En lugar de escalar toda la aplicaci\xf3n, solo se necesitan escalar los microservicios que enfrentan una mayor carga. Esto resulta en un uso m\xe1s eficiente de los recursos y puede mejorar el rendimiento de la aplicaci\xf3n en general. Adem\xe1s, la independencia de los microservicios permite que diferentes equipos de desarrollo trabajen en diferentes servicios simult\xe1neamente, utilizando incluso diferentes tecnolog\xedas y lenguajes de programaci\xf3n si es necesario."),(0,s.yg)("li",{parentName:"ul"},"Sin embargo, la arquitectura de microservicios tambi\xe9n introduce una mayor complejidad en t\xe9rminos de gesti\xf3n y operaci\xf3n. La comunicaci\xf3n entre servicios debe ser cuidadosamente gestionada para asegurar la consistencia y la disponibilidad. Tambi\xe9n se deben implementar mecanismos de monitoreo y registro robustos para rastrear el rendimiento y los errores en m\xfaltiples servicios. La gesti\xf3n de despliegue se vuelve m\xe1s complicada, ya que cada microservicio puede tener su propio ciclo de vida y puede requerir estrategias de despliegue espec\xedficas, como despliegues continuos o blue-green deployments.")),(0,s.yg)("h4",{id:"analog\xeda-2"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un campus universitario con varios edificios, donde cada edificio alberga una facultad diferente (como ingenier\xeda, medicina, artes). Cada facultad funciona de manera independiente, con sus propios profesores, estudiantes y sistemas de gesti\xf3n. Si necesitas reparar o modificar un edificio, no afectar\xe1 directamente a los otros edificios. Del mismo modo, en una arquitectura de microservicios, cada servicio funciona de manera independiente y los cambios en un servicio no afectan a los dem\xe1s.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core"},"Ejemplo de Estructura de Proyecto en .NET Core"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Estructura del microservicio UserService:")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/UserService\n\u251c\u2500\u2500 Controllers\n\u2502   \u2514\u2500\u2500 UserController.cs\n\u251c\u2500\u2500 Models\n\u2502   \u2514\u2500\u2500 User.cs\n\u251c\u2500\u2500 Services\n\u2502   \u2514\u2500\u2500 UserService.cs\n\u251c\u2500\u2500 Repositories\n\u2502   \u2514\u2500\u2500 UserRepository.cs\n\u251c\u2500\u2500 Data\n\u2502   \u2514\u2500\u2500 UserContext.cs\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Startup.cs\n\u2514\u2500\u2500 UserService.csproj\n")),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Estructura del microservicio ProductService:")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/ProductService\n\u251c\u2500\u2500 Controllers\n\u2502   \u2514\u2500\u2500 ProductController.cs\n\u251c\u2500\u2500 Models\n\u2502   \u2514\u2500\u2500 Product.cs\n\u251c\u2500\u2500 Services\n\u2502   \u2514\u2500\u2500 ProductService.cs\n\u251c\u2500\u2500 Repositories\n\u2502   \u2514\u2500\u2500 ProductRepository.cs\n\u251c\u2500\u2500 Data\n\u2502   \u2514\u2500\u2500 ProductContext.cs\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Startup.cs\n\u2514\u2500\u2500 ProductService.csproj\n\n")),(0,s.yg)("h2",{id:"arquitectura-sin-servidor"},"Arquitectura Sin servidor"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura serverless permite a los desarrolladores construir y ejecutar aplicaciones sin tener que gestionar servidores. "),(0,s.yg)("li",{parentName:"ul"},"En este modelo, el proveedor de servicios en la nube, como AWS, Azure o Google Cloud, se encarga de la infraestructura, la escalabilidad y la disponibilidad."),(0,s.yg)("li",{parentName:"ul"},'Los desarrolladores escriben funciones individuales, conocidas como "funciones serverless", que son invocadas en respuesta a eventos, como solicitudes HTTP, cambios en bases de datos, o mensajes en colas. Estas funciones son ef\xedmeras y pueden escalar autom\xe1ticamente en respuesta a la demanda.'),(0,s.yg)("li",{parentName:"ul"},"Una de las mayores ventajas de la arquitectura serverless es el modelo de pago por uso. Los desarrolladores solo pagan por el tiempo de ejecuci\xf3n de las funciones, lo que puede resultar en un ahorro significativo de costos, especialmente para aplicaciones con cargas variables. "),(0,s.yg)("li",{parentName:"ul"},"Adem\xe1s, la escalabilidad autom\xe1tica permite que las aplicaciones manejen picos de tr\xe1fico sin intervenci\xf3n manual. La simplicidad de no tener que gestionar servidores tambi\xe9n permite a los desarrolladores centrarse m\xe1s en el c\xf3digo y en la l\xf3gica de negocio en lugar de en la infraestructura."),(0,s.yg)("li",{parentName:"ul"},"Sin embargo, la arquitectura serverless tambi\xe9n tiene sus desaf\xedos. Las funciones serverless tienen l\xedmites en cuanto al tiempo de ejecuci\xf3n y al tama\xf1o de los recursos, lo que puede ser una limitaci\xf3n para ciertas aplicaciones. La latencia de inicio en fr\xedo, que ocurre cuando una funci\xf3n es invocada por primera vez despu\xe9s de un per\xedodo de inactividad, tambi\xe9n puede afectar el rendimiento. Adem\xe1s, la dependencia de un proveedor de servicios en la nube puede llevar a problemas de portabilidad y a una mayor complejidad en la gesti\xf3n de la seguridad y la conformidad.")),(0,s.yg)("h4",{id:"analog\xeda-3"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Piensa en un servicio de comida a domicilio. No necesitas tener una cocina (servidor) propia; solo pides la comida y el servicio de entrega (proveedor de nube) se encarga de todo, desde la preparaci\xf3n hasta la entrega. Del mismo modo, en una arquitectura serverless, no necesitas gestionar servidores; el proveedor de nube se encarga de ejecutar y escalar tus funciones seg\xfan sea necesario.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-1"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/serverless-app\n\u251c\u2500\u2500 handlers\n\u2502   \u251c\u2500\u2500 userHandler.js\n\u2502   \u2514\u2500\u2500 productHandler.js\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 userService.js\n\u2502   \u2514\u2500\u2500 productService.js\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 serverless.yml\n\u2514\u2500\u2500 package.json\n")),(0,s.yg)("h2",{id:"arquitectura-orientada-a-servicios-soa"},"Arquitectura Orientada a Servicios (SOA)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura orientada a servicios (SOA) organiza una aplicaci\xf3n en servicios empresariales que son grandes y reutilizables, y que interact\xfaan entre s\xed a trav\xe9s de un bus de servicios (Enterprise Service Bus o ESB). "),(0,s.yg)("li",{parentName:"ul"},"Cada servicio en SOA es una unidad de funcionalidad aut\xf3noma que puede ser desarrollada, desplegada y mantenida de manera independiente, pero que est\xe1 dise\xf1ada para ser reutilizable y componible. Estos servicios pueden estar basados en diferentes tecnolog\xedas y plataformas, pero se comunican a trav\xe9s de interfaces est\xe1ndar, como SOAP, REST o mensajer\xeda XML."),(0,s.yg)("li",{parentName:"ul"},"SOA se enfoca en la integraci\xf3n de servicios heterog\xe9neos y la reutilizaci\xf3n de componentes en toda la organizaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Esta arquitectura es especialmente \xfatil en grandes empresas con m\xfaltiples sistemas legados que necesitan ser integrados. El bus de servicios act\xfaa como un mediador que facilita la comunicaci\xf3n, la transformaci\xf3n de datos y el enrutamiento entre servicios, proporcionando una capa de abstracci\xf3n que simplifica la integraci\xf3n y mejora la flexibilidad. Adem\xe1s, SOA promueve la interoperabilidad y la agilidad empresarial al permitir la r\xe1pida composici\xf3n y orquestaci\xf3n de servicios para crear nuevas aplicaciones y procesos de negocio."),(0,s.yg)("li",{parentName:"ul"},"A pesar de sus beneficios, SOA tambi\xe9n introduce una considerable complejidad. La implementaci\xf3n y gesti\xf3n de un ESB puede ser costosa y requiere una s\xf3lida infraestructura y herramientas de gesti\xf3n. La coordinaci\xf3n de servicios distribuidos y la gesti\xf3n de transacciones y estados tambi\xe9n pueden ser desafiantes. Adem\xe1s, SOA puede implicar una sobrecarga de rendimiento debido a la transformaci\xf3n y el enrutamiento de mensajes a trav\xe9s del bus de servicios, lo que puede afectar la latencia y la eficiencia de la aplicaci\xf3n.")),(0,s.yg)("h4",{id:"analog\xeda-4"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una ciudad con varios servicios p\xfablicos centralizados (como agua, electricidad, transporte). Cada servicio est\xe1 gestionado por una entidad independiente, pero se coordinan a trav\xe9s de un sistema central (el gobierno municipal). Del mismo modo, en una arquitectura SOA, cada servicio es independiente pero se comunica y coordina a trav\xe9s de un bus de servicios.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core-1"},"Ejemplo de Estructura de Proyecto en .NET Core"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Estructura del servicio OrderService:")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/OrderService\n\u251c\u2500\u2500 Controllers\n\u2502   \u2514\u2500\u2500 OrderController.cs\n\u251c\u2500\u2500 Models\n\u2502   \u2514\u2500\u2500 Order.cs\n\u251c\u2500\u2500 Services\n\u2502   \u2514\u2500\u2500 OrderService.cs\n\u251c\u2500\u2500 Repositories\n\u2502   \u2514\u2500\u2500 OrderRepository.cs\n\u251c\u2500\u2500 Data\n\u2502   \u2514\u2500\u2500 OrderContext.cs\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Startup.cs\n\u2514\u2500\u2500 OrderService.csproj\n\n")),(0,s.yg)("p",null,"Estructura del servicio CustomerService:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/CustomerService\n\u251c\u2500\u2500 Controllers\n\u2502   \u2514\u2500\u2500 CustomerController.cs\n\u251c\u2500\u2500 Models\n\u2502   \u2514\u2500\u2500 Customer.cs\n\u251c\u2500\u2500 Services\n\u2502   \u2514\u2500\u2500 CustomerService.cs\n\u251c\u2500\u2500 Repositories\n\u2502   \u2514\u2500\u2500 CustomerRepository.cs\n\u251c\u2500\u2500 Data\n\u2502   \u2514\u2500\u2500 CustomerContext.cs\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Startup.cs\n\u2514\u2500\u2500 CustomerService.csproj\n\n")),(0,s.yg)("h2",{id:"arquitectura-de-eventos-event-driven-architecture"},"Arquitectura de Eventos (Event-Driven Architecture)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de eventos organiza la aplicaci\xf3n en componentes que reaccionan a eventos, los cuales son generados por productores y consumidos por suscriptores. "),(0,s.yg)("li",{parentName:"ul"},"Este enfoque permite una comunicaci\xf3n as\xedncrona y desacoplada entre los componentes del sistema. Los eventos pueden representar cambios de estado o acciones significativas, como la creaci\xf3n de un nuevo usuario, la actualizaci\xf3n de un pedido o la finalizaci\xf3n de una tarea. Los componentes productores emiten eventos, y los componentes consumidores escuchan y reaccionan a estos eventos."),(0,s.yg)("li",{parentName:"ul"},"Una de las principales ventajas de la arquitectura de eventos es la capacidad de manejar sistemas altamente din\xe1micos y escalables. Los componentes pueden ser a\xf1adidos, eliminados o modificados sin afectar a otros componentes, siempre y cuando respeten el contrato de eventos. Esto facilita la evoluci\xf3n y el mantenimiento del sistema. Adem\xe1s, la naturaleza as\xedncrona de la comunicaci\xf3n permite una mayor tolerancia a fallos y una mejor capacidad de respuesta bajo cargas variables, ya que los eventos pueden ser procesados de manera independiente y en paralelo."),(0,s.yg)("li",{parentName:"ul"},"Sin embargo, la arquitectura de eventos tambi\xe9n presenta desaf\xedos. La gesti\xf3n de la consistencia de los datos puede ser compleja debido a la naturaleza as\xedncrona de los eventos. Los desarrolladores deben implementar mecanismos para garantizar que los eventos se procesen en el orden correcto y que los datos permanezcan consistentes. Adem\xe1s, la depuraci\xf3n y el monitoreo de sistemas basados en eventos pueden ser m\xe1s complicados, ya que los flujos de eventos y las dependencias entre componentes pueden ser dif\xedciles de rastrear.")),(0,s.yg)("h4",{id:"analog\xeda-5"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Piensa en una red de mensajer\xeda instant\xe1nea donde las personas se env\xedan mensajes (eventos). Cada persona puede reaccionar a los mensajes recibidos de manera independiente, y la red asegura que los mensajes lleguen a sus destinatarios. Del mismo modo, en una arquitectura de eventos, los componentes reaccionan a los eventos generados de manera independiente y as\xedncrona.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-2"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/event-driven-app\n\u251c\u2500\u2500 producers\n\u2502   \u251c\u2500\u2500 userEventProducer.js\n\u2502   \u2514\u2500\u2500 productEventProducer.js\n\u251c\u2500\u2500 consumers\n\u2502   \u251c\u2500\u2500 userEventConsumer.js\n\u2502   \u2514\u2500\u2500 productEventConsumer.js\n\u251c\u2500\u2500 events\n\u2502   \u251c\u2500\u2500 userEvents.js\n\u2502   \u2514\u2500\u2500 productEvents.js\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 userService.js\n\u2502   \u2514\u2500\u2500 productService.js\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 config.js\n\u2514\u2500\u2500 package.json\n")),(0,s.yg)("h2",{id:"arquitectura-multicapa-multitier-y-multilayer"},"Arquitectura Multicapa (Multitier y Multilayer)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura multicapa (o multitier) y la arquitectura en capas (o multilayer) son t\xe9rminos que a menudo se usan indistintamente, aunque t\xe9cnicamente tienen diferencias. Ambos enfoques dividen una aplicaci\xf3n en capas, pero se diferencian principalmente en su implementaci\xf3n y uso.")),(0,s.yg)("h4",{id:"multitier-multicapa"},"Multitier (Multicapa)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},'La arquitectura multicapa se refiere a la separaci\xf3n f\xedsica y l\xf3gica de diferentes componentes de una aplicaci\xf3n en diferentes niveles o "tiers". '),(0,s.yg)("li",{parentName:"ul"},"Separaci\xf3n f\xedsica: Los componentes de la aplicaci\xf3n est\xe1n distribuidos en diferentes servidores o m\xe1quinas. Esta separaci\xf3n la diferencia de multilayer. "),(0,s.yg)("li",{parentName:"ul"},"Los niveles comunes en una arquitectura multitier son:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Capa de Presentaci\xf3n (Presentation Tier): Esta capa contiene la interfaz de usuario y se comunica con la l\xf3gica de negocio. Incluye aplicaciones web, m\xf3viles, o de escritorio que interact\xfaan con el usuario final."),(0,s.yg)("li",{parentName:"ul"},"Capa de L\xf3gica de Negocio (Business Logic Tier): Esta capa contiene la l\xf3gica de negocio y las reglas de la aplicaci\xf3n. Procesa las entradas del usuario y toma decisiones basadas en la l\xf3gica del negocio."),(0,s.yg)("li",{parentName:"ul"},"Capa de Acceso a Datos (Data Access Tier): Esta capa se encarga de interactuar con la base de datos u otros sistemas de almacenamiento de datos. Realiza operaciones CRUD (crear, leer, actualizar, eliminar) sobre los datos."),(0,s.yg)("li",{parentName:"ul"},"Capa de Almacenamiento de Datos (Data Storage Tier): Aunque a veces se incluye en la capa de acceso a datos, en aplicaciones m\xe1s complejas puede ser un nivel separado. Este nivel contiene la base de datos real o sistemas de almacenamiento de datos.")))),(0,s.yg)("h4",{id:"multilayer-en-capas"},"Multilayer (En Capas)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura en capas es m\xe1s un enfoque de dise\xf1o l\xf3gico que separa las responsabilidades en diferentes capas, sin necesariamente implicar una separaci\xf3n f\xedsica en diferentes servidores o servicios."),(0,s.yg)("li",{parentName:"ul"},"Separaci\xf3n l\xf3gica: Los componentes de la aplicaci\xf3n est\xe1n organizados en diferentes capas dentro de la misma aplicaci\xf3n, no necesariamente en servidores separados. Esta separaci\xf3n la diferencia de multitier. "),(0,s.yg)("li",{parentName:"ul"},"Las capas t\xedpicas en una arquitectura multilayer son similares a las multitier:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Capa de Presentaci\xf3n: Maneja la interfaz de usuario y la l\xf3gica de presentaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Capa de Aplicaci\xf3n o L\xf3gica de Negocio: Maneja la l\xf3gica de negocio y las reglas de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Capa de Datos: Maneja el acceso y la manipulaci\xf3n de datos, incluyendo la interacci\xf3n con bases de datos y otros sistemas de almacenamiento."))),(0,s.yg)("li",{parentName:"ul"},"En ambas arquitecturas, cada capa tiene una responsabilidad espec\xedfica y se comunica con las capas adyacentes a trav\xe9s de interfaces bien definidas. Esto promueve la separaci\xf3n de preocupaciones, la modularidad, y facilita el mantenimiento y la escalabilidad de la aplicaci\xf3n.")),(0,s.yg)("h4",{id:"analog\xeda-6"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una empresa con diferentes departamentos:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Recepci\xf3n (Capa de Presentaci\xf3n): Los recepcionistas interact\xfaan directamente con los clientes, recibiendo sus solicitudes y preguntas."),(0,s.yg)("li",{parentName:"ul"},"Departamento de Operaciones (Capa de L\xf3gica de Negocio): Los empleados de operaciones procesan las solicitudes de los clientes, aplicando las pol\xedticas y reglas de la empresa para tomar decisiones."),(0,s.yg)("li",{parentName:"ul"},"Departamento de Archivo (Capa de Acceso a Datos): Este departamento maneja los registros y documentos de la empresa, guardando y recuperando informaci\xf3n seg\xfan sea necesario."),(0,s.yg)("li",{parentName:"ul"},"Archivo F\xedsico (Capa de Almacenamiento de Datos): El lugar donde se almacenan f\xedsicamente todos los documentos y registros de la empresa."))),(0,s.yg)("li",{parentName:"ul"},"Cada departamento tiene una funci\xf3n espec\xedfica y se comunica con los otros departamentos para cumplir con las solicitudes de los clientes. La separaci\xf3n de responsabilidades facilita la eficiencia y la organizaci\xf3n.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura"},"Ejemplo de Estructura"),(0,s.yg)("h5",{id:"multitier-en-net-core"},"Multitier en .NET Core"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/MultitierApp\n\u251c\u2500\u2500 PresentationLayer\n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u2502   \u251c\u2500\u2500 HomeController.cs\n\u2502   \u2502   \u2514\u2500\u2500 ProductController.cs\n\u2502   \u2514\u2500\u2500 Views\n\u2502       \u251c\u2500\u2500 Home\n\u2502       \u2502   \u2514\u2500\u2500 Index.cshtml\n\u2502       \u2514\u2500\u2500 Product\n\u2502           \u2514\u2500\u2500 Details.cshtml\n\u251c\u2500\u2500 BusinessLogicLayer\n\u2502   \u251c\u2500\u2500 Services\n\u2502   \u2502   \u251c\u2500\u2500 ProductService.cs\n\u2502   \u2502   \u2514\u2500\u2500 UserService.cs\n\u2502   \u2514\u2500\u2500 Interfaces\n\u2502       \u251c\u2500\u2500 IProductService.cs\n\u2502       \u2514\u2500\u2500 IUserService.cs\n\u251c\u2500\u2500 DataAccessLayer\n\u2502   \u251c\u2500\u2500 Repositories\n\u2502   \u2502   \u251c\u2500\u2500 ProductRepository.cs\n\u2502   \u2502   \u2514\u2500\u2500 UserRepository.cs\n\u2502   \u2514\u2500\u2500 Interfaces\n\u2502       \u251c\u2500\u2500 IProductRepository.cs\n\u2502       \u2514\u2500\u2500 IUserRepository.cs\n\u251c\u2500\u2500 DataStorageLayer\n\u2502   \u2514\u2500\u2500 DbContext\n\u2502       \u2514\u2500\u2500 ApplicationDbContext.cs\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 Startup.cs\n\u2514\u2500\u2500 MultitierApp.csproj\n\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"En este ejemplo, cada capa est\xe1 separada en diferentes proyectos o m\xf3dulos, que podr\xedan ser desplegados en diferentes servidores si se desea. Por ejemplo, la capa de presentaci\xf3n podr\xeda estar en un servidor web, la capa de l\xf3gica de negocio en otro servidor de aplicaciones y la capa de datos en un servidor de bases de datos.")))),(0,s.yg)("h5",{id:"multilayer-en-nodejs"},"Multilayer en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/MultilayerApp\n\u251c\u2500\u2500 presentation\n\u2502   \u251c\u2500\u2500 controllers\n\u2502   \u2502   \u251c\u2500\u2500 homeController.js\n\u2502   \u2502   \u2514\u2500\u2500 productController.js\n\u2502   \u2514\u2500\u2500 views\n\u2502       \u251c\u2500\u2500 home\n\u2502       \u2502   \u2514\u2500\u2500 index.ejs\n\u2502       \u2514\u2500\u2500 product\n\u2502           \u2514\u2500\u2500 details.ejs\n\u251c\u2500\u2500 business\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u251c\u2500\u2500 productService.js\n\u2502   \u2502   \u2514\u2500\u2500 userService.js\n\u2502   \u2514\u2500\u2500 interfaces\n\u2502       \u251c\u2500\u2500 IProductService.js\n\u2502       \u2514\u2500\u2500 IUserService.js\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 repositories\n\u2502   \u2502   \u251c\u2500\u2500 productRepository.js\n\u2502   \u2502   \u2514\u2500\u2500 userRepository.js\n\u2502   \u2514\u2500\u2500 interfaces\n\u2502       \u251c\u2500\u2500 IProductRepository.js\n\u2502       \u2514\u2500\u2500 IUserRepository.js\n\u251c\u2500\u2500 storage\n\u2502   \u2514\u2500\u2500 dbContext\n\u2502       \u2514\u2500\u2500 applicationDbContext.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"En este ejemplo, todas las capas est\xe1n dentro de la misma aplicaci\xf3n y se ejecutan en el mismo entorno, aunque l\xf3gicamente separadas. Esto facilita la organizaci\xf3n y el mantenimiento del c\xf3digo, pero no implica una separaci\xf3n f\xedsica en diferentes servidores.")))),(0,s.yg)("h4",{id:"diferencias"},"Diferencias"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Multitier: Separaci\xf3n f\xedsica en diferentes servidores o m\xe1quinas, promoviendo escalabilidad y distribuci\xf3n. Ejemplo en .NET Core."),(0,s.yg)("li",{parentName:"ul"},"Multilayer: Separaci\xf3n l\xf3gica dentro de la misma aplicaci\xf3n, promoviendo organizaci\xf3n y modularidad del c\xf3digo. Ejemplo en Node.js.")),(0,s.yg)("h2",{id:"arquitectura-de-tres-capas"},"Arquitectura de Tres Capas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de tres capas es un tipo espec\xedfico de arquitectura en capas que divide una aplicaci\xf3n en tres capas principales: la capa de presentaci\xf3n, la capa de l\xf3gica de negocio y la capa de datos. Esta arquitectura es ampliamente utilizada debido a su capacidad para separar preocupaciones, mejorar la mantenibilidad y escalar aplicaciones de manera eficiente."),(0,s.yg)("li",{parentName:"ul"},"Capa de Presentaci\xf3n (Presentation Layer):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa es responsable de la interfaz de usuario y la interacci\xf3n con el usuario final."),(0,s.yg)("li",{parentName:"ul"},"Maneja la entrada y salida de datos, presentando la informaci\xf3n al usuario y recibiendo sus acciones."),(0,s.yg)("li",{parentName:"ul"},"Puede estar compuesta por aplicaciones web, aplicaciones de escritorio, aplicaciones m\xf3viles, etc."),(0,s.yg)("li",{parentName:"ul"},"En t\xe9rminos t\xe9cnicos, esta capa incluye componentes como HTML, CSS, JavaScript, controladores de MVC, y p\xe1ginas web."))),(0,s.yg)("li",{parentName:"ul"},"Capa de L\xf3gica de Negocio (Business Logic Layer):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa contiene las reglas de negocio y la l\xf3gica que define c\xf3mo se deben procesar los datos."),(0,s.yg)("li",{parentName:"ul"},"Act\xfaa como intermediario entre la capa de presentaci\xf3n y la capa de datos."),(0,s.yg)("li",{parentName:"ul"},"Procesa las solicitudes de la capa de presentaci\xf3n, aplica la l\xf3gica de negocio, y genera respuestas adecuadas."),(0,s.yg)("li",{parentName:"ul"},"Incluye servicios, controladores de aplicaci\xf3n, reglas de negocio, y cualquier otra l\xf3gica central de la aplicaci\xf3n."))),(0,s.yg)("li",{parentName:"ul"},"Capa de Datos (Data Layer):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa se encarga de la gesti\xf3n de datos y el acceso a las bases de datos."),(0,s.yg)("li",{parentName:"ul"},"Proporciona una abstracci\xf3n sobre las operaciones CRUD (crear, leer, actualizar, eliminar)."),(0,s.yg)("li",{parentName:"ul"},"Incluye repositorios, contextos de base de datos, y entidades de datos."),(0,s.yg)("li",{parentName:"ul"},"Puede interactuar con bases de datos relacionales, bases de datos no relacionales, servicios de almacenamiento en la nube, etc."))),(0,s.yg)("li",{parentName:"ul"},"La arquitectura de tres capas mejora la modularidad, permitiendo que cada capa pueda desarrollarse, probarse y desplegarse de manera independiente. Esto facilita el mantenimiento y la evoluci\xf3n de la aplicaci\xf3n.")),(0,s.yg)("h4",{id:"analog\xeda-7"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un restaurante con tres \xe1reas principales:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"\xc1rea de Atenci\xf3n al Cliente (Capa de Presentaci\xf3n): Los camareros interact\xfaan con los clientes, toman sus \xf3rdenes y les sirven la comida."),(0,s.yg)("li",{parentName:"ul"},"Cocina (Capa de L\xf3gica de Negocio): Los cocineros procesan las \xf3rdenes, preparan la comida seg\xfan las recetas (reglas de negocio) y env\xedan los platos listos para servir."),(0,s.yg)("li",{parentName:"ul"},"Almac\xe9n (Capa de Datos): Aqu\xed se almacenan los ingredientes y suministros necesarios para preparar la comida. Los cocineros acceden a estos recursos seg\xfan sea necesario."))),(0,s.yg)("li",{parentName:"ul"},"Cada \xe1rea tiene una funci\xf3n espec\xedfica y, aunque est\xe1n interconectadas, operan de manera independiente para proporcionar un servicio eficiente.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-3"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/ThreeTierApp\n\u251c\u2500\u2500 presentation\n\u2502   \u251c\u2500\u2500 controllers\n\u2502   \u2502   \u251c\u2500\u2500 homeController.js\n\u2502   \u2502   \u2514\u2500\u2500 productController.js\n\u2502   \u2514\u2500\u2500 views\n\u2502       \u251c\u2500\u2500 home\n\u2502       \u2502   \u2514\u2500\u2500 index.ejs\n\u2502       \u2514\u2500\u2500 product\n\u2502           \u2514\u2500\u2500 details.ejs\n\u251c\u2500\u2500 business\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u251c\u2500\u2500 productService.js\n\u2502   \u2502   \u2514\u2500\u2500 userService.js\n\u2502   \u2514\u2500\u2500 interfaces\n\u2502       \u251c\u2500\u2500 IProductService.js\n\u2502       \u2514\u2500\u2500 IUserService.js\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 repositories\n\u2502   \u2502   \u251c\u2500\u2500 productRepository.js\n\u2502   \u2502   \u2514\u2500\u2500 userRepository.js\n\u2502   \u2514\u2500\u2500 dataContext\n\u2502       \u2514\u2500\u2500 applicationDbContext.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("h2",{id:"arquitectura-onion-cebolla"},"Arquitectura Onion (Cebolla)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura Onion, tambi\xe9n conocida como arquitectura de cebolla, es un patr\xf3n de arquitectura de software que promueve la modularidad y el desacoplamiento de componentes. "),(0,s.yg)("li",{parentName:"ul"},"Este enfoque organiza una aplicaci\xf3n en capas conc\xe9ntricas alrededor de un n\xfacleo central, donde cada capa puede depender \xfanicamente de las capas interiores pero no de las exteriores. Las capas t\xedpicas en una arquitectura Onion suelen ser:"),(0,s.yg)("li",{parentName:"ul"},"N\xfacleo (Core):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta es la capa central de la aplicaci\xf3n, que contiene la l\xf3gica de dominio fundamental y las entidades principales."),(0,s.yg)("li",{parentName:"ul"},"Es independiente de cualquier capa externa y define las interfaces que las capas externas deben implementar."),(0,s.yg)("li",{parentName:"ul"},"En esta capa se definen los modelos de dominio, las interfaces de servicios y las reglas de negocio fundamentales."))),(0,s.yg)("li",{parentName:"ul"},"Capa de Infraestructura (Infrastructure):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa proporciona soporte t\xe9cnico para la aplicaci\xf3n, incluyendo acceso a datos, servicios de terceros, configuraci\xf3n, logging, etc."),(0,s.yg)("li",{parentName:"ul"},"Implementa las interfaces definidas en el n\xfacleo para interactuar con sistemas externos y recursos."),(0,s.yg)("li",{parentName:"ul"},"Puede incluir implementaciones concretas de bases de datos, servicios de autenticaci\xf3n, servicios de correo electr\xf3nico, etc."))),(0,s.yg)("li",{parentName:"ul"},"Capa de Aplicaci\xf3n (Application):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa contiene la l\xf3gica de aplicaci\xf3n espec\xedfica, que coordina las interacciones entre el n\xfacleo y la infraestructura."),(0,s.yg)("li",{parentName:"ul"},"Implementa los casos de uso de la aplicaci\xf3n utilizando servicios definidos en el n\xfacleo y recursos de la infraestructura."),(0,s.yg)("li",{parentName:"ul"},"Maneja la l\xf3gica de flujo de la aplicaci\xf3n y las operaciones de alto nivel."))),(0,s.yg)("li",{parentName:"ul"},"Capa de Presentaci\xf3n (Presentation):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta capa proporciona la interfaz de usuario y gestiona la interacci\xf3n con el usuario final."),(0,s.yg)("li",{parentName:"ul"},"Puede ser una aplicaci\xf3n web, una aplicaci\xf3n de escritorio, una API REST, etc."),(0,s.yg)("li",{parentName:"ul"},"Se comunica con la capa de aplicaci\xf3n para solicitar datos y servicios, y presenta los resultados al usuario."))),(0,s.yg)("li",{parentName:"ul"},"La arquitectura Onion fomenta el desarrollo orientado por contratos (interfaces bien definidas entre capas) y permite que cada capa se pueda desarrollar, probar y mantener de manera independiente. Esto facilita la adaptabilidad y el cambio en la aplicaci\xf3n a medida que evoluciona.")),(0,s.yg)("h4",{id:"analog\xeda-8"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una cebolla, donde cada capa representa una parte diferente:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"N\xfacleo (Core): Es el centro de la cebolla, donde se encuentra la esencia y los elementos fundamentales de la cebolla."),(0,s.yg)("li",{parentName:"ul"},"Capa de Infraestructura (Infrastructure): La capa externa m\xe1s cercana al n\xfacleo, proporciona soporte y nutrientes esenciales para el crecimiento y mantenimiento de la cebolla."),(0,s.yg)("li",{parentName:"ul"},"Capa de Aplicaci\xf3n (Application): La capa media, que act\xfaa como un v\xednculo entre el n\xfacleo y la capa externa. Controla c\xf3mo se desarrollan las capas internas y externas."),(0,s.yg)("li",{parentName:"ul"},"Capa de Presentaci\xf3n (Presentation): La capa m\xe1s externa, visible y accesible para el mundo exterior. Es la parte de la cebolla que interact\xfaa directamente con el entorno exterior.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core-2"},"Ejemplo de Estructura de Proyecto en .NET Core"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/OnionArchitecture\n\u251c\u2500\u2500 Core\n\u2502   \u251c\u2500\u2500 Models\n\u2502   \u2502   \u2514\u2500\u2500 Product.cs\n\u2502   \u251c\u2500\u2500 Services\n\u2502   \u2502   \u2514\u2500\u2500 IProductService.cs\n\u2502   \u2514\u2500\u2500 Repositories\n\u2502       \u2514\u2500\u2500 IProductRepository.cs\n\u251c\u2500\u2500 Infrastructure\n\u2502   \u251c\u2500\u2500 Data\n\u2502   \u2502   \u2514\u2500\u2500 ApplicationDbContext.cs\n\u2502   \u251c\u2500\u2500 Services\n\u2502   \u2502   \u2514\u2500\u2500 ProductService.cs\n\u2502   \u2514\u2500\u2500 Repositories\n\u2502       \u2514\u2500\u2500 ProductRepository.cs\n\u251c\u2500\u2500 Application\n\u2502   \u2514\u2500\u2500 ProductAppService.cs\n\u251c\u2500\u2500 Web\n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u2502   \u2514\u2500\u2500 ProductController.cs\n\u2502   \u2514\u2500\u2500 Views\n\u2502       \u2514\u2500\u2500 Product\n\u2502           \u2514\u2500\u2500 Index.cshtml\n\u251c\u2500\u2500 Program.cs\n\u2514\u2500\u2500 Startup.cs\n")),(0,s.yg)("h2",{id:"arquitectura-hexagonal"},"Arquitectura Hexagonal"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura hexagonal, tambi\xe9n conocida como puertos y adaptadores, es un patr\xf3n de dise\xf1o arquitect\xf3nico que promueve la independencia de la l\xf3gica de negocio de los detalles de implementaci\xf3n externos, como interfaces de usuario, bases de datos y servicios externos. Este enfoque organiza una aplicaci\xf3n en torno a un n\xfacleo de dominio, utilizando adaptadores para conectar con componentes externos."),(0,s.yg)("li",{parentName:"ul"},"N\xfacleo de Dominio (Core Domain):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Esta es la parte central de la aplicaci\xf3n, que contiene la l\xf3gica de negocio y las entidades principales."),(0,s.yg)("li",{parentName:"ul"},"Es independiente de cualquier tecnolog\xeda o interfaz externa."),(0,s.yg)("li",{parentName:"ul"},"Define los servicios de dominio y las reglas de negocio fundamentales de la aplicaci\xf3n."))),(0,s.yg)("li",{parentName:"ul"},"Puertos (Ports):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Son interfaces que definen c\xf3mo interact\xfaa el n\xfacleo de dominio con el mundo exterior."),(0,s.yg)("li",{parentName:"ul"},"Representan las necesidades que el n\xfacleo tiene del exterior (por ejemplo, almacenar datos, enviar correos electr\xf3nicos)."),(0,s.yg)("li",{parentName:"ul"},"Generalmente se definen como interfaces o contratos."))),(0,s.yg)("li",{parentName:"ul"},"Adaptadores (Adapters):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Implementan los puertos y conectan el n\xfacleo de dominio con los recursos externos."),(0,s.yg)("li",{parentName:"ul"},"Adaptan las interfaces externas (como bases de datos, servicios web) para que sean compatibles con los puertos definidos por el n\xfacleo."),(0,s.yg)("li",{parentName:"ul"},"Pueden ser adaptadores de persistencia (para bases de datos), adaptadores de servicios externos, adaptadores de UI, etc."))),(0,s.yg)("li",{parentName:"ul"},"La arquitectura hexagonal facilita el testing y la evoluci\xf3n del software, ya que separa claramente la l\xf3gica de negocio del mecanismo de interacci\xf3n con el exterior. Esto permite cambiar los adaptadores sin afectar al n\xfacleo de la aplicaci\xf3n, y tambi\xe9n permite simular f\xe1cilmente los componentes externos durante las pruebas.")),(0,s.yg)("h4",{id:"analog\xeda-9"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una fortaleza con varias murallas conc\xe9ntricas:"),(0,s.yg)("li",{parentName:"ul"},"N\xfacleo de la Fortaleza (Core Domain): El castillo o fortaleza en el centro, que contiene los elementos m\xe1s vitales y fundamentales para la defensa."),(0,s.yg)("li",{parentName:"ul"},"Puertas (Ports): Las puertas que conectan el interior de la fortaleza con el exterior. Estas puertas permiten la entrada y salida controlada de personas y recursos."),(0,s.yg)("li",{parentName:"ul"},"Adaptadores (Adapters): Las torres y puestos de guardia que controlan y adaptan la interacci\xf3n con el exterior. Cada torre puede tener diferentes mecanismos de defensa (como catapultas para defensa o puentes levadizos para acceso).")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-4"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/HexagonalArchitecture\n\u251c\u2500\u2500 core\n\u2502   \u251c\u2500\u2500 models\n\u2502   \u2502   \u2514\u2500\u2500 product.js\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u2514\u2500\u2500 productService.js\n\u2502   \u2514\u2500\u2500 repositories\n\u2502       \u2514\u2500\u2500 productRepository.js\n\u251c\u2500\u2500 adapters\n\u2502   \u251c\u2500\u2500 persistence\n\u2502   \u2502   \u2514\u2500\u2500 productRepository.js\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u2514\u2500\u2500 emailService.js\n\u2502   \u2514\u2500\u2500 ui\n\u2502       \u2514\u2500\u2500 productController.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n")),(0,s.yg)("h2",{id:"clean-architecture-arquitectura-limpia"},"Clean Architecture (Arquitectura Limpia)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La Clean Architecture, o Arquitectura Limpia, es un enfoque de dise\xf1o de software propuesto por Robert C. Martin (Uncle Bob) que promueve la separaci\xf3n de preocupaciones y la independencia de detalles t\xe9cnicos en una aplicaci\xf3n. Esta arquitectura define varios niveles de abstracci\xf3n y establece reglas claras sobre c\xf3mo deben interactuar y depender entre s\xed."),(0,s.yg)("li",{parentName:"ul"},"C\xedrculos Conc\xe9ntricos:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"La Clean Architecture organiza una aplicaci\xf3n en c\xedrculos conc\xe9ntricos, donde cada c\xedrculo representa un nivel de abstracci\xf3n y dependencia."),(0,s.yg)("li",{parentName:"ul"},"Los c\xedrculos m\xe1s internos contienen las partes m\xe1s fundamentales y de alto nivel de la aplicaci\xf3n, mientras que los c\xedrculos externos contienen los detalles t\xe9cnicos y las implementaciones concretas."))),(0,s.yg)("li",{parentName:"ul"},"Principios Fundamentales:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Independencia de Frameworks: Los detalles t\xe9cnicos espec\xedficos, como frameworks y bibliotecas, deben estar en los c\xedrculos m\xe1s externos, sin afectar a los c\xedrculos internos que contienen la l\xf3gica de negocio."),(0,s.yg)("li",{parentName:"ul"},"Independencia de Interfaces de Usuario: La l\xf3gica de negocio y las reglas de la aplicaci\xf3n deben ser independientes de la UI. Esto facilita cambiar o actualizar la interfaz de usuario sin afectar la l\xf3gica subyacente."),(0,s.yg)("li",{parentName:"ul"},"Independencia de Bases de Datos: La l\xf3gica de negocio no debe estar ligada a una base de datos espec\xedfica. Se utilizan adaptadores para interactuar con bases de datos, permitiendo cambiarlas sin afectar la l\xf3gica de la aplicaci\xf3n."))),(0,s.yg)("li",{parentName:"ul"},"Componentes Principales:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Entidades: Representan los objetos fundamentales de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Casos de Uso (Use Cases): Implementan las reglas de negocio y representan las acciones que puede realizar el usuario."),(0,s.yg)("li",{parentName:"ul"},"Interfaces de Interactor (Interactor Interfaces): Definen las interfaces que los adaptadores deben implementar para interactuar con los casos de uso."),(0,s.yg)("li",{parentName:"ul"},"Adaptadores: Implementan las interfaces de interactor y conectan los casos de uso con detalles externos como bases de datos y UI."))),(0,s.yg)("li",{parentName:"ul"},"La Clean Architecture promueve la testabilidad, mantenibilidad y escalabilidad del software al enfocarse en la separaci\xf3n de responsabilidades y en la independencia de detalles t\xe9cnicos.")),(0,s.yg)("h4",{id:"analog\xeda-10"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una casa bien dise\xf1ada y organizada:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Fundamentos s\xf3lidos (Entidades): Los cimientos y la estructura b\xe1sica que sostienen la casa (entidades fundamentales de la aplicaci\xf3n)."),(0,s.yg)("li",{parentName:"ul"},"Dise\xf1o arquitect\xf3nico (Casos de Uso): La disposici\xf3n y el dise\xf1o interior que hacen que la casa sea funcional y habitable (casos de uso y reglas de negocio)."),(0,s.yg)("li",{parentName:"ul"},"Conexiones y adaptaciones (Adaptadores): Las conexiones el\xe9ctricas, tuber\xedas y sistemas de ventilaci\xf3n que conectan la casa con servicios externos (adaptadores que conectan los casos de uso con servicios externos).")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core-3"},"Ejemplo de Estructura de Proyecto en .NET Core"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/CleanArchitecture\n\u251c\u2500\u2500 Core\n\u2502   \u251c\u2500\u2500 Entities\n\u2502   \u2502   \u2514\u2500\u2500 Product.cs\n\u2502   \u251c\u2500\u2500 UseCases\n\u2502   \u2502   \u251c\u2500\u2500 ProductUseCase.cs\n\u2502   \u2502   \u2514\u2500\u2500 UserUseCase.cs\n\u2502   \u2514\u2500\u2500 Interfaces\n\u2502       \u2514\u2500\u2500 IProductRepository.cs\n\u251c\u2500\u2500 Infrastructure\n\u2502   \u251c\u2500\u2500 Persistence\n\u2502   \u2502   \u2514\u2500\u2500 ProductRepository.cs\n\u2502   \u2514\u2500\u2500 UI\n\u2502       \u2514\u2500\u2500 ProductController.cs\n\u251c\u2500\u2500 Program.cs\n\u2514\u2500\u2500 Startup.cs\n\n")),(0,s.yg)("h2",{id:"arquitectura-prerenderizada"},"Arquitectura Prerenderizada"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura prerenderizada, tambi\xe9n conocida como Static Site Generation (SSG), es una t\xe9cnica en el desarrollo web donde las p\xe1ginas de una aplicaci\xf3n se generan en HTML est\xe1tico en el momento de la construcci\xf3n (build time) y se sirven al cliente desde un servidor o CDN (Content Delivery Network). A diferencia del Server-Side Rendering (SSR), donde el HTML se genera en cada solicitud del usuario, en la prerenderizaci\xf3n el HTML se genera una vez y se reutiliza para todas las solicitudes.")),(0,s.yg)("h4",{id:"1--proceso-de-prerenderizaci\xf3n"},"1- Proceso de Prerenderizaci\xf3n"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Generaci\xf3n en el Build Time: Durante el proceso de construcci\xf3n de la aplicaci\xf3n, todas las p\xe1ginas se generan en HTML est\xe1tico utilizando el contenido y los datos disponibles en ese momento."),(0,s.yg)("li",{parentName:"ul"},"Almacenamiento en el Servidor o CDN: Las p\xe1ginas HTML generadas se almacenan en un servidor o CDN."),(0,s.yg)("li",{parentName:"ul"},"Respuesta del Servidor: Cuando un usuario solicita una p\xe1gina, el servidor o CDN entrega el HTML pre-generado directamente al navegador del usuario.")),(0,s.yg)("h4",{id:"2--ventajas-de-la-prerenderizaci\xf3n"},"2- Ventajas de la Prerenderizaci\xf3n"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Rendimiento \xd3ptimo: Las p\xe1ginas est\xe1ticas se sirven r\xe1pidamente porque no requieren procesamiento adicional en el servidor."),(0,s.yg)("li",{parentName:"ul"},"Mejor SEO: Los motores de b\xfasqueda pueden indexar f\xe1cilmente el contenido de las p\xe1ginas est\xe1ticas."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Las p\xe1ginas est\xe1ticas pueden ser servidas de manera eficiente a grandes vol\xfamenes de tr\xe1fico, especialmente cuando se utilizan CDNs."),(0,s.yg)("li",{parentName:"ul"},"Seguridad: Las p\xe1ginas est\xe1ticas no tienen l\xf3gica del lado del servidor que pueda ser explotada por atacantes.")),(0,s.yg)("h4",{id:"3--desventajas-de-la-prerenderizaci\xf3n"},"3- Desventajas de la Prerenderizaci\xf3n"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Actualizaci\xf3n de Contenido: Cambiar el contenido requiere regenerar y desplegar las p\xe1ginas est\xe1ticas nuevamente."),(0,s.yg)("li",{parentName:"ul"},"Interactividad Din\xe1mica Limitada: Las p\xe1ginas est\xe1ticas no pueden manejar contenido altamente din\xe1mico que cambia frecuentemente.")),(0,s.yg)("h4",{id:"4--frameworks-y-bibliotecas"},"4- Frameworks y Bibliotecas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Muchos frameworks modernos soportan la prerenderizaci\xf3n, como Gatsby (para React), Next.js (tambi\xe9n soporta SSR), y Nuxt.js (para Vue.js)."),(0,s.yg)("li",{parentName:"ul"},"Estos frameworks proporcionan herramientas para generar p\xe1ginas est\xe1ticas durante el build time y manejar la configuraci\xf3n de rutas y datos.")),(0,s.yg)("h4",{id:"analog\xeda-11"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una imprenta:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Prerenderizaci\xf3n (SSG): La imprenta imprime miles de copias de un libro y las distribuye a las librer\xedas. Cada vez que un cliente compra el libro, recibe una copia preimpresa."),(0,s.yg)("li",{parentName:"ul"},"SSR (Server-Side Rendering): Cada vez que un cliente solicita un libro, la imprenta imprime una copia y la env\xeda directamente al cliente.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-gatsby-react"},"Ejemplo de Estructura de Proyecto en Gatsby (React)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/PrerenderedApp\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2502   \u251c\u2500\u2500 about.js\n\u2502   \u2502   \u2514\u2500\u2500 contact.js\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u2514\u2500\u2500 Footer.js\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u2514\u2500\u2500 blogPost.js\n\u2502   \u251c\u2500\u2500 styles\n\u2502   \u2502   \u2514\u2500\u2500 globals.css\n\u2502   \u2514\u2500\u2500 images\n\u2502       \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 gatsby-config.js\n\u251c\u2500\u2500 gatsby-node.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"src/pages/: Contiene las p\xe1ginas de la aplicaci\xf3n, cada una se genera como HTML est\xe1tico."),(0,s.yg)("li",{parentName:"ul"},"src/components/: Contiene componentes reutilizables como Header y Footer."),(0,s.yg)("li",{parentName:"ul"},"src/templates/: Contiene plantillas para contenido din\xe1mico, como publicaciones de blog."),(0,s.yg)("li",{parentName:"ul"},"gatsby-config.js: Archivo de configuraci\xf3n para el proyecto Gatsby."),(0,s.yg)("li",{parentName:"ul"},"gatsby-node.js: Script para manejar la creaci\xf3n de p\xe1ginas din\xe1micas durante el build time.")))),(0,s.yg)("h2",{id:"arquitectura-de-aplicaciones-isom\xf3rficas"},"Arquitectura de Aplicaciones Isom\xf3rficas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de aplicaciones isom\xf3rficas, tambi\xe9n conocida como Universal Rendering, se refiere a las aplicaciones web que pueden renderizar tanto en el servidor como en el cliente utilizando el mismo c\xf3digo JavaScript. Esto permite una transici\xf3n suave entre el renderizado en el servidor y el renderizado en el cliente, proporcionando una experiencia de usuario r\xe1pida y mejorando la optimizaci\xf3n para motores de b\xfasqueda (SEO).")),(0,s.yg)("h4",{id:"1--proceso-isom\xf3rfico"},"1- Proceso Isom\xf3rfico"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Renderizado en el Servidor (SSR): Cuando un usuario solicita una p\xe1gina, el servidor genera el HTML inicial de la aplicaci\xf3n y lo env\xeda al navegador."),(0,s.yg)("li",{parentName:"ul"},'Hidrataci\xf3n en el Cliente: Una vez que el HTML llega al navegador, el JavaScript del lado del cliente toma el control de la aplicaci\xf3n, "hidratando" el HTML est\xe1tico para hacerlo interactivo.'),(0,s.yg)("li",{parentName:"ul"},"Interactividad Completa en el Cliente (CSR): Despu\xe9s de la hidrataci\xf3n, la aplicaci\xf3n puede actualizarse din\xe1micamente en el cliente sin necesidad de recargar la p\xe1gina, utilizando JavaScript.")),(0,s.yg)("h4",{id:"2--ventajas-de-las-aplicaciones-isom\xf3rficas"},"2- Ventajas de las Aplicaciones Isom\xf3rficas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Mejor SEO: Dado que el HTML completo se genera en el servidor, los motores de b\xfasqueda pueden indexar el contenido f\xe1cilmente."),(0,s.yg)("li",{parentName:"ul"},"Tiempo de Carga Inicial M\xe1s R\xe1pido: Los usuarios ven el contenido de la p\xe1gina m\xe1s r\xe1pidamente debido al renderizado en el servidor."),(0,s.yg)("li",{parentName:"ul"},"Experiencia de Usuario Suave: La transici\xf3n entre el renderizado del servidor y las actualizaciones din\xe1micas del cliente es fluida, proporcionando una experiencia de usuario r\xe1pida y responsiva."),(0,s.yg)("li",{parentName:"ul"},"Reutilizaci\xf3n de C\xf3digo: El mismo c\xf3digo JavaScript se puede utilizar tanto en el servidor como en el cliente, lo que facilita el mantenimiento y la consistencia.")),(0,s.yg)("h4",{id:"3--desaf\xedos-de-las-aplicaciones-isom\xf3rficas"},"3- Desaf\xedos de las Aplicaciones Isom\xf3rficas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Complejidad: La configuraci\xf3n y el mantenimiento de una aplicaci\xf3n isom\xf3rfica pueden ser m\xe1s complejos debido a la necesidad de manejar el renderizado en ambos lados."),(0,s.yg)("li",{parentName:"ul"},"Rendimiento del Servidor: El renderizado en el servidor puede aumentar la carga del servidor, especialmente en aplicaciones con mucho tr\xe1fico."),(0,s.yg)("li",{parentName:"ul"},"Sincronizaci\xf3n de Estado: Asegurar que el estado de la aplicaci\xf3n est\xe9 sincronizado entre el servidor y el cliente puede ser complicado.")),(0,s.yg)("h4",{id:"4--frameworks-y-bibliotecas-1"},"4- Frameworks y Bibliotecas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Frameworks populares como Next.js (para React) y Nuxt.js (para Vue.js) ofrecen soporte integrado para aplicaciones isom\xf3rficas, facilitando el proceso de configuraci\xf3n y desarrollo.")),(0,s.yg)("h4",{id:"analog\xeda-12"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una pel\xedcula que puede ser proyectada tanto en un cine como en una televisi\xf3n en casa:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Pel\xedcula Tradicional: Solo puede ser proyectada en el cine, requiriendo que todos los espectadores vayan al cine para verla."),(0,s.yg)("li",{parentName:"ul"},"Pel\xedcula Isom\xf3rfica: Puede ser proyectada en el cine para una experiencia inicial \xf3ptima, y luego continuar reproduci\xe9ndose sin interrupciones en la televisi\xf3n en casa para mayor comodidad e interactividad.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nextjs-react"},"Ejemplo de Estructura de Proyecto en Next.js (React)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/IsomorphicApp\n\u251c\u2500\u2500 pages\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 about.js\n\u2502   \u2514\u2500\u2500 _app.js\n\u251c\u2500\u2500 components\n\u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2514\u2500\u2500 Footer.js\n\u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 images\n\u2502       \u2514\u2500\u2500 logo.png\n\u251c\u2500\u2500 styles\n\u2502   \u2514\u2500\u2500 globals.css\n\u251c\u2500\u2500 server.js\n\u251c\u2500\u2500 next.config.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"pages/index.js: Define la p\xe1gina de inicio y su renderizado tanto en el servidor como en el cliente."),(0,s.yg)("li",{parentName:"ul"},'pages/about.js: Define la p\xe1gina "Acerca de" y su renderizado isom\xf3rfico.'),(0,s.yg)("li",{parentName:"ul"},"pages/_app.js: Componente personalizado para inicializar las p\xe1ginas."),(0,s.yg)("li",{parentName:"ul"},"components/: Contiene componentes reutilizables como Header y Footer."),(0,s.yg)("li",{parentName:"ul"},"public/: Contiene recursos est\xe1ticos como im\xe1genes."),(0,s.yg)("li",{parentName:"ul"},"styles/: Contiene archivos CSS globales."),(0,s.yg)("li",{parentName:"ul"},"server.js: Configuraci\xf3n del servidor para el renderizado en el servidor."),(0,s.yg)("li",{parentName:"ul"},"next.config.js: Archivo de configuraci\xf3n para el proyecto Next.js.")))),(0,s.yg)("h2",{id:"arquitectura-headless"},"Arquitectura Headless"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},'La arquitectura headless es un enfoque de desarrollo web donde el frontend (la "cabeza") est\xe1 desacoplado del backend. En una arquitectura headless, el backend proporciona contenido y servicios a trav\xe9s de APIs, y el frontend consume estas APIs para renderizar el contenido y manejar la interacci\xf3n del usuario. Esto permite una mayor flexibilidad en el desarrollo y facilita la entrega de contenido a m\xfaltiples canales, como aplicaciones web, m\xf3viles, dispositivos IoT, y m\xe1s.')),(0,s.yg)("h4",{id:"componentes-clave"},"Componentes Clave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Backend (Headless CMS): Act\xfaa como el servidor de contenido, donde el contenido es creado, almacenado y gestionado. El backend expone APIs (generalmente REST o GraphQL) para que el frontend pueda acceder a los datos."),(0,s.yg)("li",{parentName:"ul"},"Frontend: Puede ser cualquier aplicaci\xf3n o sitio web que consuma las APIs del backend para renderizar contenido. Puede ser construido usando cualquier tecnolog\xeda de frontend, como React, Vue.js, Angular, o incluso frameworks nativos para aplicaciones m\xf3viles.")),(0,s.yg)("h4",{id:"ventajas-de-la-arquitectura-headless"},"Ventajas de la Arquitectura Headless"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Flexibilidad: Permite a los desarrolladores elegir la tecnolog\xeda de frontend que prefieran y cambiarla sin afectar el backend."),(0,s.yg)("li",{parentName:"ul"},"Despliegue Multicanal: Facilita la entrega de contenido a diferentes plataformas y dispositivos desde un solo backend."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: El backend y el frontend pueden escalar independientemente seg\xfan las necesidades."),(0,s.yg)("li",{parentName:"ul"},"Mejor Gesti\xf3n de Contenido: Herramientas especializadas de CMS headless proporcionan interfaces amigables para los editores de contenido, sin imponer restricciones sobre c\xf3mo se muestra el contenido.")),(0,s.yg)("h4",{id:"desventajas-de-la-arquitectura-headless"},"Desventajas de la Arquitectura Headless"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Complejidad Inicial: Configurar y gestionar una arquitectura desacoplada puede ser m\xe1s complejo y requiere m\xe1s coordinaci\xf3n entre los equipos de frontend y backend."),(0,s.yg)("li",{parentName:"ul"},"Responsabilidad del Frontend: Los desarrolladores de frontend deben manejar la renderizaci\xf3n, el enrutamiento y otras tareas que normalmente ser\xedan manejadas por un CMS tradicional."),(0,s.yg)("li",{parentName:"ul"},"SEO: Asegurar un buen SEO puede ser m\xe1s complicado ya que el contenido no est\xe1 pre-renderizado en el servidor (aunque esto puede mitigarse con SSR o prerenderizaci\xf3n).")),(0,s.yg)("h4",{id:"frameworks-y-herramientas"},"Frameworks y Herramientas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Backend: Strapi, Contentful, Sanity, Prismic, etc."),(0,s.yg)("li",{parentName:"ul"},"Frontend: Cualquier framework o biblioteca de frontend como React, Vue.js, Angular, Svelte, etc.")),(0,s.yg)("h4",{id:"analog\xeda-13"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una orquesta donde cada m\xfasico puede elegir sus propios instrumentos y partituras, pero todos siguen las mismas directrices del director (backend):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"CMS Tradicional: Es como una orquesta con un conjunto fijo de instrumentos y partituras proporcionadas por el director. Todos deben seguir las mismas reglas y configuraciones."),(0,s.yg)("li",{parentName:"ul"},"Headless CMS: Los m\xfasicos pueden elegir cualquier instrumento y partitura que deseen, siempre y cuando sigan las directrices del director para asegurar una interpretaci\xf3n armoniosa.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto"},"Ejemplo de Estructura de Proyecto"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Ejemplo de estructura de proyecto usando un CMS headless como Strapi para el backend y Next.js para el frontend:")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/HeadlessApp\n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u251c\u2500\u2500 articles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 controllers\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 services\n\u2502   \u2502   \u2514\u2500\u2500 users\n\u2502   \u2502       \u251c\u2500\u2500 controllers\n\u2502   \u2502       \u251c\u2500\u2500 models\n\u2502   \u2502       \u2514\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 extensions\n\u2502   \u251c\u2500\u2500 middlewares\n\u2502   \u251c\u2500\u2500 plugins\n\u2502   \u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 server.js\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u2514\u2500\u2500 Footer.js\n\u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2502   \u251c\u2500\u2500 about.js\n\u2502   \u2502   \u2514\u2500\u2500 article.js\n\u2502   \u251c\u2500\u2500 styles\n\u2502   \u2502   \u2514\u2500\u2500 globals.css\n\u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u2514\u2500\u2500 api.js\n\u2502   \u2514\u2500\u2500 next.config.js\n\u2514\u2500\u2500 package.json\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"Backend (Strapi):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"api/: Contiene la l\xf3gica de negocio para diferentes entidades como articles y users."),(0,s.yg)("li",{parentName:"ul"},"config/: Configuraci\xf3n del servidor y del entorno."),(0,s.yg)("li",{parentName:"ul"},"extensions/: Extensiones personalizadas para el CMS."),(0,s.yg)("li",{parentName:"ul"},"middlewares/: Middleware personalizados."),(0,s.yg)("li",{parentName:"ul"},"plugins/: Plugins utilizados por el CMS."),(0,s.yg)("li",{parentName:"ul"},"public/: Recursos est\xe1ticos."),(0,s.yg)("li",{parentName:"ul"},"server.js: Punto de entrada del servidor."))),(0,s.yg)("li",{parentName:"ul"},"Frontend (Next.js):",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"components/: Componentes reutilizables como Header y Footer."),(0,s.yg)("li",{parentName:"ul"},"pages/: P\xe1ginas de la aplicaci\xf3n, cada una mapeada a una ruta."),(0,s.yg)("li",{parentName:"ul"},"styles/: Archivos CSS para estilos globales."),(0,s.yg)("li",{parentName:"ul"},"utils/api.js: Archivo para manejar las llamadas a la API."),(0,s.yg)("li",{parentName:"ul"},"next.config.js: Configuraci\xf3n del proyecto Next.js.")))))),(0,s.yg)("h2",{id:"arquitectura-cms-tradicional"},"Arquitectura CMS Tradicional"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Un CMS (Content Management System) tradicional, tambi\xe9n conocido como un CMS acoplado, es un sistema donde el backend (gesti\xf3n de contenido) y el frontend (presentaci\xf3n del contenido) est\xe1n estrechamente acoplados. En este tipo de arquitectura, el CMS proporciona tanto las herramientas para crear y gestionar contenido como los medios para renderizar y presentar ese contenido a los usuarios finales. Los ejemplos m\xe1s comunes de CMS tradicionales incluyen WordPress, Joomla, y Drupal."),(0,s.yg)("li",{parentName:"ul"},"Un CMS tradicional combina el backend y el frontend en una arquitectura acoplada, proporcionando una soluci\xf3n integral para la creaci\xf3n, gesti\xf3n y presentaci\xf3n de contenido. Esto ofrece facilidad de uso y una r\xe1pida implementaci\xf3n, pero puede tener limitaciones en t\xe9rminos de escalabilidad y flexibilidad. Ejemplos populares de CMS tradicionales incluyen WordPress, Joomla y Drupal, cada uno con sus propias ventajas y desaf\xedos. La estructura de un proyecto t\xedpico en WordPress muestra c\xf3mo est\xe1n organizados los archivos y directorios para manejar tanto el contenido como la presentaci\xf3n del sitio.")),(0,s.yg)("h4",{id:"componentes-clave-1"},"Componentes Clave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Backend: Administra la creaci\xf3n, edici\xf3n y almacenamiento del contenido. Incluye un panel de administraci\xf3n que permite a los usuarios gestionar el contenido sin necesidad de conocimientos t\xe9cnicos avanzados."),(0,s.yg)("li",{parentName:"ul"},"Base de Datos: Almacena todo el contenido, configuraciones del sitio, usuarios, y otros datos relevantes."),(0,s.yg)("li",{parentName:"ul"},"Frontend: Maneja la presentaci\xf3n del contenido. Utiliza plantillas y temas proporcionados por el CMS para renderizar el contenido en HTML y servirlo a los usuarios finales."),(0,s.yg)("li",{parentName:"ul"},"Plugins y Extensiones: Permiten agregar funcionalidades adicionales al CMS, como formularios de contacto, optimizaci\xf3n para motores de b\xfasqueda (SEO), y m\xe1s.")),(0,s.yg)("h4",{id:"ventajas-de-un-cms-tradicional"},"Ventajas de un CMS Tradicional"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Facilidad de Uso: Interfaces intuitivas para la creaci\xf3n y gesti\xf3n de contenido, sin necesidad de conocimientos t\xe9cnicos avanzados."),(0,s.yg)("li",{parentName:"ul"},"Integraci\xf3n Total: Backend y frontend est\xe1n completamente integrados, lo que simplifica la configuraci\xf3n y el despliegue."),(0,s.yg)("li",{parentName:"ul"},"Amplia Comunidad y Soporte: CMS populares como WordPress tienen una gran comunidad y abundante soporte, con numerosos plugins y temas disponibles."),(0,s.yg)("li",{parentName:"ul"},"R\xe1pida Implementaci\xf3n: Ideal para proyectos donde la rapidez de implementaci\xf3n es crucial y no se requiere una arquitectura compleja.")),(0,s.yg)("h4",{id:"desventajas-de-un-cms-tradicional"},"Desventajas de un CMS Tradicional"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Escalabilidad Limitada: Las arquitecturas acopladas pueden enfrentar problemas de rendimiento y escalabilidad con el aumento del tr\xe1fico y la complejidad del sitio."),(0,s.yg)("li",{parentName:"ul"},"Flexibilidad Restringida: Menor flexibilidad en comparaci\xf3n con arquitecturas desacopladas o headless, especialmente en cuanto a la personalizaci\xf3n del frontend."),(0,s.yg)("li",{parentName:"ul"},"Seguridad: Las instalaciones de CMS populares pueden ser objetivos comunes para ataques si no se gestionan adecuadamente las actualizaciones y la seguridad.")),(0,s.yg)("h4",{id:"ejemplos-de-cms-tradicionales"},"Ejemplos de CMS Tradicionales"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"WordPress: El CMS m\xe1s popular del mundo, utilizado para blogs, sitios web corporativos, tiendas en l\xednea, y m\xe1s."),(0,s.yg)("li",{parentName:"ul"},"Joomla: Un CMS flexible y extensible utilizado para una amplia gama de aplicaciones web."),(0,s.yg)("li",{parentName:"ul"},"Drupal: Un CMS potente y altamente configurable, utilizado a menudo para sitios web m\xe1s complejos y grandes.")),(0,s.yg)("h4",{id:"analog\xeda-14"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un restaurante:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"CMS Tradicional: Es como un restaurante donde la cocina y el comedor est\xe1n en el mismo edificio y administrados por el mismo personal. La cocina prepara la comida y el comedor sirve a los clientes, todo bajo una gesti\xf3n unificada."),(0,s.yg)("li",{parentName:"ul"},"Headless CMS: Es como un restaurante que cocina en una ubicaci\xf3n central (backend) y entrega la comida a varios puntos de venta (frontends) que pueden estar en diferentes ubicaciones.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-wordpress"},"Ejemplo de Estructura de Proyecto en WordPress"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/TraditionalCMSApp\n\u251c\u2500\u2500 wp-admin\n\u2502   \u2514\u2500\u2500 ... (archivos del panel de administraci\xf3n)\n\u251c\u2500\u2500 wp-content\n\u2502   \u251c\u2500\u2500 themes\n\u2502   \u2502   \u2514\u2500\u2500 my-theme\n\u2502   \u2502       \u251c\u2500\u2500 style.css\n\u2502   \u2502       \u251c\u2500\u2500 index.php\n\u2502   \u2502       \u2514\u2500\u2500 ... (otros archivos del tema)\n\u2502   \u251c\u2500\u2500 plugins\n\u2502   \u2502   \u2514\u2500\u2500 my-plugin\n\u2502   \u2502       \u251c\u2500\u2500 my-plugin.php\n\u2502   \u2502       \u2514\u2500\u2500 ... (otros archivos del plugin)\n\u2502   \u2514\u2500\u2500 uploads\n\u2502       \u2514\u2500\u2500 ... (archivos subidos por los usuarios)\n\u251c\u2500\u2500 wp-includes\n\u2502   \u2514\u2500\u2500 ... (archivos del core de WordPress)\n\u251c\u2500\u2500 index.php\n\u251c\u2500\u2500 wp-config.php\n\u2514\u2500\u2500 ... (otros archivos del core de WordPress)\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"wp-admin/: Contiene los archivos del panel de administraci\xf3n de WordPress."),(0,s.yg)("li",{parentName:"ul"},"wp-content/: Contiene temas, plugins, y archivos subidos por los usuarios.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"themes/: Directorio para los temas de WordPress."),(0,s.yg)("li",{parentName:"ul"},"plugins/: Directorio para los plugins de WordPress."),(0,s.yg)("li",{parentName:"ul"},"uploads/: Directorio para los archivos subidos."))),(0,s.yg)("li",{parentName:"ul"},"wp-includes/: Contiene los archivos del core de WordPress."),(0,s.yg)("li",{parentName:"ul"},"index.php: Punto de entrada principal de WordPress."),(0,s.yg)("li",{parentName:"ul"},"wp-config.php: Archivo de configuraci\xf3n principal de WordPress.")))),(0,s.yg)("h2",{id:"arquitectura-de-microkernel"},"Arquitectura de Microkernel"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de microkernel, tambi\xe9n conocida como arquitectura de n\xfacleo peque\xf1o, se utiliza principalmente en el dise\xf1o de sistemas operativos y software de sistemas. En el contexto del desarrollo de software, esta arquitectura se enfoca en mantener un n\xfacleo m\xednimo y altamente extensible, alrededor del cual se pueden agregar f\xe1cilmente nuevos componentes o plugins. La idea central es mantener el n\xfacleo lo m\xe1s peque\xf1o y estable posible, mientras que la funcionalidad adicional se maneja a trav\xe9s de m\xf3dulos independientes que se pueden cargar y descargar din\xe1micamente.")),(0,s.yg)("h4",{id:"componentes-clave-2"},"Componentes Clave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Microkernel: El n\xfacleo principal del sistema, que incluye solo las funcionalidades esenciales y necesarias para el funcionamiento b\xe1sico. Esto puede incluir la gesti\xf3n de procesos, comunicaci\xf3n entre procesos, y acceso a recursos b\xe1sicos del sistema."),(0,s.yg)("li",{parentName:"ul"},"Plugins/Modulos: Componentes adicionales que pueden ser a\xf1adidos al sistema para extender su funcionalidad. Estos m\xf3dulos se comunican con el microkernel a trav\xe9s de interfaces bien definidas."),(0,s.yg)("li",{parentName:"ul"},"Interfaces de Comunicaci\xf3n: Mecanismos que permiten la interacci\xf3n entre el microkernel y los m\xf3dulos, y entre los m\xf3dulos mismos. Esto puede incluir APIs, servicios de mensajer\xeda, y otros protocolos de comunicaci\xf3n.")),(0,s.yg)("h4",{id:"ventajas-de-la-arquitectura-de-microkernel"},"Ventajas de la Arquitectura de Microkernel"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Extensibilidad: Permite agregar, eliminar o modificar funcionalidades sin afectar el n\xfacleo del sistema, lo que facilita la evoluci\xf3n del software."),(0,s.yg)("li",{parentName:"ul"},"Mantenibilidad: El n\xfacleo peque\xf1o y estable reduce la complejidad y facilita el mantenimiento y depuraci\xf3n del sistema."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Los m\xf3dulos pueden desarrollarse y desplegarse de manera independiente, permitiendo que el sistema escale horizontalmente mediante la adici\xf3n de nuevos m\xf3dulos."),(0,s.yg)("li",{parentName:"ul"},"Fiabilidad y Seguridad: Un microkernel m\xe1s peque\xf1o puede ser m\xe1s f\xe1cil de asegurar y verificar, reduciendo la superficie de ataque y los posibles errores.")),(0,s.yg)("h4",{id:"desventajas-de-la-arquitectura-de-microkernel"},"Desventajas de la Arquitectura de Microkernel"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Rendimiento: La comunicaci\xf3n entre el microkernel y los m\xf3dulos puede ser menos eficiente que en sistemas monol\xedticos, debido al overhead de los mecanismos de comunicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Complejidad Inicial: Dise\xf1ar un sistema basado en microkernel puede ser m\xe1s complejo y requerir una planificaci\xf3n m\xe1s cuidadosa para definir las interfaces y las interacciones entre los componentes."),(0,s.yg)("li",{parentName:"ul"},"Interdependencia de M\xf3dulos: La gesti\xf3n de dependencias entre m\xfaltiples m\xf3dulos puede complicarse, especialmente en sistemas grandes y complejos.")),(0,s.yg)("h4",{id:"ejemplos-de-uso"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Sistemas Operativos: Minix y QNX son ejemplos de sistemas operativos que utilizan una arquitectura de microkernel."),(0,s.yg)("li",{parentName:"ul"},"Software Empresarial: Sistemas de gesti\xf3n empresarial que permiten la integraci\xf3n de plugins para agregar funcionalidades espec\xedficas a medida que se necesitan.")),(0,s.yg)("h4",{id:"analog\xeda-15"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un centro comercial:"),(0,s.yg)("li",{parentName:"ul"},"Centro Comercial (Microkernel): El centro comercial proporciona la infraestructura b\xe1sica, como la estructura del edificio, seguridad, electricidad, y servicios b\xe1sicos."),(0,s.yg)("li",{parentName:"ul"},"Tiendas (Plugins/M\xf3dulos): Las tiendas dentro del centro comercial son independientes y pueden abrir, cerrar o cambiar sin afectar la infraestructura del centro comercial. Cada tienda ofrece diferentes productos o servicios, y puede personalizar su espacio seg\xfan sus necesidades.")),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core-4"},"Ejemplo de Estructura de Proyecto en .NET Core"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/MicrokernelApp\n\u251c\u2500\u2500 Core\n\u2502   \u251c\u2500\u2500 Kernel.cs\n\u2502   \u251c\u2500\u2500 IModule.cs\n\u2502   \u2514\u2500\u2500 IMessageBus.cs\n\u251c\u2500\u2500 Modules\n\u2502   \u251c\u2500\u2500 ModuleA\n\u2502   \u2502   \u251c\u2500\u2500 ModuleA.cs\n\u2502   \u2502   \u251c\u2500\u2500 ModuleAService.cs\n\u2502   \u2502   \u2514\u2500\u2500 ModuleAConfig.cs\n\u2502   \u2514\u2500\u2500 ModuleB\n\u2502       \u251c\u2500\u2500 ModuleB.cs\n\u2502       \u251c\u2500\u2500 ModuleBService.cs\n\u2502       \u2514\u2500\u2500 ModuleBConfig.cs\n\u251c\u2500\u2500 App\n\u2502   \u251c\u2500\u2500 Program.cs\n\u2502   \u251c\u2500\u2500 Startup.cs\n\u2502   \u2514\u2500\u2500 AppConfig.cs\n\u251c\u2500\u2500 Tests\n\u2502   \u251c\u2500\u2500 CoreTests.cs\n\u2502   \u251c\u2500\u2500 ModuleATests.cs\n\u2502   \u2514\u2500\u2500 ModuleBTests.cs\n\u2514\u2500\u2500 MicrokernelApp.sln\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"Core/: Contiene el microkernel y las interfaces esenciales.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Kernel.cs: Implementaci\xf3n del microkernel."),(0,s.yg)("li",{parentName:"ul"},"IModule.cs: Interfaz que define los m\xf3dulos."),(0,s.yg)("li",{parentName:"ul"},"IMessageBus.cs: Interfaz para la comunicaci\xf3n entre m\xf3dulos y el microkernel."))),(0,s.yg)("li",{parentName:"ul"},"Modules/: Contiene los m\xf3dulos que extienden la funcionalidad del sistema.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"ModuleA/: Ejemplo de un m\xf3dulo con su propia l\xf3gica y configuraci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"ModuleB/: Otro ejemplo de m\xf3dulo."))),(0,s.yg)("li",{parentName:"ul"},"App/: Contiene la aplicaci\xf3n principal que utiliza el microkernel y los m\xf3dulos.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Program.cs: Punto de entrada de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Startup.cs: Configuraci\xf3n de inicio de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"AppConfig.cs: Configuraciones generales de la aplicaci\xf3n."))),(0,s.yg)("li",{parentName:"ul"},"Tests/: Contiene pruebas unitarias para el microkernel y los m\xf3dulos.")))),(0,s.yg)("h2",{id:"arquitectura-de-contenedores"},"Arquitectura de Contenedores"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de contenedores es un enfoque en el desarrollo y despliegue de software que utiliza contenedores para encapsular aplicaciones junto con todas sus dependencias, configuraciones y librer\xedas necesarias para ejecutarse. Los contenedores son unidades ligeras y port\xe1tiles que pueden ejecutarse de manera consistente en diferentes entornos, desde la m\xe1quina de desarrollo local hasta los servidores de producci\xf3n en la nube.")),(0,s.yg)("h4",{id:"componentes-claves"},"Componentes claves"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Contenedores: Unidades empaquetadas que contienen la aplicaci\xf3n y todas sus dependencias. Los contenedores son gestionados y ejecutados por un motor de contenedores, como Docker."),(0,s.yg)("li",{parentName:"ul"},"Motor de Contenedores (Container Runtime): El software que gestiona la ejecuci\xf3n de los contenedores, siendo Docker el m\xe1s popular."),(0,s.yg)("li",{parentName:"ul"},"Orquestadores de Contenedores: Herramientas que gestionan la implementaci\xf3n, escalabilidad y operaci\xf3n de contenedores en un cl\xfaster de servidores. Kubernetes es el orquestador de contenedores m\xe1s ampliamente utilizado."),(0,s.yg)("li",{parentName:"ul"},"Registro de Contenedores: Repositorios donde se almacenan las im\xe1genes de los contenedores, como Docker Hub o Amazon ECR.")),(0,s.yg)("h4",{id:"ventajas-de-la-arquitectura-de-contenedores"},"Ventajas de la Arquitectura de Contenedores"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Portabilidad: Los contenedores pueden ejecutarse de manera consistente en cualquier entorno que soporte contenedores, eliminando problemas de compatibilidad entre diferentes entornos."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Facilita la escalabilidad horizontal mediante la replicaci\xf3n de contenedores y el uso de orquestadores para gestionar el escalado."),(0,s.yg)("li",{parentName:"ul"},"Aislamiento: Cada contenedor opera en su propio entorno aislado, lo que mejora la seguridad y estabilidad al evitar conflictos entre aplicaciones."),(0,s.yg)("li",{parentName:"ul"},"Despliegue R\xe1pido: Permite despliegues r\xe1pidos y frecuentes debido a su naturaleza ligera y la facilidad de crear y destruir contenedores.")),(0,s.yg)("h4",{id:"desventajas-de-la-arquitectura-de-contenedores"},"Desventajas de la Arquitectura de Contenedores"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Complejidad de Gesti\xf3n: Requiere herramientas y estrategias adicionales para gestionar la orquestaci\xf3n, monitoreo y seguridad de los contenedores."),(0,s.yg)("li",{parentName:"ul"},"Persistencia de Datos: El manejo de datos persistentes puede ser m\xe1s complicado, ya que los contenedores son ef\xedmeros y se espera que no mantengan estado."),(0,s.yg)("li",{parentName:"ul"},"Curva de Aprendizaje: La adopci\xf3n de contenedores y herramientas asociadas como Kubernetes puede requerir una curva de aprendizaje significativa.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-1"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Microservicios: Los contenedores son ideales para desplegar aplicaciones basadas en microservicios, donde cada servicio se ejecuta en su propio contenedor."),(0,s.yg)("li",{parentName:"ul"},"Entornos de Desarrollo: Facilita la creaci\xf3n de entornos de desarrollo consistentes y reproducibles."),(0,s.yg)("li",{parentName:"ul"},"Aplicaciones Cloud-Native: Aplicaciones dise\xf1adas para aprovechar al m\xe1ximo las capacidades de la nube.")),(0,s.yg)("h4",{id:"analog\xeda-16"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una flota de camiones de reparto:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Cami\xf3n (Contenedor): Cada cami\xf3n lleva productos (aplicaciones) y puede viajar a cualquier lugar (entorno) con todo lo necesario para entregar los productos."),(0,s.yg)("li",{parentName:"ul"},"Motor del Cami\xf3n (Container Runtime): El motor que impulsa el cami\xf3n, permitiendo que se mueva y funcione correctamente."),(0,s.yg)("li",{parentName:"ul"},"Centro de Distribuci\xf3n (Orquestador de Contenedores): El centro que coordina la salida y llegada de camiones, asegurando que se entreguen los productos a tiempo y en la cantidad correcta.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-net-core-usando-docker"},"Ejemplo de Estructura de Proyecto en .NET Core usando Docker"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/ContainerApp\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 WebApp\n\u2502   \u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 HomeController.cs\n\u2502   \u2502   \u251c\u2500\u2500 Models\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ViewModel.cs\n\u2502   \u2502   \u251c\u2500\u2500 Views\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Home\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 Index.cshtml\n\u2502   \u2502   \u251c\u2500\u2500 wwwroot\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 css\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 site.css\n\u2502   \u2502   \u251c\u2500\u2500 appsettings.json\n\u2502   \u2502   \u251c\u2500\u2500 Program.cs\n\u2502   \u2502   \u2514\u2500\u2500 Startup.cs\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 ContainerApp.sln\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"src/WebApp/: Contiene el c\xf3digo fuente de la aplicaci\xf3n .NET Core.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Controllers/: Controladores de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Models/: Modelos de datos."),(0,s.yg)("li",{parentName:"ul"},"Views/: Vistas de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"wwwroot/: Archivos est\xe1ticos como CSS y JavaScript."),(0,s.yg)("li",{parentName:"ul"},"appsettings.json: Archivo de configuraci\xf3n de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Program.cs: Punto de entrada de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Startup.cs: Configuraci\xf3n de servicios y middleware de la aplicaci\xf3n."))),(0,s.yg)("li",{parentName:"ul"},"Dockerfile: Define c\xf3mo construir la imagen del contenedor para la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define y ejecuta aplicaciones Docker multi-contenedor."),(0,s.yg)("li",{parentName:"ul"},".dockerignore: Especifica archivos y directorios que Docker debe ignorar al construir la imagen."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto."),(0,s.yg)("li",{parentName:"ul"},"ContainerApp.sln: Soluci\xf3n de .NET que incluye los proyectos de la aplicaci\xf3n.")))),(0,s.yg)("h2",{id:"arquitectura-de-cola-message-queue"},"Arquitectura de Cola (Message Queue)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de cola, o arquitectura basada en colas de mensajes, es un dise\xf1o en el que los componentes del sistema se comunican a trav\xe9s de colas de mensajes. Esta arquitectura es com\xfan en sistemas distribuidos y permite que diferentes partes de una aplicaci\xf3n intercambien informaci\xf3n de manera as\xedncrona. Las colas de mensajes act\xfaan como intermediarios que almacenan los mensajes hasta que los destinatarios est\xe1n listos para procesarlos.")),(0,s.yg)("h4",{id:"componentes-claves-1"},"Componentes claves"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Productores (Producers): Componentes que generan y env\xedan mensajes a la cola. Los productores pueden ser cualquier parte del sistema que necesita comunicar informaci\xf3n o eventos a otros componentes."),(0,s.yg)("li",{parentName:"ul"},"Colas de Mensajes (Message Queues): Almacenan los mensajes enviados por los productores hasta que los consumidores est\xe9n listos para procesarlos. Las colas pueden manejar mensajes de manera FIFO (First In, First Out), LIFO (Last In, First Out), u otras estrategias de ordenamiento."),(0,s.yg)("li",{parentName:"ul"},"Consumidores (Consumers): Componentes que reciben y procesan mensajes de la cola. Los consumidores pueden ser servicios o aplicaciones que realizan tareas espec\xedficas en respuesta a los mensajes recibidos."),(0,s.yg)("li",{parentName:"ul"},"Brokers de Mensajes (Message Brokers): Sistemas que gestionan las colas de mensajes, dirigen los mensajes a las colas adecuadas y garantizan la entrega de los mensajes. Ejemplos comunes incluyen RabbitMQ, Apache Kafka, y AWS SQS.")),(0,s.yg)("h4",{id:"ventajas-de-la-arquitectura-de-cola"},"Ventajas de la Arquitectura de Cola"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Desacoplamiento: Los productores y consumidores est\xe1n desacoplados, lo que permite que se desarrollen, desplieguen y escalen de manera independiente."),(0,s.yg)("li",{parentName:"ul"},"Tolerancia a Fallos: Los mensajes en la cola pueden persistir hasta que los consumidores est\xe9n listos, lo que permite la recuperaci\xf3n de fallos y evita la p\xe9rdida de mensajes."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Los productores y consumidores pueden escalar horizontalmente para manejar incrementos en la carga de trabajo sin afectar a otros componentes."),(0,s.yg)("li",{parentName:"ul"},"Desempe\xf1o: La comunicaci\xf3n as\xedncrona permite que los productores env\xeden mensajes r\xe1pidamente sin esperar a que los consumidores los procesen, mejorando el rendimiento general del sistema.")),(0,s.yg)("h4",{id:"desventajas-de-la-arquitectura-de-cola"},"Desventajas de la Arquitectura de Cola"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Complejidad: Introducir colas de mensajes puede a\xf1adir complejidad al dise\xf1o y despliegue del sistema, as\xed como a la gesti\xf3n de errores y la supervisi\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Latencia: Aunque la comunicaci\xf3n as\xedncrona mejora el rendimiento, puede introducir latencia en la entrega y el procesamiento de mensajes."),(0,s.yg)("li",{parentName:"ul"},"Consistencia: Gestionar la consistencia de datos en un sistema distribuido con colas de mensajes puede ser complicado, especialmente en escenarios de alta concurrencia y escalabilidad.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-2"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Procesamiento de Pedidos: Sistemas de comercio electr\xf3nico que utilizan colas para gestionar pedidos, pagos, y actualizaciones de inventario."),(0,s.yg)("li",{parentName:"ul"},"Procesamiento de Tareas en Segundo Plano: Aplicaciones que delegan tareas intensivas en recursos, como el procesamiento de im\xe1genes o el env\xedo de correos electr\xf3nicos, a consumidores que las procesan de manera as\xedncrona."),(0,s.yg)("li",{parentName:"ul"},"Notificaciones y Alertas: Sistemas que env\xedan notificaciones y alertas en respuesta a eventos, utilizando colas para asegurar la entrega confiable de mensajes.")),(0,s.yg)("h4",{id:"analog\xeda-17"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un sistema de correo postal:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Productores (Producers): Personas que env\xedan cartas y paquetes (mensajes)."),(0,s.yg)("li",{parentName:"ul"},"Colas de Mensajes (Message Queues): Buzones de correo y oficinas de correos donde se almacenan las cartas y paquetes hasta que sean recogidos."),(0,s.yg)("li",{parentName:"ul"},"Consumidores (Consumers): Receptores que recogen y procesan las cartas y paquetes."),(0,s.yg)("li",{parentName:"ul"},"Brokers de Mensajes (Message Brokers): Servicio postal que gestiona la recogida, almacenamiento, y entrega de cartas y paquetes.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-rabbitmq"},"Ejemplo de Estructura de Proyecto en Node.js usando RabbitMQ"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/MessageQueueApp\n\u251c\u2500\u2500 producer\n\u2502   \u251c\u2500\u2500 producer.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 consumer\n\u2502   \u251c\u2500\u2500 consumer.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"producer/: Contiene el c\xf3digo del productor que env\xeda mensajes a la cola.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"producer.js: C\xf3digo principal del productor."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js."),(0,s.yg)("li",{parentName:"ul"},"config.js: Configuraciones del productor, como la URL del broker de mensajes."))),(0,s.yg)("li",{parentName:"ul"},"consumer/: Contiene el c\xf3digo del consumidor que procesa mensajes de la cola.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"consumer.js: C\xf3digo principal del consumidor."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js."),(0,s.yg)("li",{parentName:"ul"},"config.js: Configuraciones del consumidor, como la URL del broker de mensajes."))),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar el broker de mensajes (RabbitMQ), productor y consumidor."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))),(0,s.yg)("h2",{id:"arquitectura-de-cach\xe9-distribuida"},"Arquitectura de Cach\xe9 Distribuida"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de cach\xe9 distribuida se utiliza para mejorar el rendimiento y la escalabilidad de aplicaciones distribuidas mediante el almacenamiento en cach\xe9 de datos frecuentemente accedidos en una red de nodos de cach\xe9. En lugar de depender \xfanicamente de bases de datos centralizadas, las aplicaciones pueden acceder a datos almacenados en m\xfaltiples cach\xe9s distribuidas geogr\xe1ficamente, reduciendo la latencia y el consumo de recursos del servidor principal.")),(0,s.yg)("h4",{id:"componentes-clave-3"},"Componentes Clave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Clientes (Clients): Las aplicaciones o servicios que realizan operaciones de lectura y escritura en la cach\xe9 distribuida."),(0,s.yg)("li",{parentName:"ul"},"Nodos de Cach\xe9 (Cache Nodes): Servidores que almacenan datos en memoria para un acceso r\xe1pido. Estos nodos trabajan juntos para formar un sistema de cach\xe9 distribuida."),(0,s.yg)("li",{parentName:"ul"},"Coordinadores de Cach\xe9 (Cache Coordinators): Componentes que gestionan la distribuci\xf3n de datos entre los nodos de cach\xe9, asegurando consistencia y disponibilidad de los datos."),(0,s.yg)("li",{parentName:"ul"},"Almac\xe9n de Datos Persistente (Persistent Data Store): La base de datos principal donde se almacenan los datos de forma persistente. La cach\xe9 distribuida act\xfaa como una capa intermedia entre los clientes y este almac\xe9n de datos.")),(0,s.yg)("h4",{id:"ventajas-de-la-arquitectura-de-cach\xe9-distribuida"},"Ventajas de la Arquitectura de Cach\xe9 Distribuida"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Rendimiento Mejorado: Almacenar datos en cach\xe9 reduce la latencia de acceso a datos y mejora el tiempo de respuesta de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Permite escalar horizontalmente a\xf1adiendo m\xe1s nodos de cach\xe9, manejando de manera eficiente aumentos en la carga de trabajo."),(0,s.yg)("li",{parentName:"ul"},"Reducci\xf3n de Carga en la Base de Datos: Al reducir la frecuencia de acceso a la base de datos principal, se disminuye la carga y se mejora la capacidad de la base de datos para manejar otras operaciones cr\xedticas."),(0,s.yg)("li",{parentName:"ul"},"Alta Disponibilidad: Los datos almacenados en m\xfaltiples nodos de cach\xe9 pueden seguir siendo accesibles incluso si algunos nodos fallan.")),(0,s.yg)("h4",{id:"desventajas-de-la-arquitectura-de-cach\xe9-distribuida"},"Desventajas de la Arquitectura de Cach\xe9 Distribuida"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Consistencia de Datos: Mantener la consistencia de datos en todos los nodos de cach\xe9 puede ser complicado, especialmente en entornos con alta concurrencia."),(0,s.yg)("li",{parentName:"ul"},"Coste de Infraestructura: Mantener m\xfaltiples nodos de cach\xe9 distribuidos puede aumentar los costes de infraestructura y administraci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Complejidad de Gesti\xf3n: La configuraci\xf3n y gesti\xf3n de una cach\xe9 distribuida requiere herramientas y estrategias adicionales para asegurar una operaci\xf3n eficiente y segura.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-3"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Sistemas de Comercio Electr\xf3nico: Cach\xe9 de datos de productos, sesiones de usuarios y carritos de compras para mejorar la experiencia del usuario."),(0,s.yg)("li",{parentName:"ul"},"Redes Sociales: Almacenamiento en cach\xe9 de perfiles de usuario, publicaciones y datos de amigos para reducir la latencia de acceso."),(0,s.yg)("li",{parentName:"ul"},"Aplicaciones Web de Alto Tr\xe1fico: Almacenamiento en cach\xe9 de resultados de consultas frecuentes y contenido est\xe1tico para mejorar la velocidad de carga.")),(0,s.yg)("h4",{id:"analog\xeda-18"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una cadena de tiendas  en una ciudad:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Clientes (Clients): Los clientes que visitan las tiendas para comprar productos."),(0,s.yg)("li",{parentName:"ul"},"Tiendas  (Cache Nodes): Tiendas repartidas por la ciudad que almacenan productos populares."),(0,s.yg)("li",{parentName:"ul"},"Centro de Distribuci\xf3n (Persistent Data Store): El almac\xe9n central donde se almacenan todos los productos. Las tiendas obtienen suministros del almac\xe9n central."),(0,s.yg)("li",{parentName:"ul"},"Gestores de Inventario (Cache Coordinators): Administradores que se aseguran de que las tiendas tengan los productos correctos y que los productos se repongan cuando se agotan.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-redis"},"Ejemplo de Estructura de Proyecto en Node.js usando Redis"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/DistributedCacheApp\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 app.js\n\u2502   \u251c\u2500\u2500 cache.js\n\u2502   \u251c\u2500\u2500 dataService.js\n\u2502   \u251c\u2500\u2500 routes.js\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"src/: Contiene el c\xf3digo fuente de la aplicaci\xf3n.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"app.js: Configuraci\xf3n y arranque de la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"cache.js: M\xf3dulo para interactuar con la cach\xe9 distribuida (Redis en este caso)."),(0,s.yg)("li",{parentName:"ul"},"dataService.js: M\xf3dulo para interactuar con la base de datos persistente."),(0,s.yg)("li",{parentName:"ul"},"routes.js: Define las rutas de la API."),(0,s.yg)("li",{parentName:"ul"},"config.js: Configuraciones de la aplicaci\xf3n, como la URL de Redis y la base de datos."))),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js."),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar Redis y la aplicaci\xf3n Node.js."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))),(0,s.yg)("h2",{id:"arquitectura-de-eventos-y-colas"},"Arquitectura de eventos y colas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de eventos y colas es un enfoque en el dise\xf1o de sistemas distribuidos donde los componentes se comunican mediante la emisi\xf3n y suscripci\xf3n a eventos, los cuales son gestionados a trav\xe9s de colas de mensajes. Este modelo permite que diferentes partes de una aplicaci\xf3n o sistema se comuniquen de manera as\xedncrona y desacoplada, facilitando la integraci\xf3n entre sistemas y la escalabilidad.")),(0,s.yg)("h4",{id:"componentes-clave-4"},"Componentes Clave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Eventos: Representan acontecimientos significativos dentro del sistema, como la creaci\xf3n de un pedido, la actualizaci\xf3n de un perfil de usuario, o la publicaci\xf3n de un nuevo contenido."),(0,s.yg)("li",{parentName:"ul"},"Productores de Eventos: Son responsables de generar y emitir eventos cuando ocurren acciones relevantes en el sistema. Estos eventos se publican en un canal de eventos."),(0,s.yg)("li",{parentName:"ul"},"Canal de Eventos (colas de mensajes): Es el medio a trav\xe9s del cual se emiten los eventos. Puede ser implementado utilizando tecnolog\xedas como Apache Kafka, RabbitMQ, o servicios de eventos en la nube como AWS SNS."),(0,s.yg)("li",{parentName:"ul"},"Consumidores de Eventos: Son componentes que se suscriben a eventos espec\xedficos en el canal de eventos y reaccionan ante ellos. Pueden ser aplicaciones, microservicios u otros sistemas que necesiten procesar los eventos.")),(0,s.yg)("h4",{id:"funcionamiento"},"Funcionamiento"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Productores generan eventos y los publican en el canal de eventos."),(0,s.yg)("li",{parentName:"ul"},"Canal de Eventos gestiona la distribuci\xf3n y almacenamiento temporal de los eventos."),(0,s.yg)("li",{parentName:"ul"},"Consumidores se suscriben a tipos espec\xedficos de eventos y los procesan de acuerdo a la l\xf3gica de negocio necesaria."),(0,s.yg)("li",{parentName:"ul"},"Orquestadores de Eventos pueden ser utilizados para coordinar flujos de trabajo complejos que involucren m\xfaltiples eventos y consumidores.")),(0,s.yg)("h4",{id:"ventajas"},"Ventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Desacoplamiento: Los productores y consumidores de eventos est\xe1n desacoplados, lo que permite a cada componente evolucionar de forma independiente."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Permite escalar horizontalmente tanto productores como consumidores para manejar aumentos en la carga de trabajo."),(0,s.yg)("li",{parentName:"ul"},"Resistencia y Tolerancia a Fallos: Los eventos pueden ser almacenados temporalmente en el canal de eventos, permitiendo la recuperaci\xf3n ante fallos."),(0,s.yg)("li",{parentName:"ul"},"Integraci\xf3n de Sistemas: Facilita la integraci\xf3n entre sistemas heterog\xe9neos al proporcionar un medio estandarizado de comunicaci\xf3n.")),(0,s.yg)("h4",{id:"desaf\xedos"},"Desaf\xedos"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Consistencia: Garantizar la consistencia de datos cuando m\xfaltiples sistemas reaccionan a eventos puede ser complejo y requiere cuidadosa planificaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Monitoreo y Gesti\xf3n: La supervisi\xf3n y el control de eventos distribuidos pueden ser complicados, especialmente en sistemas de gran escala."),(0,s.yg)("li",{parentName:"ul"},"Dise\xf1o y Modelado de Eventos: Es crucial dise\xf1ar eventos que capturen correctamente los cambios de estado y eventos significativos dentro del sistema.")),(0,s.yg)("h4",{id:"analog\xeda-19"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un sistema de noticias en vivo:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Eventos: Son las noticias y reportajes que ocurren en tiempo real."),(0,s.yg)("li",{parentName:"ul"},"Productores de Eventos: Reporteros y fuentes de noticias que generan y publican historias."),(0,s.yg)("li",{parentName:"ul"},"Canal de Eventos: Los canales de televisi\xf3n o portales de noticias donde se transmiten las noticias."),(0,s.yg)("li",{parentName:"ul"},"Consumidores de Eventos: Espectadores que sintonizan canales espec\xedficos para ver las noticias que les interesan.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-kafka"},"Ejemplo de Estructura de Proyecto en Node.js usando Kafka"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/EventDrivenApp\n\u251c\u2500\u2500 producer\n\u2502   \u251c\u2500\u2500 producer.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 consumer\n\u2502   \u251c\u2500\u2500 consumer.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 config.js\n\u251c\u2500\u2500 kafka-setup.js\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"producer/: Contiene el c\xf3digo del productor que env\xeda eventos a Kafka.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"producer.js: C\xf3digo principal del productor."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js."),(0,s.yg)("li",{parentName:"ul"},"config.js: Configuraciones del productor, como la URL de Kafka y el tema del evento."))),(0,s.yg)("li",{parentName:"ul"},"consumer/: Contiene el c\xf3digo del consumidor que procesa eventos desde Kafka.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"consumer.js: C\xf3digo principal del consumidor."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js."),(0,s.yg)("li",{parentName:"ul"},"config.js: Configuraciones del consumidor, como la URL de Kafka y el tema del evento."))),(0,s.yg)("li",{parentName:"ul"},"kafka-setup.js: Configuraci\xf3n inicial de Kafka para crear un tema y configurar la conexi\xf3n."),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar Kafka y la aplicaci\xf3n Node.js."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))),(0,s.yg)("h2",{id:"arquitectura-de-api-gateway"},"Arquitectura de API Gateway"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de API Gateway es un dise\xf1o utilizado en sistemas distribuidos y microservicios para gestionar y centralizar las solicitudes de los clientes hacia los servicios backend. Un API Gateway act\xfaa como un \xfanico punto de entrada para todas las solicitudes externas, redirigi\xe9ndolas a los servicios adecuados y manejando tareas comunes como la autenticaci\xf3n, la autorizaci\xf3n, el balanceo de carga, la transformaci\xf3n de datos y la gesti\xf3n de respuestas."),(0,s.yg)("li",{parentName:"ul"},"La arquitectura de API Gateway centraliza la gesti\xf3n de solicitudes de los clientes hacia los servicios backend, proporcionando un punto \xfanico de entrada que facilita el desacoplamiento, la seguridad, la escalabilidad y la optimizaci\xf3n del rendimiento. Sin embargo, puede introducir complejidad adicional y requerir una cuidadosa implementaci\xf3n para evitar convertirse en un cuello de botella. Un ejemplo de proyecto en Node.js utilizando Express y Express Gateway demuestra c\xf3mo configurar un API Gateway y microservicios que se comunican a trav\xe9s de \xe9l para ofrecer una soluci\xf3n escalable y eficiente.")),(0,s.yg)("h4",{id:"componentes-claves-2"},"Componentes claves"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"API Gateway: El componente central que recibe todas las solicitudes del cliente y las enruta a los microservicios correspondientes."),(0,s.yg)("li",{parentName:"ul"},"Clientes: Aplicaciones frontend, dispositivos m\xf3viles o cualquier otro consumidor que interact\xfaa con el API Gateway."),(0,s.yg)("li",{parentName:"ul"},"Microservicios: Servicios backend que implementan la l\xf3gica de negocio y responden a las solicitudes redirigidas por el API Gateway."),(0,s.yg)("li",{parentName:"ul"},"Servicios de Autenticaci\xf3n y Autorizaci\xf3n: Componentes que verifican la identidad del cliente y sus permisos para acceder a los recursos."),(0,s.yg)("li",{parentName:"ul"},"Balanceador de Carga: Mecanismo que distribuye las solicitudes entrantes entre varias instancias de microservicios para equilibrar la carga de trabajo."),(0,s.yg)("li",{parentName:"ul"},"Transformaci\xf3n y Enriquecimiento de Datos: Funcionalidades del API Gateway que pueden modificar las solicitudes y respuestas para adaptarlas a diferentes formatos o a\xf1adir informaci\xf3n adicional.")),(0,s.yg)("h4",{id:"ventajas-1"},"Ventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Desacoplamiento: Los microservicios se mantienen aislados de los clientes, lo que permite cambios en los servicios backend sin afectar a los consumidores."),(0,s.yg)("li",{parentName:"ul"},"Centralizaci\xf3n de Funcionalidades Comunes: Permite gestionar de manera uniforme tareas como la autenticaci\xf3n, la autorizaci\xf3n y el monitoreo."),(0,s.yg)("li",{parentName:"ul"},"Seguridad: Proporciona un punto central para aplicar pol\xedticas de seguridad y controlar el acceso a los servicios backend."),(0,s.yg)("li",{parentName:"ul"},"Optimizaci\xf3n del Rendimiento: Soporta el caching, la compresi\xf3n de datos y la agregaci\xf3n de respuestas, mejorando la eficiencia y reduciendo la latencia.")),(0,s.yg)("h4",{id:"desventajas"},"Desventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Punto \xdanico de Falla: El API Gateway puede convertirse en un cuello de botella o un \xfanico punto de falla si no se implementa correctamente con alta disponibilidad y redundancia."),(0,s.yg)("li",{parentName:"ul"},"Complejidad: A\xf1ade una capa adicional de infraestructura que debe ser gestionada, configurada y mantenida."),(0,s.yg)("li",{parentName:"ul"},"Latencia Adicional: Introduce un salto adicional en la ruta de la solicitud, lo que puede aumentar ligeramente la latencia.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-4"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Comercio Electr\xf3nico: Gesti\xf3n centralizada de solicitudes a microservicios de inventario, pagos, y cuentas de usuario."),(0,s.yg)("li",{parentName:"ul"},"Aplicaciones M\xf3viles: Agregaci\xf3n y transformaci\xf3n de datos de m\xfaltiples microservicios para ser consumidos por aplicaciones m\xf3viles."),(0,s.yg)("li",{parentName:"ul"},"Plataformas de Servicios en la Nube: Gesti\xf3n de m\xfaltiples API de servicios en una \xfanica plataforma para facilitar la integraci\xf3n y el consumo.")),(0,s.yg)("h4",{id:"analog\xeda-20"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina un restaurante con un sistema de pedidos centralizado:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Clientes: Los comensales que hacen sus pedidos."),(0,s.yg)("li",{parentName:"ul"},"API Gateway (Mesero): El mesero que recibe todos los pedidos de los clientes y los distribuye a las diferentes estaciones de cocina."),(0,s.yg)("li",{parentName:"ul"},"Microservicios (Estaciones de Cocina): Estaciones de cocina especializadas (p. ej., parrilla, pastas, postres) que preparan diferentes partes del pedido."),(0,s.yg)("li",{parentName:"ul"},"Servicios de Autenticaci\xf3n y Autorizaci\xf3n (Hostess): La hostess que verifica las reservas y asigna las mesas (control de acceso)."),(0,s.yg)("li",{parentName:"ul"},"Balanceador de Carga (Gerente): El gerente que decide a qu\xe9 estaci\xf3n de cocina se debe enviar un pedido en funci\xf3n de la carga de trabajo actual.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-usando-express-y-express-gateway"},"Ejemplo de Estructura de Proyecto en Node.js usando Express y Express Gateway"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/APIGatewayApp\n\u251c\u2500\u2500 api-gateway\n\u2502   \u251c\u2500\u2500 gateway.config.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 server.js\n\u251c\u2500\u2500 microservice-a\n\u2502   \u251c\u2500\u2500 app.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 routes.js\n\u251c\u2500\u2500 microservice-b\n\u2502   \u251c\u2500\u2500 app.js\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 routes.js\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"api-gateway/: Contiene la configuraci\xf3n y el c\xf3digo del API Gateway.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"gateway.config.js: Configuraci\xf3n del API Gateway."),(0,s.yg)("li",{parentName:"ul"},"server.js: C\xf3digo principal del API Gateway usando Express Gateway."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para el API Gateway."))),(0,s.yg)("li",{parentName:"ul"},"microservice-a/: Microservicio A.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"app.js: C\xf3digo principal del microservicio A."),(0,s.yg)("li",{parentName:"ul"},"routes.js: Definici\xf3n de rutas y l\xf3gica de negocio para el microservicio A."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para el microservicio A."))),(0,s.yg)("li",{parentName:"ul"},"microservice-b/: Microservicio B.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"app.js: C\xf3digo principal del microservicio B."),(0,s.yg)("li",{parentName:"ul"},"routes.js: Definici\xf3n de rutas y l\xf3gica de negocio para el microservicio B."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para el microservicio B."))),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar el API Gateway y los microservicios."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))),(0,s.yg)("h2",{id:"arquitectura-de-balanceo-de-carga"},"Arquitectura de Balanceo de Carga"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La arquitectura de balanceo de carga es un dise\xf1o utilizado para distribuir equitativamente el tr\xe1fico de red y las solicitudes de los clientes entre m\xfaltiples servidores o instancias de servicios. Su objetivo es mejorar la disponibilidad, la capacidad de respuesta y la resiliencia de aplicaciones y servicios al evitar la sobrecarga en un solo recurso.")),(0,s.yg)("h4",{id:"componentes-claves-3"},"Componentes claves"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Balanceador de Carga: El componente principal que distribuye las solicitudes entrantes entre los servidores backend."),(0,s.yg)("li",{parentName:"ul"},"Clientes: Los usuarios o aplicaciones que env\xedan solicitudes a la aplicaci\xf3n o servicio."),(0,s.yg)("li",{parentName:"ul"},"Servidores Backend: Instancias de servicios o aplicaciones que procesan las solicitudes distribuidas por el balanceador de carga."),(0,s.yg)("li",{parentName:"ul"},"Algoritmos de Balanceo de Carga: M\xe9todos para determinar c\xf3mo se distribuyen las solicitudes, como Round Robin, Least Connections, IP Hash, entre otros."),(0,s.yg)("li",{parentName:"ul"},"Monitorizaci\xf3n y Salud de los Servidores: Mecanismos para verificar el estado y la disponibilidad de los servidores backend.")),(0,s.yg)("h5",{id:"ventajas-2"},"Ventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Alta Disponibilidad: Al distribuir la carga entre m\xfaltiples servidores, se reduce el riesgo de que una falla en un solo servidor afecte a toda la aplicaci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Facilita la escalabilidad horizontal al permitir agregar o quitar servidores seg\xfan sea necesario."),(0,s.yg)("li",{parentName:"ul"},"Optimizaci\xf3n del Rendimiento: Mejora la capacidad de respuesta y reduce la latencia al evitar la sobrecarga de servidores individuales."),(0,s.yg)("li",{parentName:"ul"},"Mantenimiento Transparente: Permite realizar tareas de mantenimiento en los servidores backend sin interrumpir el servicio al cliente.")),(0,s.yg)("h4",{id:"desventajas-1"},"Desventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Complejidad: A\xf1ade una capa adicional de infraestructura que debe ser gestionada y mantenida."),(0,s.yg)("li",{parentName:"ul"},"Costo: Puede requerir hardware o servicios adicionales, lo que puede aumentar los costos operativos."),(0,s.yg)("li",{parentName:"ul"},"Latencia Adicional: Introduce una peque\xf1a latencia adicional debido al procesamiento del balanceador de carga.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-5"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Aplicaciones Web de Alto Tr\xe1fico: Distribuci\xf3n de tr\xe1fico entre m\xfaltiples servidores web para manejar grandes vol\xfamenes de usuarios simult\xe1neos."),(0,s.yg)("li",{parentName:"ul"},"Servicios en la Nube: Balanceo de carga de instancias de aplicaciones en la nube para garantizar disponibilidad y rendimiento."),(0,s.yg)("li",{parentName:"ul"},"APIs de Servicios: Distribuci\xf3n de solicitudes API entre m\xfaltiples instancias para mejorar la capacidad de respuesta y la tolerancia a fallos.")),(0,s.yg)("h4",{id:"analog\xeda-21"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una taquilla de cine con m\xfaltiples ventanillas de venta de boletos:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Clientes: Personas que quieren comprar boletos."),(0,s.yg)("li",{parentName:"ul"},"Balanceador de Carga (Encargado de la Taquilla): El encargado que dirige a las personas a diferentes ventanillas para evitar que se forme una cola larga en una sola ventanilla."),(0,s.yg)("li",{parentName:"ul"},"Servidores Backend (Ventanillas de Venta de Boletos): Las diferentes ventanillas que atienden a los clientes y venden los boletos.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-con-nginx-como-balanceador-de-carga"},"Ejemplo de Estructura de Proyecto en Node.js con NGINX como Balanceador de Carga"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/LoadBalancedApp\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 server1.js\n\u2502   \u251c\u2500\u2500 server2.js\n\u2502   \u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 nginx\n\u2502   \u251c\u2500\u2500 nginx.conf\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"app/: Contiene los servidores backend de la aplicaci\xf3n.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"server1.js: C\xf3digo del primer servidor backend."),(0,s.yg)("li",{parentName:"ul"},"server2.js: C\xf3digo del segundo servidor backend."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para los servidores backend."))),(0,s.yg)("li",{parentName:"ul"},"nginx/: Contiene la configuraci\xf3n del balanceador de carga NGINX.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"nginx.conf: Configuraci\xf3n del balanceador de carga NGINX."))),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar los servidores backend y NGINX."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))),(0,s.yg)("h2",{id:"arquitectura-master-slave"},"Arquitectura Master-Slave"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"La Arquitectura Master-Slave es un modelo de dise\xf1o de sistemas distribuidos en el que un nodo central (el maestro) controla uno o m\xe1s nodos secundarios (esclavos). El maestro distribuye tareas a los esclavos, los cuales ejecutan las tareas y devuelven los resultados al maestro. Esta arquitectura es com\xfanmente utilizada en sistemas de bases de datos replicadas, procesamiento paralelo y control de dispositivos."),(0,s.yg)("li",{parentName:"ul"},"La Arquitectura Master-Slave centraliza el control en un nodo maestro que coordina y distribuye tareas a uno o m\xe1s nodos esclavos, mejorando la escalabilidad y simplificando la coordinaci\xf3n de tareas. Aunque presenta ventajas significativas, como la centralizaci\xf3n y la escalabilidad, tambi\xe9n introduce desaf\xedos como el riesgo de un punto \xfanico de falla y la posible sobrecarga del maestro. Un ejemplo de proyecto en Node.js muestra c\xf3mo implementar esta arquitectura utilizando Docker para gestionar los servicios de maestro y esclavos, distribuyendo tareas de manera eficiente y coordinada.")),(0,s.yg)("h4",{id:"componentes-claves-4"},"Componentes claves"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Maestro: El nodo principal que controla y coordina las tareas. Se encarga de la asignaci\xf3n de trabajos a los esclavos y de la recopilaci\xf3n de los resultados."),(0,s.yg)("li",{parentName:"ul"},"Esclavos: Nodos secundarios que reciben tareas del maestro, las ejecutan y env\xedan los resultados de vuelta al maestro."),(0,s.yg)("li",{parentName:"ul"},"Canal de Comunicaci\xf3n: Mecanismo para la comunicaci\xf3n entre el maestro y los esclavos, a menudo implementado mediante protocolos de red.")),(0,s.yg)("h4",{id:"ventajas-3"},"Ventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Centralizaci\xf3n del Control: El maestro tiene una visi\xf3n global del sistema y puede coordinar eficientemente las tareas."),(0,s.yg)("li",{parentName:"ul"},"Escalabilidad: Es f\xe1cil a\xf1adir m\xe1s esclavos para aumentar la capacidad de procesamiento."),(0,s.yg)("li",{parentName:"ul"},"Simplicidad en la Coordinaci\xf3n: La divisi\xf3n clara de roles simplifica la coordinaci\xf3n y la gesti\xf3n de tareas.")),(0,s.yg)("h4",{id:"desventajas-2"},"Desventajas"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Punto \xdanico de Falla: Si el maestro falla, el sistema completo puede quedar inoperativo."),(0,s.yg)("li",{parentName:"ul"},"Sobrecarga del Maestro: El maestro puede convertirse en un cuello de botella si no se dimensiona adecuadamente."),(0,s.yg)("li",{parentName:"ul"},"Dependencia Jer\xe1rquica: Los esclavos dependen del maestro para las instrucciones y la coordinaci\xf3n, lo que puede limitar la flexibilidad.")),(0,s.yg)("h4",{id:"ejemplos-de-uso-6"},"Ejemplos de Uso"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Bases de Datos Replicadas: El maestro maneja las escrituras y actualizaciones, mientras que los esclavos manejan las consultas de solo lectura."),(0,s.yg)("li",{parentName:"ul"},"Procesamiento Paralelo: Tareas computacionales divididas entre m\xfaltiples nodos esclavos para ser procesadas en paralelo."),(0,s.yg)("li",{parentName:"ul"},"Sistemas de Control de Dispositivos: Un controlador maestro que gestiona varios dispositivos esclavos en sistemas embebidos.")),(0,s.yg)("h4",{id:"analog\xeda-22"},"Analog\xeda"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Imagina una empresa de construcci\xf3n:",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"Maestro (Jefe de Obra): El jefe de obra que asigna tareas espec\xedficas a diferentes equipos de trabajo y coordina las actividades en el sitio de construcci\xf3n."),(0,s.yg)("li",{parentName:"ul"},"Esclavos (Equipos de Trabajo): Los equipos de trabajo que ejecutan las tareas asignadas, como la construcci\xf3n de cimientos, paredes, techos, etc."),(0,s.yg)("li",{parentName:"ul"},"Canal de Comunicaci\xf3n (Radio de Comunicaci\xf3n): Las radios de comunicaci\xf3n que utilizan para mantenerse en contacto y coordinarse.")))),(0,s.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-nodejs-5"},"Ejemplo de Estructura de Proyecto en Node.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-plaintext"},"/MasterSlaveApp\n\u251c\u2500\u2500 master\n\u2502   \u251c\u2500\u2500 master.js\n\u2502   \u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 slave\n\u2502   \u251c\u2500\u2500 slave.js\n\u2502   \u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 docker-compose.yml\n\n")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},"master/: Contiene el c\xf3digo del nodo maestro.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"master.js: C\xf3digo principal del maestro."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para el maestro."))),(0,s.yg)("li",{parentName:"ul"},"slave/: Contiene el c\xf3digo de los nodos esclavos.",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"slave.js: C\xf3digo principal del esclavo."),(0,s.yg)("li",{parentName:"ul"},"package.json: Dependencias y scripts de Node.js para los esclavos."))),(0,s.yg)("li",{parentName:"ul"},"docker-compose.yml: Define los servicios de Docker para ejecutar el maestro y los esclavos."),(0,s.yg)("li",{parentName:"ul"},"README.md: Documentaci\xf3n del proyecto.")))))}p.isMDXComponent=!0}}]);