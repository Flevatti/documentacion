"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[5152],{5680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>g});var o=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var a=o.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},m=function(e){var a=d(e.components);return o.createElement(l.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},p=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=d(n),p=r,g=c["".concat(l,".").concat(p)]||c[p]||u[p]||t;return n?o.createElement(g,s(s({ref:a},m),{},{components:n})):o.createElement(g,s({ref:a},m))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,s=new Array(t);s[0]=p;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var d=2;d<t;d++)s[d]=n[d];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4053:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var o=n(8168),r=(n(6540),n(5680));const t={sidebar_position:8},s="Extra",i={unversionedId:"Node/extra",id:"Node/extra",title:"Extra",description:"Buffer",source:"@site/docs/Node/extra.md",sourceDirName:"Node",slug:"/Node/extra",permalink:"/documentacion/docs/Node/extra",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Node/extra.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"Node",previous:{title:"API REST 2022",permalink:"/documentacion/docs/Node/apiRest"}},l={},d=[{value:"Buffer",id:"buffer",level:2},{value:"Alloc()",id:"alloc",level:4},{value:"Write()",id:"write",level:4},{value:"Lenght",id:"lenght",level:4},{value:"byteLenght",id:"bytelenght",level:4},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Paso a Paso",id:"paso-a-paso",level:3},{value:"1- Crear un bufer",id:"1--crear-un-bufer",level:4},{value:"2- Lectura de un bufer",id:"2--lectura-de-un-bufer",level:4},{value:"3- Modificar un bufer",id:"3--modificar-un-bufer",level:4},{value:"Streams",id:"streams",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"EventEmitter",id:"eventemitter",level:4},{value:"Teor\xeda",id:"teor\xeda",level:3},{value:"\xbfQu\xe9 son exactamente los flujos(steams)?",id:"qu\xe9-son-exactamente-los-flujossteams",level:4},{value:"Ejemplo Youtube",id:"ejemplo-youtube",level:4},{value:"\xbfPor qu\xe9 son importantes los streams?",id:"por-qu\xe9-son-importantes-los-streams",level:4},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:4},{value:"Tipos de flujos en Node.js",id:"tipos-de-flujos-en-nodejs",level:4},{value:"Pipe()",id:"pipe",level:3},{value:"Dos modos de lecturas",id:"dos-modos-de-lecturas",level:4},{value:"Pipeline()",id:"pipeline",level:3},{value:"EventEmitter",id:"eventemitter-1",level:2},{value:"1- Instancia",id:"1--instancia",level:4},{value:"2- Creamos un evento",id:"2--creamos-un-evento",level:4},{value:"3- Llamamos al evento",id:"3--llamamos-al-evento",level:4},{value:"Ejemplo completo",id:"ejemplo-completo",level:4},{value:"Heredar",id:"heredar",level:4},{value:"C\xf3digo viejo",id:"c\xf3digo-viejo",level:4},{value:"C\xf3digo nuevo",id:"c\xf3digo-nuevo",level:4},{value:"El objeto EventEmitter tambi\xe9n expone varios otros m\xe9todos para interactuar con eventos",id:"el-objeto-eventemitter-tambi\xe9n-expone-varios-otros-m\xe9todos-para-interactuar-con-eventos",level:4},{value:"Process",id:"process",level:2},{value:"Stdin y Strdout",id:"stdin-y-strdout",level:3},{value:"Readline",id:"readline",level:3},{value:"Stderr",id:"stderr",level:3},{value:"Ejemplo",id:"ejemplo-2",level:3},{value:"\xbfQu\xe9 est\xe1n haciendo en el programa anterior?",id:"qu\xe9-est\xe1n-haciendo-en-el-programa-anterior",level:4},{value:"Otro ejemplo",id:"otro-ejemplo",level:4}],m={toc:d},c="wrapper";function u(e){let{components:a,...n}=e;return(0,r.yg)(c,(0,o.A)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"extra"},"Extra"),(0,r.yg)("h2",{id:"buffer"},"Buffer"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Es una tira de bytes (datos binarios)"),(0,r.yg)("li",{parentName:"ul"},"Similar a un array de enteros donde cada posici\xf3n es un byte."),(0,r.yg)("li",{parentName:"ul"},"Tiene un tama\xf1o fijo"),(0,r.yg)("li",{parentName:"ul"},"Los buffers son los Arrays en el backend."),(0,r.yg)("li",{parentName:"ul"},"Dentro de estos arreglos podemos enviar/recibir informaci\xf3n.")),(0,r.yg)("p",null,"Un b\xfafer es un espacio en la memoria (t\xedpicamente RAM) que almacena datos binarios. En Node.js , podemos acceder a estos espacios de memoria con la clase integrada Buffer. Los b\xfaferes almacenan una secuencia de enteros, similar a una Array en JavaScript . A diferencia de las Arrays, no puede cambiar el tama\xf1o de un b\xfafer una vez que se crea."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Dentro de un buffer podemos manipular diferentes objetos:"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Sockets : Te permite la comulaci\xf3n bidireccional para hacer apps en tiempo real."),(0,r.yg)("li",{parentName:"ul"},"Streams : Te permite enviar informaci\xf3n . Un archivo del SO se manipula con streams."),(0,r.yg)("li",{parentName:"ul"},"Implementar protocolos complejos : HTTP , HTTPS , HTTP , SSH , SMTP , POP , ETC."),(0,r.yg)("li",{parentName:"ul"},"Manipulaci\xf3n de ficheros/im\xe1genes"),(0,r.yg)("li",{parentName:"ul"},"Criptograf\xeda."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"En Node Buffer es una ",(0,r.yg)("a",{parentName:"p",href:"https://fedeleva.github.io/documentacion/docs/Javascript/basico4#objeto-global"},"clase global")))),(0,r.yg)("h4",{id:"alloc"},"Alloc()"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Para crear un nuevo b\xfafer, usamos la clase Buffer disponible globalmente, que tiene el m\xe9todo alloc()."),(0,r.yg)("li",{parentName:"ul"},"Un buffer se inicializa con el m\xe9todo alloc().")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"//  El metodo alloc() especifica el tama\xf1o del bufer.\n// El tama\xf1o es un n\xfamero entero que representa cu\xe1ntos bytes de memoria utilizara el objeto Buffer.\nvar buf = Buffer.alloc(100);\nvar buf2 = Buffer.alloc(100);\n\n")),(0,r.yg)("h4",{id:"write"},"Write()"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"El buffer tiene el m\xe9todo write() que sirve para cambiar o a\xf1adir contenido en este."),(0,r.yg)("li",{parentName:"ul"},"Si quisi\xe9ramos cambiar el contenido de todo el b\xfafer, podemos usar el m\xe9todo write(). "),(0,r.yg)("li",{parentName:"ul"},"El m\xe9todo write() acepta una cadena(String) que es lo que va a almacenar.\nAparte del String, acepta tres argumentos mas."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html"},"Buscar en la documentaci\xf3n mas informaci\xf3n sobre los tres argumentos"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'buf.write("abcd");\nconsole.log(buf);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Como se puede ver, el String est\xe1 en formato binario."))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"El objeto de b\xfafer viene con los m\xe9todos toString()y los toJSON(), que devuelven todo el contenido de un b\xfafer en dos formatos diferentes."),(0,r.yg)("li",{parentName:"ul"},"Tenemos el m\xe9todo ToString, que convierte el \u201cformato binario\u201d en String. "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html"},"Buscar en la documentaci\xf3n el metodo toString()")),(0,r.yg)("li",{parentName:"ul"},"Como sugiere su nombre, el m\xe9todo toString() convierte los bytes del b\xfafer en una cadena y se los devuelve al usuario.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'\nbuf.write("abcd");\nconsole.log(buf.toString());\n\n')),(0,r.yg)("h4",{id:"lenght"},"Lenght"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'var str = "\\u00bd + \\u00bc =  \\u00be";\n\nconsole.log(str, str.length);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"El lenght es de 10, el c\xf3digo ASCII es un solo car\xe1cter. ")))),(0,r.yg)("h4",{id:"bytelenght"},"byteLenght"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"La clase buffer tiene el m\xe9todo byteLenght , que devuelve la longitud en byte de una cadena cuando se codifica."),(0,r.yg)("li",{parentName:"ul"},"Sirve para verificar el tama\xf1o del bufer."),(0,r.yg)("li",{parentName:"ul"},"El primer par\xe1metro recibe un String (u otro valor) y el segundo una codificaci\xf3n de caracteres."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html"},"Buscar en la documentaci\xf3n el metodo byteLenght()"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'\nvar str = "\\u00bd + \\u00bc =  \\u00be";\n\nconsole.log(str, str.length);\nconsole.log(Buffer.byteLength(str, "utf8"));\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"El String ocupa 13 bytes en utf8"))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Lenght : Devuelve la cantidad de caracteres"),(0,r.yg)("li",{parentName:"ul"},"ByteLenght: Devuelve la cantidad de bytes que se utilizo para almacenar el String.")))),(0,r.yg)("h4",{id:"ejemplo"},"Ejemplo"),(0,r.yg)("p",null,"Abecedario en c\xf3digo ASCII"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'var buf2 = Buffer.alloc(26);\n\nfor (let i = 0; i < buf2.length; i++) {\n  buf2[i] = i + 97;\n}\nconsole.log(buf2.toString("ascii"));\n\n')),(0,r.yg)("h3",{id:"paso-a-paso"},"Paso a Paso"),(0,r.yg)("h4",{id:"1--crear-un-bufer"},"1- Crear un bufer"),(0,r.yg)("p",null,"Si va a almacenar datos (que a\xfan no ha recibido) en la memoria, querr\xe1 crear un nuevo b\xfafer. En Node.js usamos la funci\xf3n  alloc() de la  clase Buffer  para hacer esto."),(0,r.yg)("p",null,"La funci\xf3n  alloc() toma el tama\xf1o del b\xfafer como su primer y \xfanico argumento requerido. El tama\xf1o es un n\xfamero entero que representa cu\xe1ntos bytes de memoria utilizar\xe1 el objeto b\xfafer. Por ejemplo, si quisi\xe9ramos crear un b\xfafer de 1 KB (kilobyte) de tama\xf1o, equivalente a 1024 bytes, ingresar\xedamos esto:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const firstBuf = Buffer.alloc(1024);\n")),(0,r.yg)("p",null,"De forma predeterminada, cuando inicializa un b\xfafer con alloc(), el b\xfafer se llena con ceros binarios como marcador de posici\xf3n para datos posteriores. Sin embargo, podemos cambiar el valor predeterminado si lo deseamos. Si quisi\xe9ramos crear un nuevo b\xfafer con 1 en lugar de 0, usar\xedamos el segundo par\xe1metro de la funcion  alloc()."),(0,r.yg)("p",null,"El segundo par\xe1metro sirve para cambiar el valor predeterminado de cada byte."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const filledBuf = Buffer.alloc(1024, 1);\n")),(0,r.yg)("p",null,"Los datos binarios pueden venir en muchos formatos diferentes. Por ejemplo, consideremos una secuencia binaria que representa un byte de datos: 01110110. Si esta secuencia binaria usara el est\xe1ndar de codificaci\xf3n ASCII , ser\xeda la letra v. Sin embargo, si nuestra computadora estuviera procesando una imagen, esa secuencia binaria podr\xeda contener informaci\xf3n sobre el color de un p\xedxel."),(0,r.yg)("p",null,"La computadora sabe procesarlos de manera diferente porque los bytes est\xe1n codificados de manera diferente."),(0,r.yg)("p",null,"Un b\xfafer en Node.js usa el esquema de codificaci\xf3n UTF-8 de forma predeterminada si se inicializa con datos de cadena. Un byte en UTF-8 representa un n\xfamero, una letra (en ingl\xe9s y en otros idiomas) o un s\xedmbolo."),(0,r.yg)("p",null,"UTF-8 es un superconjunto de ASCII."),(0,r.yg)("p",null,'ASCII puede codificar bytes con letras may\xfasculas y min\xfasculas en ingl\xe9s, los n\xfameros 0-9 y algunos otros s\xedmbolos como el signo  "!"  o el signo   "&".'),(0,r.yg)("p",null,"Si estuvi\xe9ramos escribiendo un programa que solo pudiera funcionar con caracteres ASCII, podr\xedamos cambiar la codificaci\xf3n utilizada por nuestro b\xfafer con el tercer argumento de  alloc()."),(0,r.yg)("p",null,"Vamos a crear un nuevo b\xfafer que tenga cinco bytes y almacene solo caracteres ASCII:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const asciiBuf = Buffer.alloc(5, "a", "ascii");\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"El b\xfafer se inicializa con cinco bytes del car\xe1cter a, utilizando la representaci\xf3n ASCII."))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("h5",{parentName:"div",id:"de-forma-predeterminada-nodejs-admite-las-siguientes-codificaciones-de-caracteres"},"De forma predeterminada, Node.js admite las siguientes codificaciones de caracteres:"),(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"ASCII , representado como \u201cascii\u201d"),(0,r.yg)("li",{parentName:"ul"},"UTF-8 , representado como \u201cutf-8\u201d o \u201cutf8\u201d"),(0,r.yg)("li",{parentName:"ul"},"UTF-16 , representado como \u201cutf-16le\u201d o \u201cutf16le\u201d"),(0,r.yg)("li",{parentName:"ul"},"UCS-2 , representado como \u201cucs-2\u201d o \u201cucs2\u201d"),(0,r.yg)("li",{parentName:"ul"},"Base64 , representado como \u201cbase64\u201d"),(0,r.yg)("li",{parentName:"ul"},"Hexadecimal , representado como \u201chex\u201d"),(0,r.yg)("li",{parentName:"ul"},"ISO/IEC 8859-1 , representado como \u201clatin1\u201d o \u201cbinary\u201d")))),(0,r.yg)("p",null,"Hasta ahora hemos estado creando nuevos b\xfaferes con la funci\xf3n alloc(). Pero a veces es posible que deseemos crear un b\xfafer a partir de datos que ya existen, como una cadena o una matriz."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Para crear un b\xfafer a partir de datos preexistentes, usamos el m\xe9todo from(). Podemos usar esa funci\xf3n para crear buffers desde:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Una matriz de enteros: los valores enteros pueden estar entre 0 y 255."),(0,r.yg)("li",{parentName:"ul"},"Un ArrayBuffer: Este es un objeto de JavaScript que almacena una longitud fija de bytes."),(0,r.yg)("li",{parentName:"ul"},"Un string"),(0,r.yg)("li",{parentName:"ul"},"Otro Buffer."),(0,r.yg)("li",{parentName:"ul"},"Otros objetos de JavaScript que tienen una propiedad  Symbol.toPrimitive. Esa propiedad le dice a JavaScript c\xf3mo convertir el objeto a un tipo de datos primitivo: boolean, null, undefined, number, String o symbol. ")))),(0,r.yg)("p",null,"Veamos c\xf3mo podemos crear un b\xfafer a partir de una cadena. En  Node.js, ingrese esto:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const stringBuf = Buffer.from("My name is Paul");\n')),(0,r.yg)("p",null,"Vamos a crear un nuevo b\xfafer a partir de otro b\xfafer que hicimos antes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const stringBuf = Buffer.from("My name is Paul");\nconst asciiCopy = Buffer.from(stringBuf);\n\n\n')),(0,r.yg)("h4",{id:"2--lectura-de-un-bufer"},"2- Lectura de un bufer"),(0,r.yg)("p",null,"Hay muchas formas de acceder a los datos en un b\xfafer. Podemos acceder a un byte individual en un b\xfafer o podemos extraer todo el contenido."),(0,r.yg)("p",null,"Para acceder a un byte de un b\xfafer, pasamos el \xedndice o ubicaci\xf3n del byte que queremos. Los b\xfaferes almacenan datos secuencialmente como arrays. Tambi\xe9n indexan sus datos como arrays, comenzando en 0. Podemos usar la notaci\xf3n de matriz en el objeto de b\xfafer para obtener un byte individual."),(0,r.yg)("p",null,"Leemos el primer byte del bufer:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf[0]);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Por consola se muestra \u201c72\u201d"),(0,r.yg)("li",{parentName:"ul"},"El entero 72 corresponde a la representaci\xf3n UTF-8 de la letra H.")))),(0,r.yg)("p",null,"Hagamos lo mismo para el segundo byte"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf[1]);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"El entero 105 representa la min\xfascula i.")))),(0,r.yg)("p",null,"Accedemos a un \u201cbyte inexistente\u201d"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf[3]);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Devolvera undefined")))),(0,r.yg)("p",null,"Ahora que hemos visto c\xf3mo leer bytes individuales de un b\xfafer, veamos nuestras opciones para recuperar todos los datos almacenados en un b\xfafer a la vez. El objeto de b\xfafer viene con los m\xe9todos toString() y toJSON(), que devuelven todo el contenido de un b\xfafer en dos formatos diferentes."),(0,r.yg)("p",null,"Como sugiere su nombre, el m\xe9todo  toString() convierte los bytes del b\xfafer en una cadena(String) y se los devuelve al usuario. Si usamos este m\xe9todo en hiBuf, obtendremos la cadena Hi!"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("p",null,"Ese b\xfafer se cre\xf3 a partir de una cadena (string). Veamos qu\xe9 sucede si usamos el toString() en un b\xfafer que no se cre\xf3 de una  cadena."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"const tenZeroes = Buffer.alloc(10);\nconsole.log(tenZeroes);\nconsole.log(tenZeroes.toString());\n\n")),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Puede no aparecer nada o una cadena como \u201c\\u0000\u201d que representa null o el valor 0.")))),(0,r.yg)("p",null,"Tiene un par\xe1metro opcional toString(). Podemos usar este par\xe1metro para cambiar la ",(0,r.yg)("a",{parentName:"p",href:"#de-forma-predeterminada-nodejs-admite-las-siguientes-codificaciones-de-caracteres"},"codificaci\xf3n de los datos")," del b\xfafer."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf.toString("hex"));\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Devuelve 486921"),(0,r.yg)("li",{parentName:"ul"},"486921 es la representaci\xf3n hexadecimal de los bytes que representan la cadena Hi!")))),(0,r.yg)("p",null,"El m\xe9todo  toJSON() se comporta de manera diferente. Independientemente de si el b\xfafer se cre\xf3 a partir de una cadena o no, siempre devuelve los datos como la representaci\xf3n entera del byte."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nconsole.log(hiBuf.toJSON());\n\n')),(0,r.yg)("p",null,"El objeto JSON tiene una propiedad type que siempre ser\xe1 Buffer. Eso es para que los programas puedan distinguir estos objetos JSON de otros objetos JSON."),(0,r.yg)("p",null,"La propiedad data contiene una matriz de la representaci\xf3n entera de los bytes. Es posible que haya notado que 72, 105 y 33 corresponden a los valores que recibimos cuando extrajimos los bytes individualmente."),(0,r.yg)("h4",{id:"3--modificar-un-bufer"},"3- Modificar un bufer"),(0,r.yg)("p",null,"Hay muchas formas de modificar un objeto de b\xfafer existente. Similar a la lectura, podemos modificar los bytes del b\xfafer individualmente usando la sintaxis de matriz. Tambi\xe9n podemos escribir nuevos contenidos en un b\xfafer, reemplazando los datos existentes."),(0,r.yg)("p",null,"Comencemos por ver c\xf3mo podemos cambiar bytes individuales de un b\xfafer. Recuerde nuestra variable de b\xfafer hiBuf, que contiene la cadena Hi!. Cambiemos cada byte para que contenga Hey en su lugar."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nhiBuf[1] = "e";\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("p",null,"Recibimos un resultado extra\xf1o (\u201c\\u0000\u201d) o se omitir\xe1 de la cadena el byte que hemos modificado en la consola."),(0,r.yg)("p",null,"Esto sucede porque el b\xfafer solo puede aceptar un valor entero. No podemos asignarle la letra e; m\xe1s bien, tenemos que asignarle el n\xfamero cuyo equivalente binario representa e:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nhiBuf[1] = 101;\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("p",null,"Para cambiar el \xfaltimo car\xe1cter en el b\xfafer, debemos establecer el tercer elemento en el n\xfamero entero que corresponde al byte para y:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'\nconst hiBuf = Buffer.from("Hi!");\nhiBuf[1] = 101;\nhiBuf[2] = 121;\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("p",null,"Si tratamos de escribir un byte que est\xe1 fuera del rango del b\xfafer, ser\xe1 ignorado y el contenido del b\xfafer no cambiar\xe1. Por ejemplo, intentemos establecer el cuarto elemento inexistente del b\xfafer en o:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hi!");\nhiBuf[1] = 101;\nhiBuf[2] = 121;\nhiBuf[3] = 111;\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("p",null,"Si quisi\xe9ramos cambiar el contenido de todo el b\xfafer, podemos usar el m\xe9todo write(). El m\xe9todo  write() acepta una cadena que reemplazar\xe1 el contenido actual del b\xfafer."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const hiBuf = Buffer.from("Hey");\nconsole.log(hiBuf.write("Hi!"));\nconsole.log(hiBuf.toString());\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"El m\xe9todo write devuelve 3."),(0,r.yg)("li",{parentName:"ul"},"Esto se debe a que escribi\xf3 tres bytes de datos. Cada letra tiene un byte de tama\xf1o, ya que este b\xfafer utiliza la codificaci\xf3n UTF-8, que utiliza un byte para cada car\xe1cter. "),(0,r.yg)("li",{parentName:"ul"},"Si el b\xfafer hubiera utilizado la codificaci\xf3n UTF-16, que tiene un m\xednimo de dos bytes por car\xe1cter, la write()funci\xf3n habr\xeda devuelto 6.")))),(0,r.yg)("p",null,"Conclusi\xf3n, el m\xe9todo write devuelve la cantidad de bytes que se utilizo para almacenar el contenido que se especific\xf3."),(0,r.yg)("p",null,"Si intenta escribir m\xe1s bytes que el tama\xf1o de un b\xfafer, el objeto del b\xfafer solo aceptar\xe1 los bytes que quepan. Para ilustrar, vamos a crear un b\xfafer que almacene tres bytes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const petBuf = Buffer.alloc(3);\npetBuf.write("Cats");\nconsole.log(petBuf.toString());\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Muestra \u2018Cat\u2019 por consola"),(0,r.yg)("li",{parentName:"ul"},"La funci\xf3n  write() agrega los bytes en orden secuencial, por lo que solo los primeros tres bytes se colocaron en el b\xfafer.")))),(0,r.yg)("p",null,"Por lo contrario : Si a\xf1adimos informaci\xf3n que ocupe menos byte de los que se especific\xf3 en el buffer."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const petBuf2 = Buffer.alloc(4);\npetBuf2.write("Cats");\npetBuf2.write("Hi");\nconsole.log(petBuf2.toString());\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Se muestra por consola Hits"),(0,r.yg)("li",{parentName:"ul"},"Los dos primeros caracteres se sobrescriben, pero el resto del b\xfafer permanece intacto.")))),(0,r.yg)("p",null,"A veces, los datos que queremos en nuestro b\xfafer preexistente no est\xe1n en una cadena, sino que residen en otro objeto b\xfafer. En estos casos, podemos usar la funci\xf3n copy() para modificar lo que est\xe1 almacenando nuestro b\xfafer."),(0,r.yg)("p",null,"Ejemplo"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const wordsBuf = Buffer.from("Banana Nananana");\nconst catchphraseBuf = Buffer.from("Not sure Turtle!");\n\n')),(0,r.yg)("p",null,"Los b\xfaferes wordsBufy catchphraseBuf contienen datos de cadena. Queremos modificar catchphraseBuf para que almacene Nananana Turtle! en lugar de Not sure Turtle!"),(0,r.yg)("p",null,"Para copiar datos de un b\xfafer a otro, usaremos el m\xe9todo copy() en el b\xfafer que es la fuente de la informaci\xf3n que se va a utilizar en otro bufer. Por lo tanto, necesitamos copiar as\xed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"console.log(wordsBuf.copy(catchphraseBuf));\n")),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"El par\xe1metro es el bufer catchphraseBuf."),(0,r.yg)("li",{parentName:"ul"},"El par\xe1metro es el buffer destino, especifica en donde se va a recortar/copiar la informaci\xf3n de este bufer."),(0,r.yg)("li",{parentName:"ul"},"Devuelve la cantidad de bytes que se ocuparon para copiar el contenido.")))),(0,r.yg)("p",null,"En la consola se muestra el n\xfamero 15 y la cadena Nananana solo usa 8 bytes de datos, por lo que sabemos de inmediato que nuestra copia no sali\xf3 como se esperaba."),(0,r.yg)("p",null,"Si mostramos el contenido del buffer"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"console.log(catchphraseBuf.toString());\n")),(0,r.yg)("p",null,"De forma predeterminada, copy() tom\xf3 todo el contenido de wordsBuf y lo coloc\xf3 en catchphraseBuf. Necesitamos ser m\xe1s selectivos para nuestro objetivo y solo copiar Nananana."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"La funci\xf3n  copy() tiene algunos par\xe1metros m\xe1s que nos permiten personalizar qu\xe9 datos se copian en el otro b\xfafer. Aqu\xed hay una lista de todos los par\xe1metros de esta funci\xf3n:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"target- Este es el \xfanico par\xe1metro requerido de copy(). Como hemos visto en nuestro uso anterior, es el b\xfafer al que queremos copiar."),(0,r.yg)("li",{parentName:"ul"},"targetStart- Este es el \xedndice de los bytes en el b\xfafer de destino donde deber\xedamos comenzar a copiar. De forma predeterminada, es 0, lo que significa que copia los datos desde el principio del b\xfafer."),(0,r.yg)("li",{parentName:"ul"},"sourceStart- Este es el \xedndice de los bytes en el b\xfafer de origen desde donde debemos copiar."),(0,r.yg)("li",{parentName:"ul"},"sourceEnd- Este es el \xedndice de los bytes en el b\xfafer de origen donde debemos dejar de copiar. De forma predeterminada, es la longitud del b\xfafer.")))),(0,r.yg)("p",null,"Entonces, para copiar Nananana desde wordsBuf hacia catchphraseBuf, target deber\xeda ser catchphraseBuf como antes. El targetStart ser\xeda 0 como queremos que Nananana aparezca al principio de catchphraseBuf. El sourceStart deber\xeda ser 7 ya que ese es el \xedndice donde Nananana comienza en wordsBuf. Continuar\xeda sourceEnd siendo la longitud de los b\xfaferes."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const wordsBuf = Buffer.from("Banana Nananana");\nconst catchphraseBuf = Buffer.from("Not sure Turtle!");\nconsole.log(wordsBuf.copy(catchphraseBuf, 0, 7, wordsBuf.length));\nconsole.log(catchphraseBuf.toString());\n\n')),(0,r.yg)("p",null,"\xa1\xc9xito! Pudimos modificar los datos de catchphraseBuf copiando el contenido de wordsBuf."),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/using-buffers-in-node-js"},"Using Buffers in Node.js")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://blog.logrocket.com/node-js-buffer-complete-guide/"},"Node.js buffer: A complete guide")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.makeuseof.com/nodejs-buffers-understanding/"},"Understanding Buffers in Node.js"))))),(0,r.yg)("h2",{id:"streams"},"Streams"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Es un \u201cchorro\u201d (Streams) de informaci\xf3n que se transmiten en \u201cPedazos\u201d (Chunks)."),(0,r.yg)("li",{parentName:"ul"},"4 Tipos de streams:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Lectura"),(0,r.yg)("li",{parentName:"ul"},"Escritura"),(0,r.yg)("li",{parentName:"ul"},"Duplex (Lectura y Escritura)"),(0,r.yg)("li",{parentName:"ul"},"Transform: Pueden modificar o transformar los datos a medidas que se escriben o leen."))),(0,r.yg)("li",{parentName:"ul"},"Todos los streams son instancias de EventEmitter"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/stream.html"},"Documentaci\xf3n")),(0,r.yg)("li",{parentName:"ul"},"Un stream es una interfaz abstracta implementada por varios objetos de Node."),(0,r.yg)("li",{parentName:"ul"},"HTTP SERVER es un stream: Es un chorro de informaci\xf3n que va a trav\xe9s del protocolo HTTP y llega a nuestro navegador."),(0,r.yg)("li",{parentName:"ul"},"Los streams se pueden leer, escribir o ambos.")),(0,r.yg)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Vamos a usar el modulo ",(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/fs.html#file-system"},"File System")," ")),(0,r.yg)("p",null,"Creamos un archivo nombres.txt con nombres "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"Alma\nBrayan\n\u2026\n")),(0,r.yg)("p",null,"El m\xe9todo pipe te permite abrir el proceso de lectura/escritura."),(0,r.yg)("p",null,"Entonces es como que abre una \u201ctuber\xeda\u201d con el stream que recibe."),(0,r.yg)("p",null,"Sirve para enviar los datos a una stream writable."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n// Creamos un stream de Lectura con la informaci\xf3n que contiene el archivo que especificamos (nombres.txt)\nconst readStream = fs.createReadStream("./nombres.txt");\n\n// Creamos un stream de escritura , y todo lo que vamos a "escribir" se va a a\xf1adir en el archivo que especificamos(nombres_copia.txt)\nconst writeStream = fs.createWriteStream("./nombres_copia.txt");\n\nreadStream.pipe(writeStream);\n\n')),(0,r.yg)("p",null,"Al ejecutarse , se crea el archivo nombres_copia.txt."),(0,r.yg)("p",null,"Si abrimos el archivo , el contenido es id\xe9ntico al nombres.txt"),(0,r.yg)("h4",{id:"eventemitter"},"EventEmitter"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Nos permite manejar \u201ceventos\u201d"),(0,r.yg)("li",{parentName:"ul"},"El evento \u201cdata\u201d se activa cuando se empieza a recibir datos y recibe los chunks (pedazos de informaci\xf3n)"),(0,r.yg)("li",{parentName:"ul"},"En lugar de usar addEventListener() usamos on()")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n// Creamos un stream de Lectura con la informaci\xf3n que contiene el archivo que especificamos (nombres.txt)\nconst readStream = fs.createReadStream("./nombres.txt");\n\n// Creamos un stream de escritura , y todo lo que vamos a "modificar" se va a a\xf1adir en el archivo que especificamos(nombres_copia.txt)\nconst writeStream = fs.createWriteStream("./nombres_copia.txt");\n\nreadStream.pipe(writeStream);\nreadStream.on("data", function (chunk) {\n  console.log("Ha leido", chunk.length, "Caracteres");\n});\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"El evento te dice cuantos \u201ccaracteres\u201d tiene el blog de nota."),(0,r.yg)("li",{parentName:"ul"},'La propiedad lenght es como "acumulativa"')))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"El evento end se activa cuando se deja de leer informaci\xf3n.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n// Creamos un stream de Lectura con la informaci\xf3n que contiene el archivo que especificamos (nombres.txt)\nconst readStream = fs.createReadStream("./nombres.txt");\n\n// Creamos un stream de escritura , y todo lo que vamos a "modificar" se va a a\xf1adir en el archivo que especificamos(nombres_copia.txt)\nconst writeStream = fs.createWriteStream("./nombres_copia.txt");\n\nreadStream.pipe(writeStream);\nreadStream.on("data", function (chunk) {\n  console.log("Ha leido", chunk.length, "Caracteres");\n});\nreadStream.on("end", function () {\n  console.log("Termine de leer el archivo");\n});\n\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Los dos eventos y el m\xe9todo pipe se puede hacer de esta manera:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n// Creamos un stream de Lectura con la informaci\xf3n que contiene el archivo que especificamos (nombres.txt)\nconst readStream = fs.createReadStream("./nombres.txt");\n\n// Creamos un stream de escritura , y todo lo que vamos a "modificar" se va a a\xf1adir en el archivo que especificamos(nombres_copia.txt)\nconst writeStream = fs.createWriteStream("./nombres_copia.txt");\n\nreadStream.pipe(writeStream);\nreadStream\n  .on("data", function (chunk) {\n    console.log("Ha leido", chunk.length, "Caracteres");\n  })\n  .on("end", function () {\n    console.log("Termine de leer el archivo");\n  });\n\n')),(0,r.yg)("h3",{id:"teor\xeda"},"Teor\xeda"),(0,r.yg)("h4",{id:"qu\xe9-son-exactamente-los-flujossteams"},"\xbfQu\xe9 son exactamente los flujos(steams)?"),(0,r.yg)("p",null,"Los flujos son colecciones de datos, como las matrices o las cadenas de texto. La diferencia es que estos pueden no estar disponibles todos a la vez y no tienen por qu\xe9 caber en la memoria."),(0,r.yg)("p",null,"Esto hace que sean realmente potentes cuando se trabaja con grandes cantidades de datos, o con datos que vienen de una fuente externa de uno en uno."),(0,r.yg)("p",null,"Sin embargo, los flujos no s\xf3lo sirven para trabajar con grandes cantidades de datos. Tambi\xe9n nos ofrecen la posibilidad de componer nuestro c\xf3digo. Al igual que podemos componer poderosos comandos de Linux mediante la canalizaci\xf3n de otros comandos m\xe1s peque\xf1os, podemos hacer exactamente lo mismo en Node con los flujos."),(0,r.yg)("p",null,"Los flujos son m\xe9todos utilizados para manejar archivos de escritura/lectura, comunicaciones de red o cualquier tipo de intercambio de informaci\xf3n de extremo a extremo de manera eficiente."),(0,r.yg)("p",null,"Con las transmisiones, los datos se pueden intercambiar en partes peque\xf1as, lo que reduce mucho el uso de la memoria.\nA diferencia de la forma tradicional de leer todos los archivos en la memoria de un programa a la vez antes de procesar su contenido, lo que puede ser un problema si no hay suficiente espacio de memoria para contener los archivos."),(0,r.yg)("p",null,"Sin embargo, Streams, por otro lado, no guarda todos los archivos en la memoria a la vez antes de procesar el contenido, lee fragmentos de datos y procesa el contenido del archivo pieza por pieza. "),(0,r.yg)("p",null,"Este patr\xf3n de dividir archivos en fragmentos de datos se convierte en una ventaja para nosotros cuando trabajamos con grandes cantidades de datos porque ya no tenemos que preocuparnos de que el espacio de memoria sea suficiente para contener los archivos."),(0,r.yg)("h4",{id:"ejemplo-youtube"},"Ejemplo Youtube"),(0,r.yg)("p",null,"Youtube ofrece servicios de transmisi\xf3n, con este servicio no necesita descargar los videos o las transmisiones de audio de una sola vez, pero puede ver los videos o escuchar el audio de inmediato, esto es posible porque su navegador puede recibir los videos y audio como un flujo continuo de fragmentos."),(0,r.yg)("h4",{id:"por-qu\xe9-son-importantes-los-streams"},"\xbfPor qu\xe9 son importantes los streams?"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Tiene cuatro importancia principal sobre el uso de otros m\xe9todos de manipulaci\xf3n de datos e incluyen:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Eficiencia de la memoria : con los streams, no necesita cargar grandes cantidades de datos en la memoria antes de poder procesarlos."),(0,r.yg)("li",{parentName:"ul"},"Eficiencia temporal : con flujos, el procesamiento de datos lleva menos tiempo. No tiene que esperar hasta que toda la carga \xfatil de datos est\xe9 disponible. Puede comenzar a procesarlo tan pronto como lo tenga."),(0,r.yg)("li",{parentName:"ul"},"Funci\xf3n de compatibilidad: con la funci\xf3n de compatibilidad de transmisi\xf3n, podemos crear microservicios en node.js. Con composability, podemos realizar aplicaciones complejas que interact\xfaan y se interconectan con datos entre diferentes piezas de c\xf3digo."),(0,r.yg)("li",{parentName:"ul"},"Utilizado en la creaci\xf3n de aplicaciones: con transmisiones, podemos crear aplicaciones del mundo real, como aplicaciones de transmisi\xf3n de video.")))),(0,r.yg)("h4",{id:"ejemplo-b\xe1sico"},"Ejemplo b\xe1sico"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\nconst fs = require("fs");\nconst server = http.createServer(function (req, res) {\n  fs.readFile("./nombres.txt", (err, data) => {\n    res.end(data);\n  });\n});\nserver.listen(3000);\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"readFile() : Lee todo el contenido del archivo (primer par\xe1metro) y cuando termina , invoca la funci\xf3n (segundo par\xe1metro)"),(0,r.yg)("li",{parentName:"ul"},"res.end(data) : Devolver\xe1 el contenido del archivo como respuesta al cliente HTTP.")))),(0,r.yg)("p",null,"El uso del m\xe9todo anterior har\xe1 que nuestra operaci\xf3n tome tiempo si los archivos son grandes. Entonces, para mitigar el problema, escribamos el mismo c\xf3digo usando un m\xe9todo de transmisi\xf3n."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\nconst fs = require("fs");\nconst server = http.createServer(function (req, res) {\n  const stream = fs.createReadStream("./nombres.txt");\n  stream.pipe(res);\n});\nserver.listen(3000);\n\n')),(0,r.yg)("p",null,'Ahora puede ver que tenemos m\xe1s control, comenzamos a "transmitir" los archivos al cliente HTTP tan pronto como tengamos fragmentos de datos listos para enviar. Esto es mejor, especialmente si tenemos un archivo grande, no tenemos que esperar hasta que el archivo se lea por completo.'),(0,r.yg)("h4",{id:"tipos-de-flujos-en-nodejs"},"Tipos de flujos en Node.js"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Readable stream: Son flujos de los que podemos leer datos. Nos permite recibir datos, pero no enviar datos. Esto tambi\xe9n se conoce como tuber\xeda. Los datos que se env\xedan a un flujo de lectura se almacenan en b\xfafer hasta que un consumidor comienza a leer los datos. El uso de fs.createReadStream() nos permite leer el contenido de un archivo."),(0,r.yg)("li",{parentName:"ul"},"Writable stream: Son flujos desde los que podemos escribir datos. nos permite enviar datos, pero no recibir datos de ella. El fs.createWriteStream() nos permite escribir datos en un archivo."),(0,r.yg)("li",{parentName:"ul"},"Duplex: estos son flujos que se componen de flujos de lectura(readable) y escritura(writable)."),(0,r.yg)("li",{parentName:"ul"},"Transform: un flujo de transformaci\xf3n es similar a un flujo d\xfaplex, pero llevan a cabo la transformaci\xf3n de datos a medida que se escriben y tambi\xe9n cuando se leen.")),(0,r.yg)("h3",{id:"pipe"},"Pipe()"),(0,r.yg)("p",null,"Es un m\xe9todo que vimos en el ejemplo anterior."),(0,r.yg)("p",null,"El m\xe9todo readable.pipe() en un flujo de lectura se usa para adjuntar un flujo de escritura al flujo de lectura para que, en consecuencia, cambie al modo de flujo y luego env\xede todos los datos que tiene al stream writable."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Este m\xe9todo acepta dos par\xe1metros como se mencion\xf3 anteriormente y se describe a continuaci\xf3n:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"stream: este par\xe1metro contiene el  stream writable"),(0,r.yg)("li",{parentName:"ul"},"opciones: este par\xe1metro contiene las opciones de tuber\xeda.")))),(0,r.yg)("p",null,"El m\xe9todo pipe se agreg\xf3 en v0.9.4 de Node.js y su prop\xf3sito es adjuntar un stream  writable a un stream readable  para que se permita pasar los datos del stream readable al stream writable."),(0,r.yg)("p",null,"Es una tuber\xeda"),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://res.cloudinary.com/practicaldev/image/fetch/s--5qpMcc3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/www.becomebetterprogrammer.com/wp-content/uploads/2021/09/example-piping-a-readable-to-writeable-stream.png%3Fresize%3D640%252C360%26ssl%3D1",alt:"Tuberia"})),(0,r.yg)("p",null,"El m\xe9todo pipe sirve para conectar las dos tuber\xedas (Stream) y permitir que el agua (los datos) fluyan de una tuber\xeda a otra."),(0,r.yg)("p",null,"Este m\xe9todo solo lo contiene los streams readable.\t"),(0,r.yg)("p",null,"El destino de una tuber\xeda es el stream writable "),(0,r.yg)("h4",{id:"dos-modos-de-lecturas"},"Dos modos de lecturas"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Los streams readable funcionan efectivamente en uno de dos modos: fluido y en pausa:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"En el modo de flujo , los datos se leen del sistema subyacente autom\xe1ticamente y se proporcionan a una aplicaci\xf3n lo m\xe1s r\xe1pido posible mediante eventos a trav\xe9s de la interfaz EventEmitter."),(0,r.yg)("li",{parentName:"ul"},"En el modo de pausa , el  m\xe9todo  stream.read() debe llamarse expl\xedcitamente para leer fragmentos de datos de la secuencia."))),(0,r.yg)("li",{parentName:"ul"},"Una  stream readable puede estar en modo de objeto o no, independientemente de si est\xe1 en modo de flujo o en modo de pausa"),(0,r.yg)("li",{parentName:"ul"},"Todas las transmisiones Readable  comienzan en modo de pausa (las tuber\xedas no fluyen , no se conectan) , pero se pueden cambiar al modo de flujo (que fluyan las tuber\xedas) de una de las siguientes maneras:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Agregar un controlador de eventos de 'datos'."),(0,r.yg)("li",{parentName:"ul"},"Llamando al m\xe9todo  stream.resume()."),(0,r.yg)("li",{parentName:"ul"},"Llamar al m\xe9todo stream.pipe() para enviar los datos a un Writable."))),(0,r.yg)("li",{parentName:"ul"},"El Readable puede volver al modo de pausa usando uno de los siguientes:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Si no hay destinos de tuber\xeda, llame al m\xe9todo stream.pause()."),(0,r.yg)("li",{parentName:"ul"},"Si hay destinos de tuber\xeda, eliminando todos los destinos de tuber\xeda. Se pueden eliminar varios destinos de tuber\xeda llamando al m\xe9todo stream.unpipe()")))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/node-js-stream-readable-pipe-method/"},"Node.js Stream readable.pipe() Method")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://dev.to/arealesramirez/what-does-pipe-mean-in-node-js-how-to-use-it-practical-guide-4kmn"},"What Does .pipe Mean in Node.js? How To Use It? Practical Guide"))))),(0,r.yg)("h3",{id:"pipeline"},"Pipeline()"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Los problemas de pipe():",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"La fuente de informaci\xf3n no se destruir\xe1 si el destino emite un cierre o un error."),(0,r.yg)("li",{parentName:"ul"},"No se puede proporcionar una devoluci\xf3n de llamada para saber cu\xe1ndo finaliz\xf3 la tuber\xeda (se pasaron todos los datos)")))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Para solucionar estos problema, se creo el m\xe9todo pipeline() que se introdujo en Nodejs 10.x o una versi\xf3n posterior."),(0,r.yg)("li",{parentName:"ul"},"Con este m\xe9todo logramos que la salida de un stream sea la entrada de otro stream."),(0,r.yg)("li",{parentName:"ul"},"Normalmente se usa para obtener datos de un  stream y pasar la salida de ese  stream a otro stream."),(0,r.yg)("li",{parentName:"ul"},"Si lo comparamos con la foto de pipe() este m\xe9todo nos permite conectar tuber\xedas (como pipe) y al mismo tiempo gestionar si hubo un problema o si el agua llego al \u201cdestino\u201d.")),(0,r.yg)("p",null,"El ejemplo que hicimos con pipe, lo podemos adaptar con pipeline"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const { pipeline } = require("stream");\nconst fs = require("fs");\nconst readStream = fs.createReadStream("./nombres.txt");\nconst writeStream = fs.createWriteStream("./nombres_copia.txt");\n\npipeline(readStream, writeStream, (error) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log("Se finalizo la tuberia , los datos se pasaron");\n  }\n});\n\n')),(0,r.yg)("p",null,"Basicamente el m\xe9todo recibe los streams que quieras (\u2026streams) y el ultimo par\xe1metro es una funcion que se invocara al terminar la tuber\xeda o cuando hay un error en el destino."),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://dev.to/yenyih/use-pipeline-instead-of-pipe-4gl3"},"Use pipeline instead of pipe"))))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://desarrolloweb.com/articulos/streams-nodejs.html"},"Streams en NodeJS")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodesource.com/blog/understanding-streams-in-nodejs/"},"Understanding Streams in Node.js")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.freecodecamp.org/espanol/news/node-js-streams-todo-lo-que-necesitas-saber/"},"Node.js Streams: Todo lo que necesitas saber")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://betterprogramming.pub/how-to-use-streams-in-node-js-ad1b73409d37"},"How To Use Streams in Node.js")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://masteringbackend.com/posts/how-to-use-streams-in-node-js"},"How to use Streams in Node.js")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://blog.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/"},"The Definitive Guide to Object Streams in Node.js"))))),(0,r.yg)("h2",{id:"eventemitter-1"},"EventEmitter"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Si trabaj\xf3 con JavaScript en el navegador, sabe que  la interacci\xf3n del usuario se maneja a trav\xe9s de eventos: clics del mouse, pulsaciones de botones del teclado, reacciones a los movimientos del mouse, etc."),(0,r.yg)("li",{parentName:"ul"},"En el lado del backend, Node.js nos ofrece la opci\xf3n de construir un sistema similar usando el m\xf3dulo events ."),(0,r.yg)("li",{parentName:"ul"},"Este m\xf3dulo, en particular, ofrece la clase EventEmitter, que usaremos para manejar nuestros eventos."),(0,r.yg)("li",{parentName:"ul"},"Una instancia de EventEmitter expone, entre muchos otros, los m\xe9todos on y emit.",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Emit se utiliza para desencadenar un evento"),(0,r.yg)("li",{parentName:"ul"},"On se usa para agregar una funci\xf3n que se ejecutar\xe1 cuando se active el evento"))),(0,r.yg)("li",{parentName:"ul"},"Nos permiten ejecutar cierto c\xf3digo al ejecutar un evento."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/events.html"},"Documentaci\xf3n"))),(0,r.yg)("h4",{id:"1--instancia"},"1- Instancia"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"EventEmitter es una clase que se crea con Events")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'\nconst events = require("events");\nconst emitter = new events.EventEmitter();\n\n')),(0,r.yg)("h4",{id:"2--creamos-un-evento"},"2- Creamos un evento"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Para esto utilizamos el m\xe9todo on(nombre , listener)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Nombre :  Nombre del evento"),(0,r.yg)("li",{parentName:"ul"},"Listener : Es una funcion que se va a ejecutar cuando se active el nombre del evento."))),(0,r.yg)("li",{parentName:"ul"},"El listener puede tener los par\xe1metros que vos quieras.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'emitter.on("eventCustom", (mensaje, status) => {\n  console.log(mensaje, status);\n});\n\n')),(0,r.yg)("h4",{id:"3--llamamos-al-evento"},"3- Llamamos al evento"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Para esto utilizamos el m\xe9todo emit(nombre, argumentos\u2026.)",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Nombre: Es el nombre del evento que vamos a activar."),(0,r.yg)("li",{parentName:"ul"},"Argumentos\u2026: Son los valores que va a recibir el listener (a trav\xe9s de los par\xe1metros) de on()."))),(0,r.yg)("li",{parentName:"ul"},"Entonces al llamar emit() se ejecutara la funcion listener de on() del nombre-evento que  especificamos."),(0,r.yg)("li",{parentName:"ul"},"Los par\xe1metros de la funcion listener y los argumentos\u2026. deben coincidir.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'emitter.emit("eventCustom", "Mensaje", 200);\n')),(0,r.yg)("h4",{id:"ejemplo-completo"},"Ejemplo completo"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const events = require("events");\nconst emitter = new events.EventEmitter();\n\nemitter.on("eventCustom", (mensaje, status) => {\n  console.log(mensaje, status);\n});\nemitter.emit("eventCustom", "Mensaje", 200);\n\n')),(0,r.yg)("h4",{id:"heredar"},"Heredar"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Podemos hacer que se herede de otra clase.")),(0,r.yg)("h4",{id:"c\xf3digo-viejo"},"C\xf3digo viejo"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Utilizamos las ",(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v18.x/docs/api/util.html"},"utilidades de Node")),(0,r.yg)("li",{parentName:"ul"},"No se suele utilizar")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const emitter = require("events").EventEmitter;\nconst util = require("util");\nclass Persona {\n  // funcion constructora de Persona()\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n}\nutil.inherits(Persona, emitter);\n\nconst persona = new Persona("Bob");\npersona.on("hablar", (mensaje) => {\n  console.log(persona.nombre, mensaje);\n});\npersona.emit("hablar", "Este es el mensaje");\n\n')),(0,r.yg)("h4",{id:"c\xf3digo-nuevo"},"C\xf3digo nuevo"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Se suele utilizar")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const Emitter = require("events").EventEmitter;\nclass Persona extends Emitter {\n  // funcion constructora de Persona()\n  constructor(nombre) {\n    super();\n    this.nombre = nombre;\n  }\n}\n\nconst persona = new Persona("Bob");\npersona.on("hablar", (mensaje) => {\n  console.log(persona.nombre, mensaje);\n});\npersona.emit("hablar", "Este es el mensaje");\n\n')),(0,r.yg)("h4",{id:"el-objeto-eventemitter-tambi\xe9n-expone-varios-otros-m\xe9todos-para-interactuar-con-eventos"},"El objeto EventEmitter tambi\xe9n expone varios otros m\xe9todos para interactuar con eventos"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"once(): agrega un  listener de una sola vez (el listener se ejecuta solo una vez)"),(0,r.yg)("li",{parentName:"ul"},"removeListener() / off(): elimina un listener"),(0,r.yg)("li",{parentName:"ul"},"removeAllListeners(): elimina todos los listener que se agrego a un evento."),(0,r.yg)("li",{parentName:"ul"},"eventEmitter.listnersCount(): esto devuelve el n\xfamero de listener escuchando un evento."),(0,r.yg)("li",{parentName:"ul"},"Puedes leer m\xe1s sobre estos m\xe9todos en la documentacion oficial.")),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.dev/en/learn/the-nodejs-event-emitter/"},"The Node.js Event emitter")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://blog.logrocket.com/how-build-custom-node-js-event-emitters/"},"How to build custom Node.js event emitters")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.makeuseof.com/nodejs-event-emitters/"},"How to Use Event Emitters in Node.js")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/what-is-eventemitter-in-node-js/"},"What is EventEmitter in Node.js ?"))))),(0,r.yg)("h2",{id:"process"},"Process"),(0,r.yg)("p",null,"Node.js brinda la posibilidad de obtener informaci\xf3n del proceso, como la identificaci\xf3n del proceso, la arquitectura, la plataforma, la versi\xf3n, el lanzamiento, el tiempo de actividad, el uso de upu, etc. Tambi\xe9n se puede usar para eliminar procesos, establecer uid, establecer grupos, desenmascarar, etc."),(0,r.yg)("p",null,"El proceso es un objeto global, una instancia de EventEmitter, al que se puede acceder desde cualquier lugar."),(0,r.yg)("p",null,"A continuaci\xf3n se proporciona una lista de las propiedades de proceso de Node.js m\xe1s utilizadas."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Propiedad"),(0,r.yg)("th",{parentName:"tr",align:null},"Descripci\xf3n"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"arch"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve la arquitectura del proceso: 'arm', 'ia32' o 'x64'")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"args"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve argumentos(parametros) de l\xednea de comandos como una matriz")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"env"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve el entorno del usuario")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"pid"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve el ID de proceso del proceso")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"platform"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve la plataforma del proceso: 'darwin', 'freebsd', 'linux', 'sunos' o 'win32'")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"release"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve los metadatos de la versi\xf3n del node actual")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"version"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve la versi\xf3n del node")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"versions"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve la versi\xf3n del node y sus dependencias")))),(0,r.yg)("p",null,"Veamos el ejemplo de proceso simple para imprimir arquitectura, pid, plataforma y versi\xf3n del proceso."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"console.log(`Arquitectura de proceso: ${process.arch}`);\nconsole.log(`Proceso PID: ${process.pid}`);\nconsole.log(`Plataforma de proceso: ${process.platform}`);\nconsole.log(`Versi\xf3n del proceso: ${process.version}`);\n\n")),(0,r.yg)("p",null,"Veamos otro ejemplo de proceso para imprimir argumentos de l\xednea de comando . Aqu\xed, el node se considera el primer argumento, el nombre del archivo se considera el segundo argumento y los argumentos reales de la l\xednea de comandos se consideran el tercero, el cuarto, el quinto, etc."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"console.log(process.argv);\nprocess.argv.forEach((value, index, array) => {\n  console.log(`${index}: ${value}`);\n});\n\n")),(0,r.yg)("p",null,"A continuaci\xf3n, se proporciona una lista de las funciones de proceso de Node.js m\xe1s utilizadas."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Funci\xf3n"),(0,r.yg)("th",{parentName:"tr",align:null},"Descripci\xf3n"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"cwd()"),(0,r.yg)("td",{parentName:"tr",align:null},"Devuelve la ruta del directorio de trabajo actual")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"hrtime()"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve el tiempo real de alta resoluci\xf3n actual en una matriz de ","[segundos, nanosegundos]")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"memoryUsage()"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve un objeto que tiene informaci\xf3n sobre el uso de la memoria.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"process.kill(pid","[, signal]",")"),(0,r.yg)("td",{parentName:"tr",align:null},"se utiliza para matar el pid dado.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"uptime()"),(0,r.yg)("td",{parentName:"tr",align:null},"devuelve el tiempo de actividad del proceso de Node.js en segundos.")))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"console.log(`Directorio actual: ${process.cwd()}`);\nconsole.log(`Tiempo de actividad: ${process.uptime()}`);\n\n")),(0,r.yg)("p",null,"Un proceso de Node.js se inicializa con tres descriptores de archivos abiertos: stdin, stdout y stderr . Estos descriptores de archivos son b\xe1sicamente  streams."),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Pero, \xbfqu\xe9 son los streams?")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"La mejor analog\xeda de los flujos son las cintas transportadoras de una f\xe1brica. Al igual que las cintas transportadoras mueven las materias primas, los  streams manejan el flujo de datos ."),(0,r.yg)("li",{parentName:"ul"},"Si ha visitado alguna f\xe1brica, debe haber notado una red de cintas transportadoras que conectan varias m\xe1quinas. De igual forma, podemos conectar varios programas mediante streams."),(0,r.yg)("li",{parentName:"ul"},"Cada programa conectado por un  stream ejecuta una tarea particular para producir alg\xfan resultado. Podemos canalizar la salida de un programa como entrada a otro para realizar una tarea m\xe1s grande y compleja. ")))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Descriptor de archivo")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Un descriptor de archivo es un entero positivo que debe ser exclusivo en cada trabajo. El trabajo utiliza un descriptor de archivo para identificar un archivo abierto al realizar operaciones sobre el archivo."),(0,r.yg)("li",{parentName:"ul"},"Generalmente, un descriptor de archivo es una clave a una estructura de datos residente en el n\xfacleo, que contiene detalles de todos los archivos abiertos.")))),(0,r.yg)("p",null,"M\xfaltiples procesos pueden ejecutar el mismo programa. Pero cada proceso tiene su propia copia del programa."),(0,r.yg)("p",null,"Adem\xe1s, cada proceso tiene su propio espacio de direcciones y un hilo de control . Lo mismo ocurre con los flujos de E/S est\xe1ndar como stdin, stdouty stderr."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"En el contexto de un proceso, cada uno de estos flujos tiene un prop\xf3sito espec\xedfico:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"stdin es el flujo de entrada est\xe1ndar y una fuente de entrada para el programa."),(0,r.yg)("li",{parentName:"ul"},"Stdout es el flujo de salida est\xe1ndar y una fuente de salida para el programa."),(0,r.yg)("li",{parentName:"ul"},"Stderr es el flujo de error est\xe1ndar y se utiliza para los mensajes de error.")))),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Es posible que est\xe9 utilizando console.log() y console.error() para enviar datos a la consola. Debajo del cap\xf3, las instrucciones de la consola tambi\xe9n usan process.stdout y process.stderr."))),(0,r.yg)("h3",{id:"stdin-y-strdout"},"Stdin y Strdout"),(0,r.yg)("p",null,"console.log est\xe1 haciendo internamente process.stdout.write(msg + '\\n')."),(0,r.yg)("p",null,"console.log('Hola mundo') es lo mismo que process.stdout.write('Hola mundo' + '\\n')."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'process.stdin.on("data", (data) => {\n  data = data.toString().toUpperCase();\n  process.stdout.write(data + "\\n");\n});\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Ejecutar el programa anterior crea un detector de eventos para escuchar la entrada de datos, procesa la entrada e imprime la salida en la terminal."),(0,r.yg)("li",{parentName:"ul"},"Los datos ingresados, se almacenan en un buffer y por eso se deben convertir a String."),(0,r.yg)("li",{parentName:"ul"},"Podemos detener el proceso en ejecuci\xf3n en nuestra terminal presionando  ctrl + c")))),(0,r.yg)("h3",{id:"readline"},"Readline"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"readline es un m\xf3dulo de Node.js que proporciona una interfaz para leer datos de un   readable stream (como process.stdin  )  linea a linea.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const readline = require("readline");\n\n// Creamos una interfaz que conecte el input (stdin) con el output (stdout)\nconst rl = readline.createInterface({\n  // El input es donde se ingresara los datos\n  input: process.stdin,\n  //   El stdout es donde se mostraran los datos\n  output: process.stdout,\n});\n\nfunction ask(pregunta) {\n  //  Con este metodo realizamos la pregunta , esperando que el usuario ingrese algo (todo por consola).\n  //   El primer parametro es la pregunta a realizar por consola\n  //  Una vez que ingrese algo el usuario , se ejecuta la funcion del segundo parametro\n  rl.question(pregunta, (respuesta) => {\n    rl.write(`Tu nombre es:  ${respuesta}\\n`);\n    //    La linea de abajo , vuelve a ejecutar la funcion ask() para que sea un bucle\n    ask(pregunta);\n  });\n}\n\nask("Cual es tu nombre: ");\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"Ejecutar el programa anterior crear\xeda una interfaz de terminal que sigue en bucle hasta que finalicemos el proceso de Node.js presionando en la terminal.ctrl + c"))),(0,r.yg)("h3",{id:"stderr"},"Stderr"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Cuando escribimos aplicaciones o programas, pueden ocurrir errores debido a muchas razones. Stderr es el descriptor de archivo predeterminado donde un proceso puede escribir mensajes de error.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'process.stderr.write("error! some error occurred\\n");\n')),(0,r.yg)("p",null,"Ejecutar esta aplicaci\xf3n escribir\xeda el mensaje de error en nuestro terminal de manera similar a stdout."),(0,r.yg)("h3",{id:"ejemplo-2"},"Ejemplo"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'process.stdin.on("data", (data) => {\n  console.log(data);\n  const name = data.toString().trim().toUpperCase();\n  if (name !== "") {\n    process.stdout.write(`Hello ${name}`);\n  } else {\n    process.stderr.write("No input provided.");\n  }\n});\n\n')),(0,r.yg)("h4",{id:"qu\xe9-est\xe1n-haciendo-en-el-programa-anterior"},"\xbfQu\xe9 est\xe1n haciendo en el programa anterior?"),(0,r.yg)("p",null,"Primero, necesitamos decirle al programa que escuche la entrada del usuario (evento data). Esto se hace usando la funci\xf3n process.stdin.on() . Esta funci\xf3n toma el nombre del evento (datos) y una funci\xf3n. Los datos recibidos se pasan a la funci\xf3n. Cuando se active el evento (el usuario ingreso informaci\xf3n), se ejecutar\xe1 la funci\xf3n."),(0,r.yg)("p",null,"La informaci\xf3n que ingresa el usuario (data), es un buffer."),(0,r.yg)("p",null,"Dentro de la funcion , convertimos el buffer a una cadena con ToString(). Luego usamos la funcion trim() que elimina el car\xe1cter de nueva l\xednea (\\n)."),(0,r.yg)("h4",{id:"otro-ejemplo"},"Otro ejemplo"),(0,r.yg)("p",null,"Podemos usar flujos de E/S de Node.js para canalizar datos de un programa a otro en un enfoque de flujo de trabajo "),(0,r.yg)("p",null,"Para demostrar esto, crearemos dos programas: uno para generar registros y otro para almacenar los registros en un archivo"),(0,r.yg)("p",null,"El problema es que solo los registros impresos por stdout se almacenar\xe1n en un archivo. Los registros de errores se canalizan mediante el stderr y se imprimen en el terminal."),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://progressivecoder.com/wp-content/uploads/2022/12/piping-data-1536x603.png?ezimgfmt=ng:webp/ngcb1",alt:"Ca\xf1eria"})),(0,r.yg)("p",null,"Primero, crearemos el programa para generar registros."),(0,r.yg)("p",null,"logger.js"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const logObject = [\n  {\n    type: "normal",\n    message: "SUCCESS MSG 1",\n  },\n  {\n    type: "normal",\n    message: "SUCCESS MSG 2",\n  },\n  {\n    type: "error",\n    message: "ERROR!",\n  },\n  {\n    type: "normal",\n    message: "SUCCESS MSG 3",\n  },\n];\n\nfunction logger() {\n  logObject.forEach((log) => {\n    setTimeout(() => {\n      if (log.type === "normal") process.stdout.write(log.message);\n      else process.stderr.write(log.message + "\\n");\n    }, 1000);\n  });\n}\n\nlogger();\n\n')),(0,r.yg)("p",null,"Si un registro es de tipo normal, lo escribimos en process.stdout. De lo contrario, lo escribimos a stderr."),(0,r.yg)("p",null,"A continuaci\xf3n, creamos un programa que almacena los registros en un archivo"),(0,r.yg)("p",null,"store-logs.js"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n\nfs.open("./log-file.txt", "w", (err, fd) => {\n  if (err) throw Error(err.message);\n  process.stdin.on("data", (data) => {\n    fs.write(fd, data.toString() + "\\\\n", (err) => {\n      if (err) throw Error(err.message);\n    });\n  });\n});\n\n')),(0,r.yg)("p",null,"Despu\xe9s de abrir un archivo en modo de escritura, utilizamos el flujo de entrada process.stdin para recibir los mensajes de registro entrantes y escribirlos en el archivo."),(0,r.yg)("p",null,"En la consola , lo ejecutamos:  "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-powershell"},"node logger.js | node store-logs.js\n")),(0,r.yg)("p",null,"Los registros normales se escriben en el archivo, mientras que los registros de errores se canalizan a trav\xe9s del descriptor stderr de archivo y se imprimen en el terminal. Esto es seg\xfan el comportamiento est\xe1ndar de stderr."),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.javatpoint.com/nodejs-process"},"Node.js Process")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.knowledgehut.com/blog/web-development/nodejs-process"},"Node JS Process: Process Module in Node JS")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://progressivecoder.com/the-many-uses-of-nodejs-stdin-stdout-and-stderr/"},"The Many Uses of Node.js stdin, stdout and stderr")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://blog.logrocket.com/using-stdout-stdin-stderr-node-js/"},"Using stdout, stdin, and stderr in Node.js"))))))}u.isMDXComponent=!0}}]);