"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[8814],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>u});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=o.createContext({}),d=function(e){var a=o.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=d(e.components);return o.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=t,g=m["".concat(i,".").concat(u)]||m[u]||p[u]||r;return n?o.createElement(g,l(l({ref:a},c),{},{components:n})):o.createElement(g,l({ref:a},c))}));function u(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,l[1]=s;for(var d=2;d<r;d++)l[d]=n[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8133:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(7462),t=(n(7294),n(3905));const r={sidebar_position:3},l="Objeto",s={unversionedId:"Javascript/objeto",id:"Javascript/objeto",title:"Objeto",description:"-\tJavaScript est\xe1 dise\xf1ado en un paradigma simple basado en objetos.",source:"@site/docs/Javascript/objeto.md",sourceDirName:"Javascript",slug:"/Javascript/objeto",permalink:"/documentacion/docs/Javascript/objeto",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Javascript/objeto.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"Javascript",previous:{title:"JavaScript Basico 2",permalink:"/documentacion/docs/Javascript/basico-2"},next:{title:"DOM",permalink:"/documentacion/docs/Javascript/DOM"}},i={},d=[{value:"A tener en cuenta",id:"a-tener-en-cuenta",level:3},{value:"Objeto Literal",id:"objeto-literal",level:2},{value:"Acceder a los valores",id:"acceder-a-los-valores",level:2},{value:"CRUD (propiedades)",id:"crud-propiedades",level:2},{value:"Los CRUD los podes hacer con el punto (.) o con los corchetes ([]).",id:"los-crud-los-podes-hacer-con-el-punto--o-con-los-corchetes-",level:3},{value:"Leer (read)",id:"leer-read",level:3},{value:"Crear (create)",id:"crear-create",level:3},{value:"Actualizar (update)",id:"actualizar-update",level:3},{value:"Eliminar (delete)",id:"eliminar-delete",level:3},{value:"hasOwnProperty",id:"hasownproperty",level:2},{value:"Objetos anidados",id:"objetos-anidados",level:2},{value:"Encadenamiento opcional",id:"encadenamiento-opcional",level:2},{value:"Propiedades",id:"propiedades",level:2},{value:"metodos",id:"metodos",level:3},{value:"Metodos",id:"metodos-1",level:2},{value:"Abreviacion",id:"abreviacion",level:3},{value:"Ambito (Scope)",id:"ambito-scope",level:2},{value:"This",id:"this",level:2},{value:"Scope de una funci\xf3n",id:"scope-de-una-funci\xf3n",level:4},{value:"Scope  de una clase",id:"scope--de-una-clase",level:4},{value:"Contexto global",id:"contexto-global",level:4},{value:"arrow function",id:"arrow-function",level:2},{value:"Recorrer un objeto",id:"recorrer-un-objeto",level:2},{value:"for in",id:"for-in",level:3},{value:"Object.values()",id:"objectvalues",level:2},{value:"Existen mas metodos",id:"existen-mas-metodos",level:2},{value:"Destructuring Objects",id:"destructuring-objects",level:2},{value:"Objeto",id:"objeto-1",level:3},{value:"Desestructuraci\xf3n en otra desestructuraci\xf3n",id:"desestructuraci\xf3n-en-otra-desestructuraci\xf3n",level:4},{value:"Alias:",id:"alias",level:4},{value:"Por defecto:",id:"por-defecto",level:4},{value:"Array",id:"array",level:3},{value:"Getters y Setters",id:"getters-y-setters",level:2},{value:"GET",id:"get",level:3},{value:"SET",id:"set",level:3},{value:"por valor vs por referencia",id:"por-valor-vs-por-referencia",level:2},{value:"por valor",id:"por-valor",level:3},{value:"por referencia",id:"por-referencia",level:3}],c={toc:d};function p(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"objeto"},"Objeto"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"JavaScript est\xe1 dise\xf1ado en un paradigma simple basado en objetos."),(0,t.kt)("li",{parentName:"ul"},"Un objeto es una colecci\xf3n de propiedades, y una propiedad es una asociaci\xf3n entre una clave(nombre)  y un valor. (CLAVE Y VALOR)"),(0,t.kt)("li",{parentName:"ul"},"El valor de una propiedad puede ser una funci\xf3n, en cuyo caso la propiedad es conocida como un m\xe9todo."),(0,t.kt)("li",{parentName:"ul"},"Adem\xe1s de los objetos que est\xe1n predefinidos en el navegador, puedes definir tus propios objetos."),(0,t.kt)("li",{parentName:"ul"},"Los objetos son similares a los arreglos (arrays), excepto que en lugar de usar \xedndices para acceder y modificar sus datos, accedes a los datos en objetos a trav\xe9s de propiedades (properties).",(0,t.kt)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},"Se podria decir que la propiedad es la clave"))))),(0,t.kt)("h3",{id:"a-tener-en-cuenta"},"A tener en cuenta"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Se puede utilizar el  punto o  los corchetes para  manipular las propiedades de un objeto."),(0,t.kt)("li",{parentName:"ul"},"Con los corchetes podes usar variables , espacios en blancos , caracteres especiales , etc")),(0,t.kt)("h2",{id:"objeto-literal"},"Objeto Literal"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Se denomina objeto literal al objeto cuyas propiedades est\xe1n declaradas textualmente en el c\xf3digo."),(0,t.kt)("li",{parentName:"ul"},"En el c\xf3digo esta todas las propiedades y valores.")),(0,t.kt)("p",null,"{}  = Objeto"),(0,t.kt)("p",null,"Los :  (dos puntos)  sirven para asignar el valor"),(0,t.kt)("p",null,"Para poner mas propiedades, lo separas con , (coma)."),(0,t.kt)("p",null,"Las propiedades pueden contener cualquier tipo de dato."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"]\n}\n\nconsole.log(gato);\n\n')),(0,t.kt)("h2",{id:"acceder-a-los-valores"},"Acceder a los valores"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"con el . (punto).")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"\nconsole.log(gato.nombre);\n\nconsole.log(gato.enemigos[0]);\n\n")),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},"con el ","[\u201cpropiedad\u201d]"," (corchetes y comilla)")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'console.log(gato["nombre"]);\n\n console.log(gato["enemigos"][0]);\n\n')),(0,t.kt)("h2",{id:"crud-propiedades"},"CRUD (propiedades)"),(0,t.kt)("h3",{id:"los-crud-los-podes-hacer-con-el-punto--o-con-los-corchetes-"},"Los CRUD los podes hacer con el punto (.) o con los corchetes ([])."),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},"Con los corchetes podes usar variables , espacios en blancos , caracteres especiales , etc")),(0,t.kt)("p",{parentName:"div"},"objeto","[variable]",' = "valor";'))),(0,t.kt)("h3",{id:"leer-read"},"Leer (read)"),(0,t.kt)("p",null,"Visto (Anterior)."),(0,t.kt)("h3",{id:"crear-create"},"Crear (create)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const gato = {\n    nombre: 'Valiente',\n    duerme: true,\n    edad: 10,\n    enemigos: [\"agua\", \"perros\"]\n}\ngato.color = 'Azul'\nconsole.log(gato);\n\n")),(0,t.kt)("h3",{id:"actualizar-update"},"Actualizar (update)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"]\n}\ngato.edad = 5;\nconsole.log(gato);\n\n')),(0,t.kt)("h3",{id:"eliminar-delete"},"Eliminar (delete)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"]\n}\n delete gato.duerme;\nconsole.log(gato);\n\n')),(0,t.kt)("h2",{id:"hasownproperty"},"hasOwnProperty"),(0,t.kt)("p",null,"A veces es \xfatil comprobar si existe o no la propiedad de un objeto dado. Podemos utilizar el m\xe9todo hasOwnProperty(propname) para determinar si un objeto tiene una propiedad con ese nombre ."),(0,t.kt)("p",null," Parametro  = El nombre de la propiedad a buscar"),(0,t.kt)("p",null," hasOwnProperty() devuelve true o false si se encuentra la propiedad o no."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'\nconst gato = {\n   nombre: \'Valiente\',\n   duerme: true,\n   edad: 10,\n   enemigos: ["agua", "perros"]\n}\nconsole.log(gato.hasOwnProperty("edad"))\nconsole.log(gato.hasOwnProperty("salud"))\n\n')),(0,t.kt)("h2",{id:"objetos-anidados"},"Objetos anidados"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"la propiedad otros es otro objeto"),(0,t.kt)("li",{parentName:"ul"},"la propiedad favoritos es otro objeto"),(0,t.kt)("li",{parentName:"ul"},"la propiedad comida es otro objeto")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    otros: {\n        amigos: ["Cobarde", "T\xedmido", "Pegajoso"],\n        favoritos: {\n            comida: {\n                fria: "salm\xf3n",\n                caliente: "pollo"\n            }\n        }\n    }\n}\nconsole.log(gato);\n\n')),(0,t.kt)("p",null,"\u2003\nAcceder a salmon:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"console.log(gato.otros.favoritos.comida.fria)\n")),(0,t.kt)("p",null,"Acceder a cobarde:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"console.log(gato.otros.amigos[0])\n")),(0,t.kt)("h2",{id:"encadenamiento-opcional"},"Encadenamiento opcional"),(0,t.kt)("p",null," El operador de encadenamiento opcional ?. permite leer el valor de una propiedad ubicada dentro de una cadena de objetos conectados sin tener que validar expresamente que cada referencia en la cadena sea v\xe1lida."),(0,t.kt)("p",null,"Ignora el error si escribiste mal el nombre del objeto dentro de un objeto."),(0,t.kt)("p",null,"Devuelve undefined si no existe la propiedad."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"console.log(gato.otros?.favorito);\n")),(0,t.kt)("h2",{id:"propiedades"},"Propiedades"),(0,t.kt)("p",null,"Lenght es una propiedad del array ."),(0,t.kt)("p",null,"Las propiedades no llevan par\xe9ntesis."),(0,t.kt)("p",null,"El array es un objeto"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'\nconst amigos =  ["Cobarde", "T\xedmido", "Pegajoso"];\n\nconsole.log(amigos.length);\n\n\n\n')),(0,t.kt)("h3",{id:"metodos"},"metodos"),(0,t.kt)("p",null,"push() es un m\xe9todo del array ."),(0,t.kt)("p",null,"Como lleva par\xe9ntesis es un m\xe9todo."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const amigos =  ["Cobarde", "T\xedmido", "Pegajoso"];\n\nconsole.log(amigos.push());\n\n')),(0,t.kt)("h2",{id:"metodos-1"},"Metodos"),(0,t.kt)("p",null,"Es una funcion dentro del objeto"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const gato = {\n    nombre: 'Valiente',\n    duerme: true,\n    edad: 10,\n    enemigos: [\"agua\", \"perros\"] , \n    // Creando el metodo\n    comer: function() {\n        console.log('gato comiendo');\n    }\n   \n}\n// LLamando al metodo\ngato.comer();\n\n")),(0,t.kt)("h3",{id:"abreviacion"},"Abreviacion"),(0,t.kt)("p",null,"En lugar de : (dos puntos) , colocar los ()(parentesis)  y {} (llaves)"),(0,t.kt)("p",null,"La palabra function se borra"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"const gato = {\n    nombre: 'Valiente',\n    duerme: true,\n    edad: 10,\n    enemigos: [\"agua\", \"perros\"] , \n    // Creando el metodo\n    comer()  {\n        console.log('gato comiendo');\n    }\n   \n}\n// LLamando al metodo\ngato.comer();\n\n")),(0,t.kt)("p",null,"El metodo puede recibir parametros:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},' const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"] , \n    // Creando el metodo\n    comer(alimento)  {\n        console.log(\'gato comiendo  \' + alimento);\n    }\n   \n}\n// LLamando al metodo\ngato.comer("pez");\n\n')),(0,t.kt)("h2",{id:"ambito-scope"},"Ambito (Scope)"),(0,t.kt)("p",null,"Este c\xf3digo no funciona porque ${nombre} hace referencia al \xe1mbito global (afuera de las llaves {})(afuera del objeto)."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'\nconst gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"] , \n    // Creando el metodo\n    comer(alimento)  {\n        console.log(` ${nombre} esta comiendo ${alimento}`);\n    }\n   \n}\n// LLamando al metodo\ngato.comer("pez");\n\n')),(0,t.kt)("p",null,"Para solucionarlo hay dos manera"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Acceder desde el objeto mismo:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"] , \n    // Creando el metodo\n    comer(alimento)  {\n        console.log(` ${gato.nombre} esta comiendo ${alimento}`);\n    }\n   \n}\n// LLamando al metodo\ngato.comer("pez");\n\n')),(0,t.kt)("ol",{start:2},(0,t.kt)("li",{parentName:"ol"},"Usando el this")),(0,t.kt)("h2",{id:"this"},"This"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Hace referencia al scope que se est\xe1 utilizando."),(0,t.kt)("li",{parentName:"ul"},"Hace referencia al objeto en el cual est\xe1 ubicado.")),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"THIS")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},"El this se queda en el \xe1mbito/scope/en el bloque  "),(0,t.kt)("li",{parentName:"ul"},"Sube un nivel como m\xe1ximo (un bloque arriba )"),(0,t.kt)("li",{parentName:"ul"},"Podes hacer una variable llamada self  que contenga el valor de  this para tener acceso al objeto en sub funciones")))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n   nombre: \'Valiente\',\n   duerme: true,\n   edad: 10,\n   enemigos: ["agua", "perros"] , \n   // Creando el metodo\n   comer(alimento)  {\n       console.log(` ${this.nombre} esta comiendo ${alimento}`);\n   }\n  \n}\n// LLamando al metodo\ngato.comer("pez");\n\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"En JavaScript, la palabra clave this se refiere a un objeto (contiene la referencia de un objeto)"),(0,t.kt)("li",{parentName:"ul"},"Se refiere a diferentes objetos dependiendo de donde se use:")),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",{parentName:"tr",align:null},"Contexto"),(0,t.kt)("th",{parentName:"tr",align:null},"Valor de This"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"En un m\xe9todo de un objeto"),(0,t.kt)("td",{parentName:"tr",align:null},"Se refiere al objeto")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"En un \xe1mbito/scope global"),(0,t.kt)("td",{parentName:"tr",align:null},"Se refiere al objeto window")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"En una funcion en modo estricto"),(0,t.kt)("td",{parentName:"tr",align:null},"Es undefined")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},"En un evento"),(0,t.kt)("td",{parentName:"tr",align:null},"Se refiere al elemento que recibi\xf3 el evento")))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El valor de this depende del contexto/scope en el que aparece: funci\xf3n, clase o global.")),(0,t.kt)("h4",{id:"scope-de-una-funci\xf3n"},"Scope de una funci\xf3n"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El valor de this es el objeto que invoca la funci\xf3n.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'  const objeto = {\n      color : "verde" ,\n      tama\xf1o: "XL" ,\n      obtenerThis(){\n        console.log(this);\n      }\n\n    }\n    // This = Objeto\n    objeto.obtenerThis();\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},"El valor de this es el objeto que se usa para llamar a la funcion."))),(0,t.kt)("h4",{id:"scope--de-una-clase"},"Scope  de una clase"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El valor de this es la \u201cnueva instancia\u201d que se crea."),(0,t.kt)("li",{parentName:"ul"},"El valor de this es el objeto en el que se accedi\xf3 al m\xe9todo."),(0,t.kt)("li",{parentName:"ul"},"Los m\xe9todos est\xe1ticos no son propiedades de this. Son propiedades de la clase misma. Por lo tanto, se podr\xeda decir que this es una subclase."),(0,t.kt)("li",{parentName:"ul"},"This se utiliza para inicializar/crear las propiedades-valores de la \u201cnueva instancia\u201d, en la funci\xf3n constructor.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'      class Letra {\n     constructor(letra) {\n      this.letra = letra;\n     }\n}\n\nconst c = new Letra("C");\nconsole.log(c.letra)\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},"Con el constructor, estamos creando la propiedad letra en la nueva instancia."))),(0,t.kt)("h4",{id:"contexto-global"},"Contexto global"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"En el contexto/scope de ejecuci\xf3n global (fuera de cualquier funci\xf3n o clase; puede estar dentro de bloques o funciones de flecha definidas en el \xe1mbito global) , this tiene la referencia del objeto window (objeto global) .")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"   console.log(this);\n")),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},(0,t.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#try_it"},"info")))),(0,t.kt)("h2",{id:"arrow-function"},"arrow function"),(0,t.kt)("p",null,"Funciona pero No tiene this o super y no se debe usarla como m\xe9todos."),(0,t.kt)("p",null,"Da como undefined ya que la funci\xf3n flecha no tiene this."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'\nconst gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer: (comida) => {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n};\n\nconsole.log(gato.comer("pez"));\n\n')),(0,t.kt)("p",null,"Pero si puedo utilizarla (funcion flecha) en su interior:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer(comida) {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n    listarEnemigos() {\n      this.enemigos.forEach((item) => console.log(item));\n    },\n};\n\ngato.listarEnemigos();\n\n')),(0,t.kt)("h2",{id:"recorrer-un-objeto"},"Recorrer un objeto"),(0,t.kt)("h3",{id:"for-in"},"for in"),(0,t.kt)("p",null,"La instrucci\xf3n for-in itera sobre todas las propiedades enumerables de un objeto que est\xe1 codificado por cadenas"),(0,t.kt)("p",null,"Recorrer el nombre de todas las propiedades:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer(comida) {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n    listarEnemigos() {\n      this.enemigos.forEach((item) => console.log(item));\n    },\n};\n\nfor (let propiedad in gato) {\n    console.log(propiedad);\n}\n\n')),(0,t.kt)("p",null,"Para poner los valores:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Se utiliza los corchetes."),(0,t.kt)("li",{parentName:"ul"},"No funciona con el punto.")),(0,t.kt)("p",null,"Recorrer los valores de las propiedades:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer(comida) {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n    listarEnemigos() {\n      this.enemigos.forEach((item) => console.log(item));\n    },\n};\n\nfor (let propiedad in gato) {\n    console.log(gato[propiedad]);\n}\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},"\xbfPor qu\xe9 usar for...in?\n\u2022\tDado que for...in est\xe1 construido para iterar propiedades de objeto, no se recomienda su uso con arreglos y opciones como Array.prototype.forEach() y existe for...of, \xbfcu\xe1l podr\xeda ser el uso de for...in?"),(0,t.kt)("p",{parentName:"div"},"\u2022\tEs posible que se utilice de forma m\xe1s pr\xe1ctica con fines de depuraci\xf3n, ya que es una forma f\xe1cil de comprobar las propiedades de un objeto (mediante la salida a la consola o de otro modo)"),(0,t.kt)("p",{parentName:"div"},'\u2022\tAunque los arreglos suelen ser m\xe1s pr\xe1cticos para almacenar datos, en situaciones en las que se prefiere un par clave-valor para trabajar con datos (con propiedades que act\xfaan como la "clave"), puede haber casos en los que desees comprobar si alguna de esas claves cumple un valor particular.'))),(0,t.kt)("h2",{id:"objectvalues"},"Object.values()"),(0,t.kt)("p",null,"devuelve un array con los valores correspondientes a las propiedades enumerables de un objeto."),(0,t.kt)("p",null,"1 parametro = el objeto en cuesti\xf3n"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer(comida) {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n    listarEnemigos() {\n      this.enemigos.forEach((item) => console.log(item));\n    },\n};\n\nconsole.log(Object.values(gato));\n\n')),(0,t.kt)("p",null,"Si lo combinamos con forEach:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"Object.values(gato).forEach((item) => console.log(item)); \n")),(0,t.kt)("h2",{id:"existen-mas-metodos"},"Existen mas metodos"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"},"Object.entries()")),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"},"Object.key()")),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"},"Object.getOwnPropertyNames()")),(0,t.kt)("h2",{id:"destructuring-objects"},"Destructuring Objects"),(0,t.kt)("p",null,"La sintaxis de desestructuraci\xf3n es una expresi\xf3n de JavaScript que permite desempacar valores de arreglos o propiedades de objetos en distintas variables."),(0,t.kt)("p",null,"Almacenar valores de elementos de arreglos/propiedades de objetos en distintas variables para su posterior uso."),(0,t.kt)("p",null,"Funciona tanto en objeto como en array."),(0,t.kt)("h3",{id:"objeto-1"},"Objeto"),(0,t.kt)("p",null,"Ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n   \n};\n\nconst nombre = gato.nombre;\nconsole.log(nombre);\n\n')),(0,t.kt)("p",null,"Pero hay una manera mejor:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n   \n};\n\n //creando const nombre = gato.nombre , const duerme = gato.duerme , ...\nconst {nombre , duerme , edad} = gato;\nconsole.log(nombre , duerme , edad);\n\n')),(0,t.kt)("p",null,"Otro ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    otros: {\n        amigos: ["Cobarde", "T\xedmido", "Pegajoso"],\n        favoritos: {\n            comida: {\n                fria: "salm\xf3n",\n                caliente: "pollo"\n            }\n        }\n    }\n}\n\n// const amigos = array amigos\nconst {amigos} = gato.otros;\nconsole.log(amigos);\n\n')),(0,t.kt)("h4",{id:"desestructuraci\xf3n-en-otra-desestructuraci\xf3n"},"Desestructuraci\xf3n en otra desestructuraci\xf3n"),(0,t.kt)("p",null,"Una desestructuraci\xf3n del objeto otros."),(0,t.kt)("p",null,"Otra manera de conseguir el array amigos:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"// const amigos = array amigos\nconst {otros: {amigos}} = gato;\nconsole.log(amigos);\n\n")),(0,t.kt)("h4",{id:"alias"},"Alias:"),(0,t.kt)("p",null,"Para poner un nuevo nombre a la variable"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"}," //creando const nombreGato = gato.nombre , const duerme = gato.duerme , ...\nconst {nombre : nombreGato, duerme , edad} = gato;\nconsole.log(nombreGato , duerme , edad);\n\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"// const amigosGatos = array amigos\nconst {otros: {amigos : amigosGatos}} = gato;\nconsole.log(amigosGatos);\n\n")),(0,t.kt)("h4",{id:"por-defecto"},"Por defecto:"),(0,t.kt)("p",null,"Si la propiedad no existe, podemos poner un valor por defecto."),(0,t.kt)("p",null,"Ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    //nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n   \n};\n\nconst {nombre  = "sin nombre", duerme , edad} = gato;\nconsole.log(nombre , duerme , edad);\n// nombre = "sin nombre"\n\n')),(0,t.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("p",{parentName:"div"},"No se puede destructurar un m\xe9todo que tiene el this."),(0,t.kt)("p",{parentName:"div"},"Pasa lo mismo que con las funciones flecha , da undefined"))),(0,t.kt)("p",null,"Destructurar un metodo con el this: (Tira undefined)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    comer(comida) {\n        return `${this.nombre} est\xe1 comiendo ${comida}`;\n    },\n    mostrarEnemigos() {\n        return this.enemigos.forEach((item) => console.log(item));\n    },\n};\n\nconst {comer} = gato\nconsole.log(comer("pez"));\n\n')),(0,t.kt)("h3",{id:"array"},"Array"),(0,t.kt)("p",null,"Aca se respetan los indices . "),(0,t.kt)("p",null,"No se puede desestructurar el indice 3 si todavia no se desestructuro el  1 y el 2."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: \'Valiente\',\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    otros: {\n        amigos: ["Cobarde", "T\xedmido", "Pegajoso"],\n        favoritos: {\n            comida: {\n                fria: "salm\xf3n",\n                caliente: "pollo"\n            }\n        }\n    }\n}\n\nconst {amigos} = gato.otros;\n// const amigoUno = Cobarde , const amigoDos = "Timido"\nconst [amigoUno,amigoDos] = amigos;\nconsole.log(amigoDos);\n\n')),(0,t.kt)("h2",{id:"getters-y-setters"},"Getters y Setters"),(0,t.kt)("p",null,"Son otras propiedades de los objetos"),(0,t.kt)("h3",{id:"get"},"GET"),(0,t.kt)("p",null,"Enlaza la propiedad de un objeto con una funci\xf3n que ser\xe1 llamada cuando la propiedad es buscada. Nos permite tener acceso al valor de una propiedad"),(0,t.kt)("p",null,"Tenga en cuenta lo siguiente al trabajar con la sintaxis get:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Debe tener exactamente cero parametros."),(0,t.kt)("li",{parentName:"ul"},"No debe haber m\xfaltiples getters para una misma propiedad."),(0,t.kt)("li",{parentName:"ul"},"No se necesita los parentesis al invocar al metodo"),(0,t.kt)("li",{parentName:"ul"},"Se invoca como si fuera una propiedad")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'    const gato = {\n        nombre: "Valiente",\n        duerme: true,\n        edad: 10,\n        enemigos: ["agua", "perros"],\n        // Creamos un get\n        get nombreMayuscula() {\n            return this.nombre.toUpperCase();\n        }\n       \n    };\n    // Llamamos al get\n    console.log(gato.nombreMayuscula);\n\n')),(0,t.kt)("h3",{id:"set"},"SET"),(0,t.kt)("p",null,"La sintaxis set asocia la propiedad de un objeto a una funci\xf3n que ser\xe1 llamada cuando haya un intento de asignar valor a esa propiedad. "),(0,t.kt)("p",null,"Nos permite modificar el valor de una propiedad"),(0,t.kt)("p",null,"Nos permite a\xf1adir un valor a una propiedad."),(0,t.kt)("p",null,"Tenga en cuenta lo siguiente al trabajar con setters:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Debe tener exactamente un par\xe1mentro"),(0,t.kt)("li",{parentName:"ul"},"El metodo al invocarlo se utiliza el signo igual(=) en lugar de los parentesis"),(0,t.kt)("li",{parentName:"ul"},"Lo que va luego del signo igual(=) seria el parametro")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const gato = {\n    nombre: "Valiente",\n    duerme: true,\n    edad: 10,\n    enemigos: ["agua", "perros"],\n    // Creamos un get\n    get nombreMayuscula() {\n        return this.nombre.toUpperCase();\n    },\n    // Creamos un set\n    set agregarEnemigo(enemigo) {\n        this.enemigos.push(enemigo);\n    }\n   \n};\n// Llamamos al set\ngato.agregarEnemigo = "batman";\nconsole.log(gato);\n\n')),(0,t.kt)("h2",{id:"por-valor-vs-por-referencia"},"por valor vs por referencia"),(0,t.kt)("h3",{id:"por-valor"},"por valor"),(0,t.kt)("p",null,"Cuando asignamos valores primitivos (Boolean, Null, Undefined, Number, String y Symbol), el valor asignado es una copia del valor que estamos asignando."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'let a = "hola";\nlet b = a;\nconsole.log(b);\n//Si cambiamos el valor de a, b sigue siendo "hola"\na = "chao";\nconsole.log(b);\n\n')),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://bluuweb.github.io/desarrollo-web-bluuweb/img/valor.png",alt:"por valor"})),(0,t.kt)("h3",{id:"por-referencia"},"por referencia"),(0,t.kt)("p",null,"Pero cuando asignamos valores NO primitivos o complejos (Object, Array y Function), JavaScript copia \u201cla referencia\u201d, lo que implica que no se copia el valor en s\xed, si no una referencia a trav\xe9s de la cual accedemos al valor original."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'let a = ["hola"];\nlet b = a;\n\na.push("chao");\n\nconsole.log(b);\n\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'const a = {\n    nombre: "hola",\n};\n\nconst b = a;\n\na.nombre = "chao";\n\nconsole.log(b);\n\n\n')),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://bluuweb.github.io/desarrollo-web-bluuweb/img/valor-2.png",alt:"por referencia"})))}p.isMDXComponent=!0}}]);