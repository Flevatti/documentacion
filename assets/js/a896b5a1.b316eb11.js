"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[2929],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>p});var i=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,i,n=function(e,a){if(null==e)return{};var t,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=i.createContext({}),c=function(e){var a=i.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=c(e.components);return i.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},d=i.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),p=n,g=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return t?i.createElement(g,r(r({ref:a},m),{},{components:t})):i.createElement(g,r({ref:a},m))}));function p(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6356:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(7462),n=(t(7294),t(3905));const o={},r="Comandos de Git",l={unversionedId:"Git/comandosGit",id:"Git/comandosGit",title:"Comandos de Git",description:"Git init",source:"@site/docs/Git/comandosGit.md",sourceDirName:"Git",slug:"/Git/comandosGit",permalink:"/documentacion/docs/Git/comandosGit",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Git/comandosGit.md",tags:[],version:"current",frontMatter:{},sidebar:"Git",previous:{title:"CMD VS  POWERSHELL",permalink:"/documentacion/docs/Git/comando"}},s={},c=[{value:"Git init",id:"git-init",level:2},{value:"Git add",id:"git-add",level:2},{value:"Git commit",id:"git-commit",level:2},{value:"Git push",id:"git-push",level:2},{value:"Ejemplo con la opci\xf3n --set-upstream",id:"ejemplo-con-la-opci\xf3n---set-upstream",level:4},{value:"Diferencia con git branch",id:"diferencia-con-git-branch",level:4},{value:"Git fetch y pull",id:"git-fetch-y-pull",level:2},{value:"Fetch",id:"fetch",level:4},{value:"Pull",id:"pull",level:4},{value:"Pull con rebase",id:"pull-con-rebase",level:4},{value:"Pull con merge",id:"pull-con-merge",level:4},{value:"Git checkout",id:"git-checkout",level:2},{value:"Commit espec\xedfico",id:"commit-espec\xedfico",level:4},{value:"Rama existente",id:"rama-existente",level:4},{value:"Rama nueva",id:"rama-nueva",level:4},{value:"Rama nueva o Reiniciar una rama a un punto de partida",id:"rama-nueva-o-reiniciar-una-rama-a-un-punto-de-partida",level:4},{value:"Forzar un checkout",id:"forzar-un-checkout",level:4},{value:"Deshacer los cambios en tu Directorio de trabajo",id:"deshacer-los-cambios-en-tu-directorio-de-trabajo",level:4},{value:"Git rebase y merge",id:"git-rebase-y-merge",level:2},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Diferencia de los commits:",id:"diferencia-de-los-commits",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Para seguir explicando rebase",id:"para-seguir-explicando-rebase",level:4},{value:"Rebase",id:"rebase",level:4},{value:"No rebases la historia p\xfablica",id:"no-rebases-la-historia-p\xfablica",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:4},{value:"Merge",id:"merge",level:4},{value:"Fusi\xf3n de avance r\xe1pido",id:"fusi\xf3n-de-avance-r\xe1pido",level:4},{value:"Fusi\xf3n de 3 v\xedas",id:"fusi\xf3n-de-3-v\xedas",level:4},{value:"Git switch y restore",id:"git-switch-y-restore",level:2},{value:"Git restore",id:"git-restore",level:4},{value:"Git switch",id:"git-switch",level:4},{value:"git reflog",id:"git-reflog",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"Git reflog vs git log",id:"git-reflog-vs-git-log",level:4},{value:"Git reset",id:"git-reset",level:2},{value:"Git stash",id:"git-stash",level:2},{value:"git diff",id:"git-diff",level:2},{value:"git rm",id:"git-rm",level:2},{value:"git revert",id:"git-revert",level:2},{value:"git clone",id:"git-clone",level:2},{value:"git request-pull",id:"git-request-pull",level:2},{value:"git remote",id:"git-remote",level:2},{value:"git branch",id:"git-branch",level:2},{value:"Comandos para ver informaci\xf3n",id:"comandos-para-ver-informaci\xf3n",level:2},{value:"Git version o Git --version",id:"git-version-o-git---version",level:4},{value:"Git help",id:"git-help",level:4},{value:"Git status -s",id:"git-status--s",level:4},{value:"Git log --oneline",id:"git-log---oneline",level:4}],m={toc:c};function u(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,i.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"comandos-de-git"},"Comandos de Git"),(0,n.kt)("h2",{id:"git-init"},"Git init"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Inicializa un repositorio."),(0,n.kt)("li",{parentName:"ul"},"Ejecutar este comando crea el subdirectorio. git en el  directorio en el que se ejecuta (el  directorio del proyecto); no se agregan ni cambian archivos que no sean en el subdirectorio .git"),(0,n.kt)("li",{parentName:"ul"},"Dentro del directorio .git se crean todos los metadatos que necesita Git (branch de default, objetos, referencias, archivos template\u2026)."),(0,n.kt)("li",{parentName:"ul"},"Cuando ejecutas git init, Git crea una estructura de directorios y archivos en la ubicaci\xf3n actual para comenzar a rastrear los cambios en el proyecto."),(0,n.kt)("li",{parentName:"ul"},"La mayor\xeda de los comandos de Git est\xe1n disponibles solo cuando se ejecutan dentro de un repositorio inicializado."),(0,n.kt)("li",{parentName:"ul"},"Es importante mencionar que git init se usa generalmente solo una vez al principio del proyecto, cuando se desea iniciar el seguimiento de versiones con Git. Si ya existe un repositorio Git (por ejemplo, si clonaste uno existente con git clone), no necesitas usar git init."),(0,n.kt)("li",{parentName:"ul"},"Obviamente, es posible inicializar un  directorio diferente al actual indicando la ruta:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git init /path/to/project/directory\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Como alternativa, puedes crear un repositorio dentro de un nuevo directorio especificando el nombre del proyecto:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git init [nombre del proyecto]\n")),(0,n.kt)("h2",{id:"git-add"},"Git add"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A\xf1ade archivos al \xedndice (almacenamiento provisional)."),(0,n.kt)("li",{parentName:"ul"},"El indice es una lista de archivos que se van a a\xf1adir en la pr\xf3xima confirmaci\xf3n (commit)."),(0,n.kt)("li",{parentName:"ul"},"Le dice a Git que desea incluir las actualizaciones de un archivo en particular en la pr\xf3xima confirmaci\xf3n. Sin embargo, git add no afecta al repositorio de ninguna manera significativa."),(0,n.kt)("li",{parentName:"ul"},'El "\xedndice" contiene una instant\xe1nea del contenido del \xe1rbol de trabajo, y es esta instant\xe1nea la que se toma como contenido de la siguiente confirmaci\xf3n. Por lo tanto, despu\xe9s de realizar cambios en el \xe1rbol de trabajo y antes de ejecutar el comando de confirmaci\xf3n, debe utilizar el ',(0,n.kt)("strong",{parentName:"li"},"comando add")," para agregar archivos nuevos o modificados al \xedndice."),(0,n.kt)("li",{parentName:"ul"},"Este comando se puede realizar varias veces antes de una confirmaci\xf3n. "),(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git status")," se puede utilizar para obtener un resumen de qu\xe9 archivos tienen cambios ."),(0,n.kt)("li",{parentName:"ul"},"El  comando ",(0,n.kt)("strong",{parentName:"li"},"git add")," no agregar\xe1 archivos ignorados de forma predeterminada. Si alg\xfan archivo ignorado se especific\xf3 expl\xedcitamente en la l\xednea de comando, git add fallar\xe1."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-add"},"Git add"))),(0,n.kt)("h2",{id:"git-commit"},"Git commit"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'Crea un registro de los "cambios especificados en el \xedndice" en el repositorio.'),(0,n.kt)("li",{parentName:"ul"},"Realiza una instant\xe1nea con los archivos que se encuentran en el \xedndice."),(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git commit")," guardar\xe1 todos los cambios que est\xe1n registrados en la zona de almacenamiento provisional (staging \xe1rea que en espa\xf1ol seria zona de montaje o \xe1rea de preparaci\xf3n), junto con una breve descripci\xf3n del usuario, en el repositorio local."),(0,n.kt)("li",{parentName:"ul"},'Las instant\xe1neas confirmadas pueden considerarse como versiones "seguras" de un proyecto: Git no las cambiar\xe1 nunca a no ser que se lo pidas expresamente.'),(0,n.kt)("li",{parentName:"ul"},"Puedes pensar en un commit como una captura de tu proyecto, donde se crea una nueva versi\xf3n de ese proyecto en el repositorio actual."),(0,n.kt)("li",{parentName:"ul"},"Crea una nueva confirmaci\xf3n que contenga el contenido del \xedndice y un mensaje de confirmaci\xf3n."),(0,n.kt)("li",{parentName:"ul"},"Una confirmaci\xf3n representa una versi\xf3n espec\xedfica del \xe1rbol de trabajo(proyecto)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-commit"},"git commit"))),(0,n.kt)("h2",{id:"git-push"},"Git push"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git push")," en Git se utiliza para enviar cambios locales a un repositorio remoto."),(0,n.kt)("li",{parentName:"ul"},"De esta manera, los commit locales se ponen a disposici\xf3n de otros colaboradores del proyecto, quienes pueden recuperarlos a trav\xe9s de una b\xfasqueda e incorporarlos a sus respectivos repositorios locales."),(0,n.kt)("li",{parentName:"ul"},"En el modo est\xe1ndar, ",(0,n.kt)("strong",{parentName:"li"},"git push")," envia solo los cambios nuevos, ya que Git sabe qu\xe9 commit ya est\xe1n presentes en el repositorio remoto."),(0,n.kt)("li",{parentName:"ul"},"Al ejecutar ",(0,n.kt)("strong",{parentName:"li"},"git push")," sin especificar ning\xfana opcion, solo los nuevos commit se enviar\xe1n al repositorio remoto."),(0,n.kt)("li",{parentName:"ul"},"Sin embargo, es posible dar varios argumentos al comando para elegir exactamente qu\xe9 enviar al repositorio remoto."),(0,n.kt)("li",{parentName:"ul"},"El push de etiquetas a un repositorio remoto debe indicarse expl\xedcitamente a trav\xe9s del argumento ",(0,n.kt)("strong",{parentName:"li"},"--tags"),", que env\xeda todas las etiquetas nuevas presentes en el repositorio local al repositorio remoto:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git push \u2013-tags\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Con el argumento ",(0,n.kt)("strong",{parentName:"li"},"--all")," se produce el upload de todos los ramas  presentes en el repositorio local hacia el repositorio remoto:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git push --all\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Obviamente, es posible indicar, si tienes varios repositorios remotos y varios branch, el branch espec\xedfico para enviar y el remote al cual enviarlo ejecutando el comando en la forma ",(0,n.kt)("strong",{parentName:"li"},"git push ","<","remoto> ","<","branch>"),"."),(0,n.kt)("li",{parentName:"ul"},"Por defecto, Git elige origin como remoto y tu rama actual como la rama a la que subir."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-push"},"git push"))),(0,n.kt)("h4",{id:"ejemplo-con-la-opci\xf3n---set-upstream"},"Ejemplo con la opci\xf3n --set-upstream"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"--set-upstream")," en Git se utiliza al momento de empujar una rama local a un repositorio remoto por primera vez."),(0,n.kt)("li",{parentName:"ul"},"Su prop\xf3sito principal es establecer una relaci\xf3n de seguimiento (tracking) entre la rama local y la rama remota."),(0,n.kt)("li",{parentName:"ul"},"Esta relaci\xf3n de seguimiento permite que Git realice un seguimiento de la relaci\xf3n entre ambas ramas, facilitando operaciones como ",(0,n.kt)("strong",{parentName:"li"},"git pull")," y proporcionando informaci\xf3n sobre el estado de la rama local en comparaci\xf3n con la rama remota."),(0,n.kt)("li",{parentName:"ul"},"Cuando utilizas ",(0,n.kt)("strong",{parentName:"li"},"--set-upstream")," al hacer un ",(0,n.kt)("strong",{parentName:"li"},"git push"),", est\xe1s configurando la rama local para que haga un seguimiento de la rama remota. Esto significa que en el futuro, cuando realices operaciones como ",(0,n.kt)("strong",{parentName:"li"},"git pull")," o ",(0,n.kt)("strong",{parentName:"li"},"git status"),", Git entender\xe1 autom\xe1ticamente con qu\xe9 rama remota debe sincronizarse."),(0,n.kt)("li",{parentName:"ul"},"Por ejemplo, si est\xe1s en una rama local llamada mi_rama y quieres empujarla al repositorio remoto llamado origin, puedes usar:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git push --set-upstream origin mi_rama\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Despu\xe9s de ejecutar este comando, podr\xe1s usar git pull sin argumentos en mi_rama para obtener autom\xe1ticamente los cambios de la rama remota. La opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"--set-upstream")," tambi\xe9n configura la rama local para que, al realizar futuros ",(0,n.kt)("strong",{parentName:"li"},"git push")," y ",(0,n.kt)("strong",{parentName:"li"},"git pull"),", sepa autom\xe1ticamente a qu\xe9 rama remota y rama local debe referirse.")),(0,n.kt)("h4",{id:"diferencia-con-git-branch"},"Diferencia con git branch"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para hacer lo anterior, podemos ejecutar el siguiente comando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git branch --set-upstream-to origin/main\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Este comando se utiliza cuando ya tienes una rama local y deseas establecer la relaci\xf3n de seguimiento con una rama remota (origin/main). Es \xfatil cuando ya has empujado la rama local al repositorio remoto y deseas configurar o cambiar la rama de seguimiento."),(0,n.kt)("li",{parentName:"ul"},"Esto significa que en el futuro, cuando est\xe9s en la rama local, puedes usar ",(0,n.kt)("strong",{parentName:"li"},"git pull")," o ",(0,n.kt)("strong",{parentName:"li"},"git push")," sin especificar la rama remota, ya que la relaci\xf3n de seguimiento se ha establecido."),(0,n.kt)("li",{parentName:"ul"},"La rama local no se especifica en el comando. La rama local es impl\xedcitamente la rama en la que te encuentras cuando ejecutas el comando."),(0,n.kt)("li",{parentName:"ul"},"Por ejemplo, si est\xe1s actualmente en la rama main y deseas configurarla para hacer un seguimiento de la rama remota origin/main, puedes ejecutar:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git branch --set-upstream-to origin/main\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Este comando establece la relaci\xf3n de seguimiento para la rama local actual (main) hacia la rama remota especificada (origin/main). En este contexto, no necesitas especificar expl\xedcitamente el nombre de la rama local porque el comando se ejecuta desde esa rama."),(0,n.kt)("li",{parentName:"ul"},"En resumen, ambos comandos se utilizan para establecer relaciones de seguimiento entre ramas locales y remotas, pero se aplican en contextos ligeramente diferentes: uno al realizar un git push inicial y el otro al configurar o cambiar la rama de seguimiento despu\xe9s de haber enviado la rama al repositorio remoto.")),(0,n.kt)("h2",{id:"git-fetch-y-pull"},"Git fetch y pull"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Git pull y fetch son dos comandos que regularmente son usados por los usuarios de Git."),(0,n.kt)("li",{parentName:"ul"},"Por el bien del contexto, vale la pena recordar que probablemente trabajemos en un repositorio clon. \xbfQu\xe9 es un clon? Es simplemente un duplicado de otro repositorio. Es b\xe1sicamente el tener tu propia copia del c\xf3digo fuente de otra persona."),(0,n.kt)("li",{parentName:"ul"},"Con eso, dicho, para mantener tu clon actualizado con cualquier cambio que se haya aplicado al original, necesitaras traerlos a tu clon."),(0,n.kt)("li",{parentName:"ul"},"Ah\xed es donde fetch y pull  entran."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git fetch")," es el comando que dice a su local git que recupere la informaci\xf3n de metadatos m\xe1s reciente del original (pero no realiza ninguna transferencia de archivo. Es m\xe1s como simplemente verificar si hay alg\xfan cambio disponible)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git pull")," por otro lado, hace eso y trae una copia de esos cambios al repositorio local."),(0,n.kt)("li",{parentName:"ul"},"Tanto pull como fetch se utilizan para mantener el repositorio actualizado con los cambios que haya habido. No siempre, pero en muchos casos hay m\xe1s de una persona trabajando en un repositorio, por lo que cuando una persona hace cambios en un repositorio remoto con un ",(0,n.kt)("strong",{parentName:"li"},"git push"),", nuestro repositorio local estar\xe1 desactualizado y tendremos que traernos los cambios que se hayan hecho."),(0,n.kt)("li",{parentName:"ul"},"Veamos un ejemplo de diferencias entre git fetch y git pull en el que entran en juego 3 partes:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Repositorio remoto: ser\xeda el que se almacena en GitHub."),(0,n.kt)("li",{parentName:"ul"},"Repositorio local: es una copia del repositorio remoto que se almacena en tu ordenador o en un servidor, por ejemplo."),(0,n.kt)("li",{parentName:"ul"},"Espacio de trabajo: los archivos con los que trabajas directamente en Visual Studio Code, PyCharm o con cualquier editor de c\xf3digo.\n",(0,n.kt)("img",{parentName:"li",src:"https://geekytheory.com/content/images/size/w1000/2021/11/git-fetch-vs-git-pull-diferencias.png",alt:"Diferencias"}))))),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git fetch")," es el comando que hace que tu repositorio Git local se actualice con la \xfaltima informaci\xf3n que hay en el repositorio remoto, pero no hace ninguna transferencia de archivos a tu espacio de trabajo local (el c\xf3digo que ves en tu editor por ejemplo). Podr\xeda decirse que sirve para comprobar si hay alg\xfan cambio y traerlo a tu repositorio local."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git pull")," es el comando que comprueba si hay cambios en el repositorio remoto y, en caso de que los haya, se trae esos archivos a tu repositorio local y actualiza tu espacio de trabajo (tu IDE, tus archivos)."),(0,n.kt)("li",{parentName:"ul"},"Simplificando mucho la explicaci\xf3n, git pull hace un git fetch seguido de un git merge.")))),(0,n.kt)("h4",{id:"fetch"},"Fetch"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El prop\xf3sito de ",(0,n.kt)("strong",{parentName:"li"},"git fetch")," es descargar commit, ramas y etiquetas desde un repositorio remoto al repositorio local. Los nuevos contenidos recuperados a trav\xe9s de ",(0,n.kt)("strong",{parentName:"li"},"git fetch")," deber\xedan aplicarse expl\xedcitamente al \xe1rbol de trabajo(proyecto), lo que hace que la ejecuci\xf3n de este comando sea una operaci\xf3n segura para recuperar nuevos commit, sin tener que aplicarlos necesariamente a su trabajo en curso."),(0,n.kt)("li",{parentName:"ul"},'Supongamos que ayer clonamos un repositorio remoto que solo ten\xeda la rama principal y esa rama conten\xeda tres commit. Por lo tanto, mi copia local sabe que est\xe1 "conectada" al repositorio remoto indicado como origen y mi \xe1rbol de trabajo (proyecto) ha extra\xeddo el \xfaltimo commit de la \xfanica rama presente, conectando la rama local principal con la rama correspondiente con el mismo nombre en origen.'),(0,n.kt)("li",{parentName:"ul"},"Y Otro colaborados ha agregado algunos commit en main y ha creado un nuevo branch."),(0,n.kt)("li",{parentName:"ul"},"Entonces ejecutamos los siguientes comandos:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git branch -vv\ngit fetch\ngit status\nOn branch main\nYour branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.\n(use \"git pull\" to update your local branch)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Los nuevos commit y la nueva rama ahora tambi\xe9n est\xe1n disponibles en el repositorio local, pero no se han aplicado. Esto se debe a que, aunque todos los commit, tanto locales como remotas, ahora est\xe1n presentes en el repositorio local, Git mantiene los commit de los branch locales separados de los branch remotos.\n",(0,n.kt)("img",{parentName:"li",src:"https://lh6.googleusercontent.com/l9_1YJWaDKk_XEFc_TDq1cbsJXzwYbUpvjE39YhusFh5wETFA1UQOkwqTnLOZGqmqajOn532u8FvZBgTI5L7sVpLmsYwLtl6P51QCVDFRG3UMKBbNkhZIpV4I2zrBonLWlaZRVQS7dGbE8hiEpFXgDz1wK4TNFhz",alt:"Historial de commit fetch"})),(0,n.kt)("li",{parentName:"ul"},"Ser\xe1 posible ver cuales commit han sido a\xf1adidos a origin/master a trav\xe9s ",(0,n.kt)("strong",{parentName:"li"},"git log")," y aplicar nuevos commit al propio branch(rama) local a trav\xe9s de ",(0,n.kt)("strong",{parentName:"li"},"git merge"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git log --oneline main..origin/main\ngit merge origin/main\n\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git log"),": Muestra el historial de commits."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"--oneline"),": Muestra cada commit en una sola l\xednea, lo que facilita la lectura del historial."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"main..origin/main"),': Esto es una expresi\xf3n de rango. En este contexto, significa "todos los commits que est\xe1n en la rama origin/main pero no en la rama local main".'),(0,n.kt)("li",{parentName:"ul"},"Entonces, el comando ",(0,n.kt)("strong",{parentName:"li"},"git log --oneline main..origin/main")," te dar\xe1 una lista de los commits en la rama remota origin/main que a\xfan no han sido incorporados a la rama local main. Esto puede ser \xfatil para revisar los cambios que han ocurrido en el repositorio remoto antes de fusionarlos en tu rama local.")))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://lh5.googleusercontent.com/P0o4_df4lJtQGkHFdGMV8U6IYmIrLeZylG6ZeeeEoi9N_gGFJDBAn5Nt6GNmilW82jTh_W37XXccOJS0y22i8OVu_nZ6lWQ9TG3bDWIChlAHO03UAfNR8Wz60r5oKpHN_21VmYELACSV8codYyEGz-qIHn--baJo",alt:"Historial de commit fetch 2"})),(0,n.kt)("h4",{id:"pull"},"Pull"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git pull")," en Git es, en realidad, una combinaci\xf3n de otros dos comandos. "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git pull")," recupera (",(0,n.kt)("strong",{parentName:"li"},"git fetch"),") las nuevas confirmaciones y las fusiona (",(0,n.kt)("strong",{parentName:"li"},"git merge"),") en tu rama local."),(0,n.kt)("li",{parentName:"ul"},"Por defecto hace dos cosas:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Actualiza la rama de trabajo actual."),(0,n.kt)("li",{parentName:"ol"},"Actualiza las referencias de rama remota para todas las dem\xe1s ramas."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git pull")," es un comando combinado, que equivale a ",(0,n.kt)("strong",{parentName:"li"},"git fetch")," + ",(0,n.kt)("strong",{parentName:"li"},"git merge"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Git fetch"),": Por s\xed mismo, ",(0,n.kt)("strong",{parentName:"li"},"git fetch")," actualiza todas las referencias de rama remota en tu repositorio local. En realidad, no se reflejan cambios en ninguna de las ramas de trabajo locales."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Git merge"),": Sin ning\xfan argumento, ",(0,n.kt)("strong",{parentName:"li"},"git merge")," fusionar\xe1 la referencia de rama remota con la rama de trabajo local."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Git pull"),":  ",(0,n.kt)("strong",{parentName:"li"},"git fetch")," actualiza las referencias de ramas remotas. ",(0,n.kt)("strong",{parentName:"li"},"git merge")," actualiza la rama actual con la referencia de rama remota correspondiente. Utilizando ",(0,n.kt)("strong",{parentName:"li"},"git pull"),", obtienes ambas partes. Pero, esto significa que si te mueves a la rama feature y ejecutas ",(0,n.kt)("strong",{parentName:"li"},"git pull"),", cuando te muevas a master, cualquier nueva actualizaci\xf3n no estar\xe1 incluida. Cuando te muevas a otra rama que pudiera tener nuevos cambios, siempre es buena idea ejecutar  ",(0,n.kt)("strong",{parentName:"li"},"git pull"),"."),(0,n.kt)("li",{parentName:"ul"},"En la primera fase de la operaci\xf3n, ",(0,n.kt)("strong",{parentName:"li"},"git pull")," realizar\xe1 una b\xfasqueda de git limitada solo a la rama en la que estamos ubicado. Una vez que se haya descargado el contenido, ",(0,n.kt)("strong",{parentName:"li"},"git pull")," ingresar\xe1 a un flujo de reconciliaci\xf3n de commit que puede seguir dos m\xe9todos con efectos muy diferentes."),(0,n.kt)("li",{parentName:"ul"},"Entend\xe1moslo mejor con un ejemplo:"),(0,n.kt)("li",{parentName:"ul"},"Supongamos que hemos clonado un  repositorio remoto cuando el \xfaltimo commit en su rama  main era el indicado como \u201cB\u201d. Hemos hecho modificaciones y hemos guardado en local los commit \u201cC\u201d, \u201cD\u201d y \u201cE\u201d. Mientras tanto, alguien m\xe1s ha creado y enviado al repositorio remoto otros commit, \u201cF\u201d, \u201cG\u201d y \u201cH\u201d\n",(0,n.kt)("img",{parentName:"li",src:"https://lh6.googleusercontent.com/20C6f6AbdTa9mzogrLIQxiioQF3GGX54-esT4zatd4wZIvF30Q6Gzi0waxauDsaZBuMbE7GCubFSyhvplC0r5avnbeDngscmq56La1K8ssEV2hezfytevLjFIXCLU0G2N8D4Mi4r-wWqAFdiHwCGscP1kyiRnw9G",alt:"Historial de confirmaciones pull"})),(0,n.kt)("li",{parentName:"ul"},'En esta situaci\xf3n, teniendo en cuenta que el repositorio remoto es el que alberga la historia "oficial" del proyecto, tendremos que recuperar los nuevos commits remotos e integrarlos con los locales. No obstante, tambi\xe9n tendremos que indicar la estrategia preferida con la que hacerlo.'),(0,n.kt)("li",{parentName:"ul"},"Git, de hecho, ofrece dos formas distintas para tratar con ramas divergentes, con rebase o con fusi\xf3n.")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"En versiones recientes de Git, ",(0,n.kt)("strong",{parentName:"li"},"git pull")," en ramas divergentes falla a menos que especifique la estrategia deseada. Puede hacer esto a trav\xe9s de argumentos(opciones) de comando, pero tambi\xe9n se puede especificar la estrategia predeterminada a trav\xe9s de git config.")))),(0,n.kt)("h4",{id:"pull-con-rebase"},"Pull con rebase"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://lh4.googleusercontent.com/cW2ZEYgjG55kqwF80i4xZEgjekAvMGX1P7d7sUkJK3-3DOlIZKTN-bI6K28PAf-LsDqjGWtMQRLyhpx-dBeWoT4RybCLI6mInM14mblZq8E_eY96Jm43MGvQxTD81LMl7d_vQjH-ib3bKXVSftz6HlMcQkDQ4t35",alt:"Pull Con rebase"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'El pull con rebase es el m\xe9todo que, en cierto sentido, respeta el contenido del repositorio remoto como "oficial" y considera los commits en el repositorio local como commits a aplicar sobre el historial actualizado del repositorio.'),(0,n.kt)("li",{parentName:"ul"},"Ejecutando ",(0,n.kt)("strong",{parentName:"li"},"git pull --rebase")," sucede lo siguiente:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Se reservan(quitan) los commit locales (C-D-E) a\xf1adidos  desde el punto de partida c\xf3mun(el ultimo commit que tienen en comun las dos ramas)."),(0,n.kt)("li",{parentName:"ul"},"Se ejecuta el fetch que recupera los nuevos commit desde el branch main del repositorio remoto origin."),(0,n.kt)("li",{parentName:"ul"},"Los nuevos commit remotos  se aplican a la \u201ccopia\u201d local de origin/main y se actualiza el branch(rama) local main y  el \xe1rbol de trabajo."),(0,n.kt)("li",{parentName:"ul"},"Los commit locales C-D-E se \u201creaplican\u201d, creando entonces nuevos commit C\u2019-D\u2019-E\u2019."))),(0,n.kt)("li",{parentName:"ul"},"Cuando se utiliza ",(0,n.kt)("strong",{parentName:"li"},"git pull --rebase"),', en lugar de fusionar los cambios remotos con la rama actual, Git reorganiza o reaplica los cambios locales encima de los cambios remotos. Esto significa que los commits locales se "rebasan" sobre los commits remotos.'),(0,n.kt)("li",{parentName:"ul"},"Esto reorganiza tu historial de commits local para que parezca que tus cambios locales se hicieron despu\xe9s de los cambios remotos, aunque en realidad, se est\xe1n aplicando de nuevo.")),(0,n.kt)("h4",{id:"pull-con-merge"},"Pull con merge"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://lh6.googleusercontent.com/ovZFopxpMhPDZdYeHmIgeLTff7SQ4t3weJLX20h895us7z58Nc3pbro_4no0KoM66VA5ZDsCcSFax6ZUaXd_74fqYoOAvja1rnPmMPyPlvcauw-zVqRtxcszg1GnvSgM8gKXt4rOtWJpSywGOTSpkuam0ulqQCns",alt:"Pull Con merge"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'El otro m\xe9todo es el de pull with merge que, en la situaci\xf3n descrita, da "precedencia" al repositorio local sobre el remoto, o al menos en la situaci\xf3n descrita podr\xeda crear una historia aparentemente inconsistente.'),(0,n.kt)("li",{parentName:"ul"},"Al ejecutar ",(0,n.kt)("strong",{parentName:"li"},"git pull --no-rebase")," de hecho, ocurre lo siguiente:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Se ejecuta el fetch que recupera los nuevos commit del branch main del  repositorio remoto origin."),(0,n.kt)("li",{parentName:"ul"},"Se  consiguen los commit F-G-H recuperados del  repositorio remoto y se crea un commit especial de \u201cmerge\u201d  que fusiona los dos cambios en el branch local."),(0,n.kt)("li",{parentName:"ul"},"Se pide al usuario guardar tal commit."))),(0,n.kt)("li",{parentName:"ul"},'Al final del pull con merge, aunque estamos en una situaci\xf3n que desde el punto de vista de Git ya no es "divergente",  la historia del proyecto es menos comprensible y lineal.'),(0,n.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"--no-rebase")," se utiliza para indicarle a Git que no realice autom\xe1ticamente un rebase despu\xe9s de realizar el fetch. En lugar de eso, se realizar\xe1 un merge para combinar los cambios locales y remotos."),(0,n.kt)("li",{parentName:"ul"},"En resumen, ",(0,n.kt)("strong",{parentName:"li"},"git pull --no-rebase")," realiza un fetch desde el repositorio remoto y luego fusiona los cambios locales con los cambios remotos mediante un merge, evitando el rebase autom\xe1tico.")),(0,n.kt)("h2",{id:"git-checkout"},"Git checkout"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'Sabemos que Git almacena una serie de snapshot de un proyecto llamados commit, cada commit tiene su propio identificador y apunta al commit anterior, para poder reconstruir todo el historial. Tambi\xe9n sabemos que Git te permite tener una o m\xe1s "l\xedneas de tiempo", llamadas branch(ramas), que eventualmente se ramifican a partir de una commit com\xfan.'),(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git checkout"),' en Git permite decidir qu\xe9 extraer en el \xe1rbol de trabajo local, ya sea un branch, una etiqueta u otra referencia v\xe1lida, como un commit, por ejemplo. De esta forma, es posible recuperar un snapshot espec\xedfico del proyecto en el \xe1rbol de trabajo local, "retrocediendo en el tiempo" hasta el momento en que se guard\xf3 esa snapshot.'),(0,n.kt)("li",{parentName:"ul"},"En el momento en el que se efect\xfaa el ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," de un  commit espec\xedfico o tag, Git muestra un aviso que al principio podr\xeda asustar."),(0,n.kt)("li",{parentName:"ul"},"Dado que HEAD apunta directamente a un commit (el que especificamos con el comando checkout), Git advierte que el \xe1rbol de trabajo local est\xe1 en un estado detached. Por lo tanto, cualquier commit posterior no se agregar\xe1 al Branch actual. El mensaje indica c\xf3mo, si es necesario, crear un nuevo branch o volver al branch inicial usando el comando ",(0,n.kt)("strong",{parentName:"li"},"git switch"),"."),(0,n.kt)("li",{parentName:"ul"},"Sin embargo, es posible usar el comando ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," nuevamente para volver al branch inicial:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout nombre-rama\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Si hubi\xe9ramos creado commit mientras estamos en el estado detached Git eliminar\xe1  estos commit."),(0,n.kt)("li",{parentName:"ul"},"Resumiendo, podemos decir entonces que ",(0,n.kt)("strong",{parentName:"li"},"git checkout"),":",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Sirve principalmente para especificar que queremos \u201ccargar\u201d en nuestro \xe1rbol de trabajo local."),(0,n.kt)("li",{parentName:"ul"},"Normalmente, se usa para indicar el branch que queremos \u201ccargar\u201d en el  \xe1rbol de trabajo local: ",(0,n.kt)("strong",{parentName:"li"},"git checkout ","<","NOMBRE_BRANCH>"),"."),(0,n.kt)("li",{parentName:"ul"},"Se puede utilizar para indicar un  commit espec\xedfico, a trav\xe9s de su id o un tag, para \u201ccargar\u201d en el \xe1rbol de trabajo local: ",(0,n.kt)("strong",{parentName:"li"},"git checkout ","<","COMMIT_O_TAG>"),"."))),(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," cambia entre ramas o restaura los archivos del \xe1rbol de trabajo (working tree). Hay varias opciones diferentes para este comando que no se tratar\xe1n aqu\xed, pero puedes echar un vistazo a todas ellas en la documentaci\xf3n de Git.")),(0,n.kt)("h4",{id:"commit-espec\xedfico"},"Commit espec\xedfico"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para realizar un checkout a un commit espec\xedfico, ejecuta el comando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout id-del-commit-espec\xedfico\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"podemos obtener el identificador (id) del commit espec\xedfico ejecutando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git log\n")),(0,n.kt)("h4",{id:"rama-existente"},"Rama existente"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para cambiar de rama (esta debe existir), ejecuta el comando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout NOMBRE-DE-LA-RAMA\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Por lo general, Git no te dejar\xe1 realizar checkout a otra rama a menos que tu directorio de trabajo est\xe9 limpio, porque perder\xedas cualquier cambio hecho en el  directorio de trabajo al que no le has hecho commit. Tienes tres opciones para manejar tus cambios: 1) tirarlos a la basura, 2) realizarles un commit, 3) realizarles un stash.")))),(0,n.kt)("h4",{id:"rama-nueva"},"Rama nueva"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para crear y cambiar a una rama nueva con un solo comando, puedes usar:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -b NOMBRE-DE-LA-RAMA-NUEVA\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Esto te cambiar\xe1 autom\xe1ticamente a la rama nueva.")))),(0,n.kt)("h4",{id:"rama-nueva-o-reiniciar-una-rama-a-un-punto-de-partida"},"Rama nueva o Reiniciar una rama a un punto de partida"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El siguiente comando es similar al de cambiar a una rama nueva, pero utiliza la bandera -B (f\xedjese en la B may\xfascula) y una opcion PUNTO-DE-PARTIDA:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -B NOMBRE-DE-LA-RAMA PUNTO-DE-PARTIDA\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Si la rama NOMBRE-DE-LA-RAMA no existe, Git la crear\xe1 y la iniciar\xe1 en PUNTO-DE-PARTIDA. Si la rama NOMBRE-DE-LA-RAMA ya existe, entonces Git restablece la rama a PUNTO-DE-PARTIDA. Esto equivale a ejecutar ",(0,n.kt)("strong",{parentName:"li"},"git branch con -f"),"."),(0,n.kt)("li",{parentName:"ul"},"PUNTO-DE-PARTIDA : Especifica el punto de partida para la nueva rama. Puede ser un commit, una rama existente o un nombre de etiqueta. La nueva rama se crear\xe1 a partir de este punto.")))),(0,n.kt)("h4",{id:"forzar-un-checkout"},"Forzar un checkout"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Puedes pasar la opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"-f")," o ",(0,n.kt)("strong",{parentName:"li"},"--force")," con el comando ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," para forzar a Git a cambiar de rama, incluso si tienes cambios fuera de la zona de montaje (\xedndice). B\xe1sicamente, se puede usar para tirar los cambios locales."),(0,n.kt)("li",{parentName:"ul"},"Cuando ejecutes el siguiente comando, Git ignorar\xe1 las entradas no fusionadas:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -f NOMBRE-DE-LA-RAMA\n# Alternativa\ngit checkout --force NOMBRE-DE-LA-RAMA\n\n")),(0,n.kt)("h4",{id:"deshacer-los-cambios-en-tu-directorio-de-trabajo"},"Deshacer los cambios en tu Directorio de trabajo"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Puedes usar el comando ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," para deshacer los cambios que has hecho en un archivo de tu directorio y trabajo. Esto revertir\xe1 el archivo a la versi\xf3n en HEAD (al ultimo commit):")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -- NOMBRE-DEL-ARCHIVO\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Entonces, en resumen, revierte los cambios locales no confirmados en el archivo especificado, deshaciendo las modificaciones y volviendo al estado del \xfaltimo commit. Ten en cuenta que este comando descartar\xe1 los cambios sin posibilidad de recuperaci\xf3n, as\xed que \xfasalo con precauci\xf3n. Si has realizado cambios que ya est\xe1n confirmados, deber\xedas considerar hacer un nuevo commit para revertirlos en lugar de usar este comando.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-checkout"},"Documentaci\xf3n."))),(0,n.kt)("h2",{id:"git-rebase-y-merge"},"Git rebase y merge"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Los dos se utilizan para lo mismo, para integrar cambios de otra rama a la principal.")),(0,n.kt)("h4",{id:"ejemplo"},"Ejemplo"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Creamos una carpeta y la iniciamos con ",(0,n.kt)("strong",{parentName:"li"},"git init"),"."),(0,n.kt)("li",{parentName:"ol"},"Creamos un archivo de texto llamado file.txt y hacemos una confirmaci\xf3n:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git add .\ngit commit -m \u201cfirst commit\u201d\ngit log\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Vamos a crear una nueva rama llamada linea1:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -b linea1\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Editamos el archivo de texto:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},"Linea de texo numero 1...\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Hacemos un commit en la rama nueva:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git commit -a -m \u201ca\xf1adida la l\xednea 1 del archivo\u201d\ngit log -p\n\n")),(0,n.kt)("ol",{start:6},(0,n.kt)("li",{parentName:"ol"},"Volvemos a la rama master y creamos otra rama llamada linea2:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b linea2\n\n")),(0,n.kt)("ol",{start:7},(0,n.kt)("li",{parentName:"ol"},"Editamos el archivo de texto:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},"[Espacio en blanco]\nLinea numero 2....\n")),(0,n.kt)("ol",{start:8},(0,n.kt)("li",{parentName:"ol"},"Hacemos un commit en la rama nueva:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git commit -a -m \u201ca\xf1adida la l\xednea 2 del archivo\u201d\ngit log -p\n\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Como vemos, con el siguiente comando tenemos tres ramas, la master con un archivo de texto vac\xedo y en las otras dos se desarrollaron diferentes \u201ctareas\u201d:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git branch\n")),(0,n.kt)("ol",{start:9},(0,n.kt)("li",{parentName:"ol"},"Nos volvemos a la rama master y creamos la rama master2:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b  master2\n\n")),(0,n.kt)("ol",{start:10},(0,n.kt)("li",{parentName:"ol"},"En esta nueva rama insertaremos los cambios con un merge , entonces ejecutamos los siguientes comandos:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git merge linea1\ngit merge linea2\n")),(0,n.kt)("ol",{start:11},(0,n.kt)("li",{parentName:"ol"},"Hay un conflicto al ejecutar el segundo comando, as\xed que ejecutamos ",(0,n.kt)("strong",{parentName:"li"},"git status"),".")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Se nos informa que las dos ramas (linea1 y linea2) modificaron el mismo archivo.")),(0,n.kt)("ol",{start:12},(0,n.kt)("li",{parentName:"ol"},"Solucionamos el conflicto mediante un IDE o borrando las l\xedneas de formato especiales que se generaron para que queden los dos cambios, quedando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},"Linea de texo numero 1...\n[Espacio en blanco]\nLinea numero 2....\n")),(0,n.kt)("ol",{start:13},(0,n.kt)("li",{parentName:"ol"},"Hacemos un commit:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit status (nos indica que podemos usar el comando git commit)\ngit commit \ngit log -p\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El orden de los commits es:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"first commit -- a\xf1adida la l\xednea 1 del archivo -- a\xf1adida la l\xednea 2 del archivo ---  Merge branch 'linea2' into master2."))),(0,n.kt)("li",{parentName:"ul"},"A lo ultimo entonces, se crea un commit que tiene la mezcla de los dos.")),(0,n.kt)("ol",{start:14},(0,n.kt)("li",{parentName:"ol"},"Volvemos a la rama master y creamos la rama master3:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b master3\n\n")),(0,n.kt)("ol",{start:15},(0,n.kt)("li",{parentName:"ol"},"En esta nueva rama insertaremos los cambios con un rebase, entonces ejecutamos los siguientes comandos:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git rebase linea1\ngit rebase linea2\n\n")),(0,n.kt)("ol",{start:16},(0,n.kt)("li",{parentName:"ol"},"Hay un conflicto al ejecutar el segundo comando, as\xed que ejecutamos ",(0,n.kt)("strong",{parentName:"li"},"git status"),".")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Se nos informa que las dos ramas (linea1 y linea2) modificaron el mismo archivo.")),(0,n.kt)("ol",{start:17},(0,n.kt)("li",{parentName:"ol"},"Solucionamos el conflicto mediante un IDE o borrando las l\xedneas de formato especiales que se generaron para que queden los dos cambios, quedando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},"[Espacio en blanco]\nLinea numero 2....\nLinea de texo numero 1...\n\n")),(0,n.kt)("ol",{start:18},(0,n.kt)("li",{parentName:"ol"},"Hacemos un commit:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit status (nos indica que  podemos usar el comando git rebase --continue)\ngit rebase --continue\ngit log -p\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El orden de los commits es:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"first commit -- a\xf1adida la l\xednea 2 del archivo --  a\xf1adida la l\xednea 1 del archivo."))),(0,n.kt)("li",{parentName:"ul"},"No hay un commit de Merge.")),(0,n.kt)("h4",{id:"diferencia-de-los-commits"},"Diferencia de los commits:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Ambos comienzan por first commit."),(0,n.kt)("li",{parentName:"ul"},"El segundo y tercer commit cambian:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"En el merge , se van a\xf1adiendo seg\xfan cada comando ",(0,n.kt)("strong",{parentName:"li"},"git merge"),"."),(0,n.kt)("li",{parentName:"ul"},"En rebase, el segundo commit es \u201ca\xf1adida la l\xednea 2 del archivo\u201d y el tercero es \u201ca\xf1adida la l\xednea 1 del archivo\u201d, \xf3sea tiene un orden invertido."))),(0,n.kt)("li",{parentName:"ul"},"El cuarto commit solo lo tiene merge.")),(0,n.kt)("h4",{id:"resumen"},"Resumen"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Con Merge no podemos sabemos que cambios se hicieron en el commit Merge , por lo tanto no deja un historial claro de los cambios."),(0,n.kt)("li",{parentName:"ul"},"Con Rebase no tenemos un commit Merge pero se cambia el orden del historial , esto nos permite dejar un historial claro de los cambios.")),(0,n.kt)("h4",{id:"para-seguir-explicando-rebase"},"Para seguir explicando rebase"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Ubicado en la rama que se uso el rebase, hacemos un reset:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git reset \u2013-hard HEAD~2\ngit log -p\n\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Estamos en el commit \u201cfirst commit\u201d.")))),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Ejecutamos lo siguiente:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git rebase linea2\ngit rebase linea1\n\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Solucionamos los conflictos de la misma manera. Dejamos los dos cambios."),(0,n.kt)("li",{parentName:"ol"},"Ejecutamos lo siguiente:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit rebase --continue\ngit log -p\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Entonces para ejemplificar:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Rama"),(0,n.kt)("th",{parentName:"tr",align:null},"Commit"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Master"),(0,n.kt)("td",{parentName:"tr",align:null},"1\u20132-3")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Dev1"),(0,n.kt)("td",{parentName:"tr",align:null},"1-2-3-4")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Dev2"),(0,n.kt)("td",{parentName:"tr",align:null},"1-2-3-5")))),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Los tres, tienen los primeros tres commits."),(0,n.kt)("li",{parentName:"ul"},"Dev1 tiene el 4 commit y el Dev2 el 5 commit.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Funcionamiento:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Si hacemos un rebase desde master con dev2 (rebase dev2):",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Como no hay ning\xfan conflicto, el commit 5 lo va a poner al final quedando: 1-2-3-5"))),(0,n.kt)("li",{parentName:"ul"},"Si hacemos un rebase desde master con dev1 (rebase dev1) luego del rebase anterior:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Como hay conflicto, el ultimo commit (5) lo va a poner en el final y el commit 4 lo va a insertar despu\xe9s del tres, quedando: 1-2-3-4-5"))),(0,n.kt)("li",{parentName:"ul"},"Por esto se hace primero los rebase de lo mas nuevo y luego lo m\xe1s viejo.")))),(0,n.kt)("h4",{id:"rebase"},"Rebase"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cuando tu commit , lo tienes que mezclar con otro commit , se crea un nuevo commit temporal (que luego se elimina)."),(0,n.kt)("li",{parentName:"ul"},"Rebase es una de las dos utilidades de Git dise\xf1adas para integrar cambios de una rama a otra. Rebasar es el proceso de combinar o mover una secuencia de confirmaciones sobre una nueva confirmaci\xf3n base. ",(0,n.kt)("strong",{parentName:"li"},"Git rebase")," es el proceso lineal de fusi\xf3n."),(0,n.kt)("li",{parentName:"ul"},"Una rebase de Git cambia la base de la rama de una confirmaci\xf3n a otra, por lo que parece que han creado su rama a partir de una confirmaci\xf3n diferente. Internamente, Git crea una nueva confirmaci\xf3n y la aplica a la base especificada."),(0,n.kt)("li",{parentName:"ul"},"Aunque la rama parece la misma, est\xe1 compuesta de confirmaciones completamente nuevas. Cuando realizas una rebase de Git, est\xe1s, de hecho, reescribiendo el historial."),(0,n.kt)("li",{parentName:"ul"},"Supongamos que es un desarrollador que est\xe1 trabajando en una nueva funci\xf3n en una rama dedicada. Luego, otro miembro del equipo de desarrollo actualiza la rama principal con algunas confirmaciones nuevas. La situaci\xf3n se ve as\xed:\n",(0,n.kt)("img",{parentName:"li",src:"https://www.simplilearn.com/ice9/free_resources_article_thumb/Git_Rebase_1.PNG",alt:"Explicaci\xf3n rebase"})),(0,n.kt)("li",{parentName:"ul"},"Sin embargo, finalmente el equipo concluye que las nuevas confirmaciones del archivo principal son relevantes para la funci\xf3n en la que est\xe1 trabajando. Entonces, si desea incorporar las nuevas confirmaciones en su rama, puede realizar una fusi\xf3n o una rebase. "),(0,n.kt)("li",{parentName:"ul"},"Si realizamos un rebase, movemos toda la rama de funciones(feature), comenzando en la punta de la rama principal para que todas las nuevas confirmaciones sean ahora parte del todo."),(0,n.kt)("li",{parentName:"ul"},"Esta acci\xf3n reescribe el historial del proyecto realizando nuevas confirmaciones para cada una de las confirmaciones de la rama original. As\xed es como se ve la nueva sucursal(rama):\n",(0,n.kt)("img",{parentName:"li",src:"https://www.simplilearn.com/ice9/free_resources_article_thumb/Git_Rebase_3.PNG",alt:"Nueva rama despues del rebase "}))),(0,n.kt)("h4",{id:"no-rebases-la-historia-p\xfablica"},"No rebases la historia p\xfablica"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Nunca debes cambiar la base de las confirmaciones una vez que hayan sido enviadas a un repositorio p\xfablico. La rebase reemplazar\xeda las confirmaciones antiguas por otras nuevas y parecer\xeda que esa parte del historial de su proyecto desapareci\xf3 abruptamente.")),(0,n.kt)("h4",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'Cuando realizas un rebase, Git toma una serie de confirmaciones, las "desenrolla" temporalmente, aplica las confirmaciones de otra rama sobre ellas y luego vuelve a aplicar las confirmaciones desenrolladas. Este proceso puede ayudar a mantener un historial de confirmaciones m\xe1s lineal y f\xe1cil de entender en comparaci\xf3n con las fusiones, que pueden generar una estructura de historial m\xe1s ramificada.'),(0,n.kt)("li",{parentName:"ul"},"Desglosemos esa explicaci\xf3n en pasos m\xe1s detallados:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Seleccionar el punto de partida com\xfan:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'Imagina que tienes dos ramas en tu proyecto, por ejemplo, mi_rama y rama_objetivo. Antes de realizar un rebase, necesitas identificar el punto en el que ambas ramas divergieron. Este punto es com\xfanmente el \xfaltimo commit  que ambas ramas comparten . El "punto de partida com\xfan" se refiere al \xfaltimo commit compartido entre las dos ramas que est\xe1s intentando rebasar \xf3sea es el ultimo commit que tienen en com\xfan las dos ramas , a partir de ese commit, ambas ramas han evolucionado de manera independiente.'))),(0,n.kt)("li",{parentName:"ol"},'"Desenrollar" temporalmente las confirmaciones:',(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'A partir de ese punto com\xfan, Git toma todas las confirmaciones que se hicieron en tu rama (mi_rama) desde el punto com\xfan hasta la punta de la rama. Estas confirmaciones se "desenrollan" temporalmente, es decir, se quitan de su ubicaci\xf3n actual en la rama.'))),(0,n.kt)("li",{parentName:"ol"},"Aplicar las confirmaciones de otra rama:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Luego, Git aplica las confirmaciones de la otra rama (rama_objetivo) sobre la rama actual. Esto significa que las confirmaciones de mi_rama se est\xe1n aplicando encima de las confirmaciones de rama_objetivo."))),(0,n.kt)("li",{parentName:"ol"},"Resolver conflictos (si es necesario):",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Durante este proceso, si hay cambios conflictivos entre las confirmaciones de ambas ramas, Git detendr\xe1 el rebase y te pedir\xe1 que resuelvas esos conflictos. Esto podr\xeda implicar fusionar cambios manuales o elegir qu\xe9 versi\xf3n de un cambio conflicto conservar."))),(0,n.kt)("li",{parentName:"ol"},"Volver a aplicar las confirmaciones desenrolladas:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Despu\xe9s de resolver cualquier conflicto, Git toma las confirmaciones que se desenrollaron en el paso 2 y las vuelve a aplicar encima de las confirmaciones de la otra rama. Esto crea una nueva serie de confirmaciones que incluye los cambios de ambas ramas, pero de una manera m\xe1s lineal."))),(0,n.kt)("li",{parentName:"ol"},"Historial m\xe1s lineal:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"El resultado final es un historial de confirmaciones m\xe1s lineal en comparaci\xf3n con una fusi\xf3n. Las confirmaciones de mi_rama ahora se encuentran despu\xe9s de las confirmaciones de rama_objetivo en lugar de tener una bifurcaci\xf3n adicional. Esto puede hacer que el historial sea m\xe1s f\xe1cil de entender, especialmente en proyectos con m\xfaltiples colaboradores."))))),(0,n.kt)("li",{parentName:"ul"},"Entonces siguiendo el ejemplo de la explicaci\xf3n podemos hacer el siguiente grafico que representan el historial de confirmaciones en dos ramas:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Nombre Rama"),(0,n.kt)("th",{parentName:"tr",align:null},"Historial de Commit"),(0,n.kt)("th",{parentName:"tr",align:null},"Observaci\xf3n"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Mi_Rama"),(0,n.kt)("td",{parentName:"tr",align:null},"A \u2013 B -- C"),(0,n.kt)("td",{parentName:"tr",align:null},"Seria la \u201crama principal\u201d , tiene tres commit.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Rama_Objetivo"),(0,n.kt)("td",{parentName:"tr",align:null},"B \u2013 D -- E"),(0,n.kt)("td",{parentName:"tr",align:null},"La Rama_Objetivo se cre\xf3 en el commit \u201cB\u201d y a partir de ah\xed se empezaron a crear nuevos commits independientes a la rama principal.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"En este caso, el punto de partida es el commit B ya que, a partir de ah\xed, ambas han evolucionado de manera independiente."),(0,n.kt)("li",{parentName:"ul"},"Si deseas rebasar mi_rama sobre rama_objetivo, Git tomar\xe1 las confirmaciones desde el commit B (no lo incluye) hasta la punta de mi_rama (la confirmaci\xf3n C , la incluye) y las aplicar\xe1 despu\xe9s de todas las confirmaciones de rama_objetivo (las nuevas , \xf3sea no incluye el punto de partida)."),(0,n.kt)("li",{parentName:"ul"},"Para hacerlo ejecutamos los siguientes comandos:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git checkout mi_rama  (Para confirmar que estamos en la rama correcta)\ngit pull origin mi_rama (Para asegurarse que tu rama est\xe1 actualizada)\ngit log (Para identificar el punto de partida com\xfan (identificador) , en este caso es el commit B)\ngit rebase rama_objetivo (Para iniciar el rebase)\n\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Si hay conflictos, los resolvemos y ejecutamos el siguiente comando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git rebase --continue\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Una vez que se completa el rebase, puedes actualizar la rama remota con tus cambios. Puedes necesitar forzar la actualizaci\xf3n si ya has compartido la rama:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git push origin mi_rama \u2013-force\n")),(0,n.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Recuerda que la opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"--force")," se utiliza aqu\xed porque has reescrito la historia de mi_rama y necesitas forzar la actualizaci\xf3n en el repositorio remoto."),(0,n.kt)("li",{parentName:"ul"},"Es importante realizar este tipo de operaciones con precauci\xf3n, especialmente en ramas compartidas, ya que reescribir el historial puede causar problemas a otros colaboradores que est\xe9n trabajando en la misma rama.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Despu\xe9s del rebase, el historial de confirmaciones podr\xeda verse asi:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Nombre Rama"),(0,n.kt)("th",{parentName:"tr",align:null},"Historial de Commit"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"mi_rama"),(0,n.kt)("td",{parentName:"tr",align:null},"A-B-D-E-C")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Donde C es una nueva confirmaci\xf3n que incluye los cambios de C, pero ahora aplicados sobre la punta de rama_objetivo. Este proceso crea un historial de confirmaciones m\xe1s lineal, pero recuerda que al hacerlo, est\xe1s cambiando la historia de mi_rama, y si compartes esta rama con otros colaboradores, puede causar conflictos si no se hace correctamente. Por lo tanto, es recomendable usar rebase con precauci\xf3n, especialmente en ramas compartidas."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"},"M\xe1s informaci\xf3n."))),(0,n.kt)("h4",{id:"merge"},"Merge"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cuando tu commit , lo tienes que mezclar con otro commit , se crea un nuevo commit que es la mezcla de los dos."),(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git merge")," permite tomar las l\xedneas(ramas) independientes de desarrollo creadas por ",(0,n.kt)("strong",{parentName:"li"},"git branch")," e integrarlas en una sola rama."),(0,n.kt)("li",{parentName:"ul"},"Ten en cuenta que la rama actual se actualizar\xe1 para reflejar la fusi\xf3n, pero la rama de destino no se ver\xe1 afectada en absoluto. Una vez m\xe1s, esto significa que ",(0,n.kt)("strong",{parentName:"li"},"git merge")," se suele utilizar junto con ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," para seleccionar la rama actual y ",(0,n.kt)("strong",{parentName:"li"},"git branch -d")," para eliminar la rama de destino obsoleta."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git merge")," se utiliza para combinar dos ramas. En estos casos, ",(0,n.kt)("strong",{parentName:"li"},"git merge")," toma dos punteros de confirmaci\xf3n, normalmente los extremos de la rama, y encuentra una confirmaci\xf3n base com\xfan entre ellos. "),(0,n.kt)("li",{parentName:"ul"},'Una vez que Git encuentra una confirmaci\xf3n base en com\xfan, crea una "confirmaci\xf3n de fusi\xf3n" nueva que combina los cambios de ambas ramas.'),(0,n.kt)("li",{parentName:"ul"},"Supongamos que tenemos una rama de funci\xf3n nueva que se basa en la rama main. Ahora, queremos fusionar esa rama de funci\xf3n con la rama main:")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:7afd8460-b7bf-4c42-b997-4f5cf24f21e8/01%20Branch-2%20kopiera.png?cdnVersion=1316",alt:"RamaMerge"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Al invocar este comando, la rama de funci\xf3n especificada se fusionar\xe1 con la rama actual, la cual asumiremos que es la main. Git determinar\xe1 el algoritmo de fusi\xf3n autom\xe1ticamente:")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:c6db91c1-1343-4d45-8c93-bdba910b9506/02%20Branch-1%20kopiera.png?cdnVersion=1316",alt:"RamaMerge2"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Al crear una confirmaci\xf3n de fusi\xf3n, Git tratar\xe1 de fusionar autom\xe1ticamente los historiales independientes. Sin embargo, si encuentra datos que se han cambiado en ambos historiales, no podr\xe1 combinarlos de ese modo. En ese caso, se crea un conflicto de control de versiones y Git solicitar\xe1 la intervenci\xf3n del usuario para poder continuar.")),(0,n.kt)("h4",{id:"fusi\xf3n-de-avance-r\xe1pido"},"Fusi\xf3n de avance r\xe1pido"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Puede que se produzca una fusi\xf3n con avance r\xe1pido cuando hay un proceso lineal desde el extremo de la rama actual hasta la rama de destino. En lugar de fusionar \u201crealmente\u201d las ramas, lo \xfanico que tiene que hacer Git para integrar los historiales es mover el extremo de la rama actual al extremo de la rama de destino (es decir, realizar un \u201cavance r\xe1pido\u201d). De este modo, combina de manera eficaz los historiales, ya que todas las confirmaciones alcanzables desde la rama de destino est\xe1n ahora disponibles a trav\xe9s de la rama actual."),(0,n.kt)("li",{parentName:"ul"},"Por ejemplo, una fusi\xf3n con avance r\xe1pido de una rama de funci\xf3n en una main se ver\xeda de la siguiente manera:\n",(0,n.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:d90f2536-7951-4e5e-ab79-f45a502fb4c8/03-04%20Fast%20forward%20merge.svg?cdnVersion=1316",alt:"Fusi\xf3n Rapida merge"}))),(0,n.kt)("h4",{id:"fusi\xf3n-de-3-v\xedas"},"Fusi\xf3n de 3 v\xedas"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Sin embargo, no es posible una fusi\xf3n con avance r\xe1pido si las ramas han divergido. Cuando no hay un proceso lineal hacia la rama de destino, Git no tiene m\xe1s opci\xf3n que combinarlas mediante una fusi\xf3n de 3 v\xedas. "),(0,n.kt)("li",{parentName:"ul"},"Las fusiones de 3 v\xedas utilizan una confirmaci\xf3n espec\xedfica para unir dos historiales. Esta fusi\xf3n recibe su nombre del hecho de que Git utiliza tres confirmaciones para generar la confirmaci\xf3n de fusi\xf3n: los dos extremos de la rama y su predecesor com\xfan:")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:91aece4a-8fa0-4fc3-bae9-69d51932f104/05-06%20Fast%20forward%20merge.svg?cdnVersion=1316",alt:"Fusi\xf3n de 3 v\xedas merge"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A muchos desarrolladores les gusta utilizar las fusiones con avance r\xe1pido (facilitadas a trav\xe9s del comando rebase) para funciones peque\xf1as o correcciones de errores, mientras que se reservan las fusiones de tres v\xedas para la integraci\xf3n de funciones con una ejecuci\xf3n de mayor duraci\xf3n. En este \xfaltimo caso, la confirmaci\xf3n de fusi\xf3n resultante sirve como una uni\xf3n simb\xf3lica de las dos ramas."),(0,n.kt)("li",{parentName:"ul"},"La opcion ",(0,n.kt)("strong",{parentName:"li"},"\u2013no-ff")," siempre genera una confirmaci\xf3n de fusi\xf3n , incluso si se trata de una fusi\xf3n de avance r\xe1pido."),(0,n.kt)("li",{parentName:"ul"},'Si ocurre alg\xfan conflicto , el comando git status muestra qu\xe9 archivos se deben resolver. Los conflictos se marcan con los caracteres: "<<<<<<<, =======, y >>>> >>>".'),(0,n.kt)("li",{parentName:"ul"},"Una vez identificadas las secciones conflictivas, puedes entrar y arreglar la fusi\xf3n a tu gusto. Cuando est\xe9s listo para terminar la fusi\xf3n, lo \xfanico que tienes que hacer es ejecutar ",(0,n.kt)("strong",{parentName:"li"},"git add")," en los archivos conflictivos para indicar a Git que se han resuelto. Seguidamente, ejecutas un ",(0,n.kt)("strong",{parentName:"li"},"git commit")," normal para generar la confirmaci\xf3n de fusi\xf3n. El proceso es exactamente el mismo que el de la confirmaci\xf3n de una instant\xe1nea normal, lo que significa que es f\xe1cil para los desarrolladores habituales gestionar sus propias fusiones."),(0,n.kt)("li",{parentName:"ul"},"Ten en cuenta que los conflictos de fusi\xf3n solo se producir\xe1n en el caso de una fusi\xf3n de 3 v\xedas. Los cambios conflictivos en una fusi\xf3n de avance r\xe1pido no son posibles.")),(0,n.kt)("h2",{id:"git-switch-y-restore"},"Git switch y restore"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("em",{parentName:"strong"},"Git checkout"))," es uno de esos comandos de git que dependiendo del contexto en el que se utilice realiza una u otra cosa. Un todo terreno, que en muchos casos quiz\xe1s pueda confundir a usuarios con pocos conocimientos sobre git."),(0,n.kt)("li",{parentName:"ul"},"Estos dos comandos realizan funciones de ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," pero, el nombre de este comando quiz\xe1s lo hace un poco m\xe1s intuitivo.")),(0,n.kt)("h4",{id:"git-restore"},"Git restore"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El ",(0,n.kt)("strong",{parentName:"li"},"git restore")," es una nueva opci\xf3n cuando estamos trabajando y necesitamos restaurar alg\xfan archivo o el proyecto por completo."),(0,n.kt)("li",{parentName:"ul"},"Con ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," podemos hacer lo mismo, pero ",(0,n.kt)("strong",{parentName:"li"},"git restore")," es especificamente para trabajar con esta parte de restauraci\xf3n de archivos o proyectos."),(0,n.kt)("li",{parentName:"ul"},"Este comando restaura (como induce a pensar el nombre del comando) el estado de un archivo a una revisi\xf3n espec\xedfica de git. De manera predeterminada lo hace al estado de la rama actual."),(0,n.kt)("li",{parentName:"ul"},"Tambi\xe9n se pueden restaurar a un commit diferente pas\xe1ndole el commit con la opci\xf3n \u2013source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git restore archivo1.txt --source f544960\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Con esto al archivo1.txt lo restauraremos al el estado que ten\xeda en el commit f544960")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-restore"},"M\xe1s informaci\xf3n"))),(0,n.kt)("h4",{id:"git-switch"},"Git switch"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El ",(0,n.kt)("strong",{parentName:"li"},"git switch")," viene como una alternativa cuando estamos trabajando con ramas. Con ",(0,n.kt)("strong",{parentName:"li"},"git checkout")," podemos crear nuevas  ramas y tambi\xe9n alternar entre ellas, y con git switch podemos hacer lo mismo."),(0,n.kt)("li",{parentName:"ul"},"Sirve para cambiar entre ramas y poder crearlas si no existen."),(0,n.kt)("li",{parentName:"ul"},"En nuestro proyecto necesitamos crear una nueva rama con el nombre nueva-branch en nuestro proyecto, podr\xedamos usar el siguiente comando:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git switch -c nueva-branch\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Con la opcion ",(0,n.kt)("strong",{parentName:"li"},"-c")," (crear) git crear\xe1 la nueva rama y cambiar\xe1 a ella. ")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Para cambiar a la nueva rama:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git switch nuevo-branch\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El switch tambi\xe9n nos proporciona un atajo muy interesante cuando necesitamos seleccionar la rama master, simplemente podemos usar un signo menos (-) en lugar del nombre de la rama:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git switch -\n")),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Este comando cambia a la rama anterior seleccionada, si solo hemos seleccionado dos, podremos cambiar de una a otra con este comando, sin necesidad de escribir el nombre.")))),(0,n.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("ul",{parentName:"div"},(0,n.kt)("li",{parentName:"ul"},"Si no le pasamos la opci\xf3n ",(0,n.kt)("strong",{parentName:"li"},"-c")," switch cambiar\xe1 a la rama especificada si est\xe1 creada. ")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-switch"},"M\xe1s informaci\xf3n."))),(0,n.kt)("h2",{id:"git-reflog"},"git reflog"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Realiza un seguimiento de todo lo que has hecho localmente:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Realiza un seguimiento del historial de confirmaciones."),(0,n.kt)("li",{parentName:"ul"},"Si has hecho un  hard reset."),(0,n.kt)("li",{parentName:"ul"},"Realiza un seguimiento de ",(0,n.kt)("strong",{parentName:"li"},"git commit --amend")," tambi\xe9n."),(0,n.kt)("li",{parentName:"ul"},"etc."))),(0,n.kt)("li",{parentName:"ul"},"El reflog es estrictamente local y no forma parte del repositorio."),(0,n.kt)("li",{parentName:"ul"},"Git utiliza la herramienta ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," para realizar un seguimiento detallado de los cambios realizados en las referencias de ramas, incluyendo cambios en el puntero HEAD, que indica la posici\xf3n actual en el historial de confirmaciones. Le permite volver a cualquier confirmaci\xf3n, incluso si ninguna rama o etiqueta hace referencia a ella. Tras la reescritura de la historia, el reflog contiene informaci\xf3n sobre el estado anterior de las ramas y permite volver a ese estado si es necesario. "),(0,n.kt)("li",{parentName:"ul"},"Desglosemos la afirmaci\xf3n:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Seguimiento de cambios en referencias de ramas: Cuando realizas operaciones como confirmaciones, fusiones, cambios de rama, entre otras, Git actualiza sus referencias internas para reflejar estos cambios. ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," proporciona un historial detallado de estos cambios en las referencias del repositorio, mostrando informaci\xf3n como las marcas de tiempo y descripciones breves de cada cambio."),(0,n.kt)("li",{parentName:"ul"},"Volver a cualquier confirmaci\xf3n: El reflog almacena informaci\xf3n sobre cada cambio realizado en el repositorio, incluso si ninguna rama o etiqueta hace referencia directa a esa confirmaci\xf3n. Esto significa que puedes usar ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," para encontrar el hash de confirmaci\xf3n espec\xedfico al que deseas volver y restaurar tu repositorio a ese estado anterior."),(0,n.kt)("li",{parentName:"ul"},"Reescritura de la historia: Algunas operaciones en Git, como rebase o reset, pueden reescribir la historia del repositorio al cambiar las confirmaciones existentes. Despu\xe9s de realizar estas operaciones, la informaci\xf3n original a\xfan est\xe1 disponible en el reflog. Esto es \xfatil en situaciones donde necesitas recuperar informaci\xf3n que fue reescrita."),(0,n.kt)("li",{parentName:"ul"},"Reflog despu\xe9s de reescritura de la historia: Despu\xe9s de la reescritura de la historia, el reflog se convierte en una herramienta valiosa. Contiene informaci\xf3n sobre el estado anterior de las ramas y otras referencias, lo que te permite volver a ese estado si es necesario."),(0,n.kt)("li",{parentName:"ul"},"En resumen, ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," es una herramienta poderosa para rastrear cambios, especialmente despu\xe9s de operaciones que puedan reescribir la historia. Esto proporciona una capa adicional de seguridad al permitirte recuperar estados anteriores del repositorio, incluso cuando las referencias normales ya no apuntan a esos estados.")))),(0,n.kt)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Este comando  te mostrar\xe1 una lista de los cambios en las referencias locales y te permitir\xe1 identificar puntos de control antiguos a los que podr\xedas querer volver:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-git"},"git reflog\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El comando ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," tiene varias utilidades importantes en el contexto de Git. Aqu\xed hay algunas de las principales:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Recuperaci\xf3n de estados anteriores:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Permite volver a cualquier estado anterior del repositorio, incluso despu\xe9s de operaciones que reescriben la historia como rebase, reset, o amend."),(0,n.kt)("li",{parentName:"ul"},"Puedes usar ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," para encontrar el hash de confirmaci\xf3n al que deseas volver y luego crear una nueva rama o hacer un checkout directo a ese estado."))),(0,n.kt)("li",{parentName:"ol"},"Identificaci\xf3n de cambios recientes:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Proporciona una lista detallada de los cambios recientes en las referencias del repositorio, incluyendo movimientos de ramas, cambios en HEAD y otras operaciones importantes."),(0,n.kt)("li",{parentName:"ul"},"Facilita la identificaci\xf3n de cu\xe1ndo y c\xf3mo se realizaron ciertos cambios en el repositorio."))),(0,n.kt)("li",{parentName:"ol"},"Recuperaci\xf3n despu\xe9s de accidentes:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"En caso de accidentes o errores, ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," puede ser \xfatil para identificar y recuperar estados anteriores sin depender completamente de las ramas o etiquetas."))),(0,n.kt)("li",{parentName:"ol"},"Seguimiento de operaciones complejas:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Ayuda a realizar un seguimiento de operaciones m\xe1s complejas y menos comunes que reescriben la historia del repositorio. Esto incluye acciones como cambios forzados, rebase interactivo, y otras operaciones que pueden alterar la historia de forma significativa."))),(0,n.kt)("li",{parentName:"ol"},"Depuraci\xf3n y diagn\xf3stico:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Puede ser utilizado como una herramienta de diagn\xf3stico para entender mejor c\xf3mo ha evolucionado la historia del proyecto."),(0,n.kt)("li",{parentName:"ul"},"Facilita la identificaci\xf3n de problemas y la depuraci\xf3n al proporcionar un registro detallado de las operaciones realizadas."))),(0,n.kt)("li",{parentName:"ol"},"Exploraci\xf3n del historial:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Brinda una visi\xf3n m\xe1s detallada y granular del historial del repositorio en comparaci\xf3n con otros comandos de visualizaci\xf3n de historial como ",(0,n.kt)("strong",{parentName:"li"},"git log"),".")))))),(0,n.kt)("h4",{id:"git-reflog-vs-git-log"},"Git reflog vs git log"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git reflog")," y ",(0,n.kt)("strong",{parentName:"li"},"git log")," son comandos de Git que ofrecen informaci\xf3n sobre el historial del repositorio, pero tienen prop\xf3sitos y resultados diferentes. Aqu\xed est\xe1n las principales diferencias entre ellos:",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"Enfoque en Historia Local vs. Historia Remota:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git log")," se utiliza para ver el historial de confirmaciones del repositorio. Proporciona una vista m\xe1s completa de la historia, mostrando todas las confirmaciones en todas las ramas."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git reflog")," se centra en el historial local de las referencias, incluyendo movimientos de ramas, cambios en HEAD y otras operaciones. Est\xe1 m\xe1s orientado a cambios locales y acciones espec\xedficas en lugar de proporcionar una vista global de la historia del repositorio."))),(0,n.kt)("li",{parentName:"ol"},"Visi\xf3n de la Historia Completa vs. Detalles Locales:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git log")," muestra una vista completa y detallada del historial de confirmaciones con informaci\xf3n como los autores, fechas y mensajes de confirmaci\xf3n. Es \xfatil para comprender la evoluci\xf3n general del proyecto."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git reflog")," muestra detalles espec\xedficos sobre los cambios en las referencias locales, como las transiciones de ramas y cambios en HEAD. Es m\xe1s \xfatil para entender cambios locales recientes y para la recuperaci\xf3n despu\xe9s de operaciones que reescriben la historia."))),(0,n.kt)("li",{parentName:"ol"},"Reversi\xf3n y Recuperaci\xf3n:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git log")," es principalmente una herramienta de visualizaci\xf3n y no proporciona una forma directa de revertir o recuperar cambios."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git reflog")," es m\xe1s \xfatil para revertir o recuperar estados anteriores del repositorio, especialmente despu\xe9s de operaciones que reescriben la historia, ya que almacena informaci\xf3n detallada sobre los cambios en las referencias locales."))),(0,n.kt)("li",{parentName:"ol"},"Acceso a Confirmaciones Eliminadas:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git log")," muestra solo las confirmaciones a las que apuntan las ramas y etiquetas actuales, y puede omitir confirmaciones eliminadas o no referenciadas directamente."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"git reflog")," conserva informaci\xf3n sobre todas las confirmaciones, incluso aquellas que no est\xe1n referenciadas por ninguna rama o etiqueta, lo que permite acceder a estados anteriores incluso despu\xe9s de cambios significativos."))))),(0,n.kt)("li",{parentName:"ul"},"En resumen, mientras que ",(0,n.kt)("strong",{parentName:"li"},"git log")," es una herramienta de visualizaci\xf3n integral para explorar la historia completa del repositorio, ",(0,n.kt)("strong",{parentName:"li"},"git reflog")," se centra en los cambios locales en las referencias y proporciona una forma de revertir o recuperar estados espec\xedficos, especialmente despu\xe9s de operaciones que reescriben la historia. Ambos son \xfatiles en diferentes contextos y para diferentes prop\xf3sitos.")),(0,n.kt)("h2",{id:"git-reset"},"Git reset"),(0,n.kt)("h2",{id:"git-stash"},"Git stash"),(0,n.kt)("h2",{id:"git-diff"},"git diff"),(0,n.kt)("h2",{id:"git-rm"},"git rm"),(0,n.kt)("h2",{id:"git-revert"},"git revert"),(0,n.kt)("h2",{id:"git-clone"},"git clone"),(0,n.kt)("h2",{id:"git-request-pull"},"git request-pull"),(0,n.kt)("h2",{id:"git-remote"},"git remote"),(0,n.kt)("h2",{id:"git-branch"},"git branch"),(0,n.kt)("h2",{id:"comandos-para-ver-informaci\xf3n"},"Comandos para ver informaci\xf3n"),(0,n.kt)("h4",{id:"git-version-o-git---version"},"Git version o Git --version"),(0,n.kt)("h4",{id:"git-help"},"Git help"),(0,n.kt)("h4",{id:"git-status--s"},"Git status -s"),(0,n.kt)("h4",{id:"git-log---oneline"},"Git log --oneline"))}u.isMDXComponent=!0}}]);