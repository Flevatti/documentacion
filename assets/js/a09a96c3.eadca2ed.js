"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[1074],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>m});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),c=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},p=function(e){var a=c(e.components);return r.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=t,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,s(s({ref:a},p),{},{components:n})):r.createElement(g,s({ref:a},p))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7755:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),t=(n(7294),n(3905));const o={sidebar_position:8},s='Conceptos de "C#" - Parte 3',i={unversionedId:"C--/guiaC3",id:"C--/guiaC3",title:'Conceptos de "C#" - Parte 3',description:'" - Parte 3',source:"@site/docs/C--/guiaC3.md",sourceDirName:"C--",slug:"/C--/guiaC3",permalink:"/documentacion/docs/C--/guiaC3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/guiaC3.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"C",previous:{title:'Conceptos de "C#" - Parte 2',permalink:"/documentacion/docs/C--/guiaC2"},next:{title:"Investigar",permalink:"/documentacion/docs/C--/investigar"}},l={},c=[{value:"Palabra clave nameof",id:"palabra-clave-nameof",level:2},{value:"Record",id:"record",level:2},{value:"\xbfY cu\xe1l es la diferencia con los dos anteriores que seguramente ya conoces?",id:"y-cu\xe1l-es-la-diferencia-con-los-dos-anteriores-que-seguramente-ya-conoces",level:4},{value:"Declarar un record",id:"declarar-un-record",level:4},{value:"Manejar herencia",id:"manejar-herencia",level:4},{value:"Record Structs",id:"record-structs",level:4},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Registros posicionales",id:"registros-posicionales",level:4},{value:"Pero, \xbfy si necesit\xe1semos constructores adicionales?",id:"pero-y-si-necesit\xe1semos-constructores-adicionales",level:4},{value:"With",id:"with",level:4},{value:"Readonly",id:"readonly",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4}],p={toc:c};function d(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"conceptos-de-c---parte-3"},'Conceptos de "C#" - Parte 3'),(0,t.kt)("h2",{id:"palabra-clave-nameof"},"Palabra clave nameof"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"La palabra clave nameof genera el nombre de una variable, un tipo de dato  , un miembro , un espacio de nombre , etc como un String."),(0,t.kt)("li",{parentName:"ul"},"La expresi\xf3n nameof se eval\xfaa en tiempo de compilaci\xf3n y no tiene efecto en tiempo de ejecuci\xf3n."),(0,t.kt)("li",{parentName:"ul"},"Cuando el operando es un tipo de dato o un espacio de nombre, el nombre generado no est\xe1 completo:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"Console.WriteLine(nameof(System.Collections.Generic));  // output: Generic\nConsole.WriteLine(nameof(List<int>));  // output: List\nConsole.WriteLine(nameof(List<int>.Count));  // output: Count\nConsole.WriteLine(nameof(List<int>.Add));  // output: Add\n\nvar numbers = new List<int> { 1, 2, 3 };\nConsole.WriteLine(nameof(numbers));  // output: numbers\nConsole.WriteLine(nameof(numbers.Count));  // output: Count\nConsole.WriteLine(nameof(numbers.Add));  // output: Add\n\n")),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/operators/nameof"},"Expresi\xf3n nameof (referencia de C#)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.delftstack.com/es/howto/csharp/csharp-nameof/#google_vignette"},"La expresi\xf3n nameof en C#"))))),(0,t.kt)("h2",{id:"record"},"Record"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Antes solo pod\xedamos trabajar con dos tipos de estructuras para almacenar informaci\xf3n: class y struct."),(0,t.kt)("li",{parentName:"ul"},"Con C# 9 o posterior disponemos de un tercer elemento para almacenar informaci\xf3n: record, tambi\xe9n conocido como registro.")),(0,t.kt)("h4",{id:"y-cu\xe1l-es-la-diferencia-con-los-dos-anteriores-que-seguramente-ya-conoces"},"\xbfY cu\xe1l es la diferencia con los dos anteriores que seguramente ya conoces?"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Con las clases y las estructuras tenemos el problema de que pueden ser alterados. Los objetos de tipo clase son tipos por referencia, mientras que las estructuras son tipos por valor, que lo m\xe1s que se pod\xedan acercar a un objeto inmutable era declar\xe1ndolas como readonly."),(0,t.kt)("li",{parentName:"ul"},'Los objetos de tipo record, son objetos por referencia que vienen a solucionar el problema existente a la hora de generar objetos inmutables, esto es, objetos que no pueden variar. Por otro lado est\xe1n "a caballo" entre clases y estructuras, puesto que tienen caracter\xedsticas de los dos.'),(0,t.kt)("li",{parentName:"ul"},"Las similitudes con ambos elementos, los vemos inmediatamente al realizar una comparaci\xf3n entre dos registros:",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"Podremos emplear el operador de igualdad ==, puesto que al ser tipos por referencia nos va a indicar si se tratan de objetos con la misma referencia o no."),(0,t.kt)("li",{parentName:"ul"},"Al igual que con las estructuras, el m\xe9todo Equals nos va a decir si son iguales o no, en funci\xf3n de los valores que tiene."))),(0,t.kt)("li",{parentName:"ul"},"Los records son datos inmutables que b\xe1sicamente se usan como transporte de datos."),(0,t.kt)("li",{parentName:"ul"},"Vienen a sustituir a los objetos conocidos como DTOs que b\xe1sicamente no tienen comportamiento solamente traen las propiedades  para transportar datos.")),(0,t.kt)("h4",{id:"declarar-un-record"},"Declarar un record"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Para que declarar un r\xe9cord con propiedades inmutables puedes usar una sintaxis similar a la de una clase, por ejemplo:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public record Person\n{\n    public string FirstName { get; init; }\n    public string LastName { get; init; }\n}\n\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Tambien se puede declarar un record con propiedades inmutables con una nueva sintaxis conocida como par\xe1metros posicionales:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public record Person(string FirstName, string LastName);\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Un record puede ser partial(parcial), es decir que lo puedes dividir en varios archivos."),(0,t.kt)("li",{parentName:"ul"},"Los records soportan herencia.")),(0,t.kt)("h4",{id:"manejar-herencia"},"Manejar herencia"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Los records pueden heredar unicamente de otro record. Un record no puede extender una clase diferente a object.")),(0,t.kt)("h4",{id:"record-structs"},"Record Structs"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"A partir de C# 10 puedes declarar un record usando record struct o readonly record struct.")),(0,t.kt)("h4",{id:"ejemplo"},"Ejemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public record Persona {\n    public string Nombre { get; set; }\n    public string Apellidos { get; set; }\n\n    public Persona (string nombre, string apellidos) {\n        Nombre = nombre;\n        Apellidos = apellidos;\n    }\n}\n\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Una vez tenemos nuestro registro, vamos crear varios objetos de este tipo:",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"Dos de ellos ser\xe1n copias uno del otro."),(0,t.kt)("li",{parentName:"ul"},"Un tercer objeto nuevo, pero con los mismos valores."),(0,t.kt)("li",{parentName:"ul"},"Un \xfaltimo objeto con diferentes valores.")))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\nvar persona2 = persona1;\nvar persona3 = new Persona ("Rub\xe9n", "Rubio");\nvar persona4 = new Persona ("Rub\xe9n", "R.");\n\n')),(0,t.kt)("h4",{id:"registros-posicionales"},"Registros posicionales"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Al principio dec\xedamos que vienen a solucionar la definici\xf3n de tipos inmutables, pero... con lo que hemos visto hasta ahora es posible modificar su contenido, por lo que no son inmutables \ud83e\udd14."),(0,t.kt)("li",{parentName:"ul"},"La declaraci\xf3n mediante registros posicionales nos va a permitir, por un lado, simplificar el cuerpo del registro y, por otro, crear un registro realmente inmutable, siendo el propio compilador el que genere por nosotros toda la fontaner\xeda de constructor, deconstructores y propiedades."),(0,t.kt)("li",{parentName:"ul"},"Veamos c\xf3mo reescribir\xedamos el registro Persona para hacerlo inmutable:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public record Persona (string Nombre, string Apellidos);\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El ejemplo anterior ser\xeda equivalente a este otro c\xf3digo:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public record Persona {\n    public string Nombre { get; init; }\n    public string Apellidos { get; init; }\n\n    public Persona (string nombre, string apellidos) {\n        Nombre = nombre;\n        Apellidos = apellidos;\n    }\n\n    public void Deconstruct (out string nombre, out string apellidos) {\n        nombre = Nombre;\n        apellidos = Apellidos;\n    }\n}\n\n")),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},"Si lo observamos detenidamente, las propiedades no tienen un set, sino que son accesibles \xfanicamente en la inicializaci\xf3n, puesto que son propiedades inicializadoras. De esta forma, ya no podremos alterar el registro siendo realmente inmutable."),(0,t.kt)("li",{parentName:"ul"},"Adem\xe1s, es considerable la reducci\xf3n de c\xf3digo, puesto que hemos reducido toda la declaraci\xf3n a una \xfanica l\xednea de c\xf3digo.")))),(0,t.kt)("h4",{id:"pero-y-si-necesit\xe1semos-constructores-adicionales"},"Pero, \xbfy si necesit\xe1semos constructores adicionales?"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Para a\xf1adir m\xe1s constructores a nuestro registro, bastar\xe1 con a\xf1adirlos entre llaves a continuaci\xf3n de la declaraci\xf3n y siempre llamando al constructor base mediante el empleo de this:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'public record Persona (string Nombre, string Apellidos) {\n    public Persona (string Nombre): this (Nombre, "") {}\n};\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},"En ese ejemplo se cre\xf3 dos constructores:",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"Persona(String Nombre , String Apellidos)."),(0,t.kt)("li",{parentName:"ul"},"Persona(String Nombre).")))))),(0,t.kt)("h4",{id:"with"},"With"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Por \xfaltimo, veremos c\xf3mo podemos instanciar registros con ayuda de with, que no es m\xe1s que una forma de generar un registro a partir de otro, previamente existente, al que indicaremos que alguna de sus propiedades debe tener un valor diferente."),(0,t.kt)("li",{parentName:"ul"},"En primer lugar, declararemos un registro a partir del cual copiar:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"A continuaci\xf3n, realizaremos la copia mediante igualdad, pero a\xf1adiremos la palabra clave with seguida de la declaraci\xf3n, entre llaves, de los valores que deben ser modificados:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'var persona2 = persona1 with { Nombre = "Fernando" };\n')),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"De esta forma tendremos una copia de persona1 en persona2 pero variando la propiedad Nombre:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\nvar persona2 = persona1 with { Nombre = "Fernando" };\nConsole.WriteLine ($"Persona 1: {persona1}");\nConsole.WriteLine ($"Persona 2: {persona2}");\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://aspnetcoremaster.com/csharp/csharp-records.html"},"C# Records")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/introduccion-a-los-registros-record-y-los-objetos-inmutables-de-csharp-9.aspx"},"Introducci\xf3n a los registros (record) y los objetos inmutables de C# 9")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records"},"Create record types")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://happydevops.com/2022/05/07/que-son-los-record-types-en-c/"},"\xbfQu\xe9 son los record types en C#?")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://geeks.ms/jorge/2020/09/25/c-9-0-specification-records/"},"C# 9.0 \u2013 Specification \u2013 Records"))))),(0,t.kt)("h2",{id:"readonly"},"Readonly"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El modificador ",(0,t.kt)("strong",{parentName:"li"},"readonly")," indica que la asignaci\xf3n del valor de un campo se puede realizar en la propia declaraci\xf3n del campo, o bien, en un constructor de la misma clase. Una vez que el constructor de la clase finaliza, no se puede cambiar."),(0,t.kt)("li",{parentName:"ul"},"Si el modificador de solo lectura se usa con un campo de tipo valor, entonces el campo es inmutable. "),(0,t.kt)("li",{parentName:"ul"},"Si el modificador de solo lectura se usa con un campo de tipo de referencia, entonces el modificador de solo lectura evita que el campo sea reemplazado por diferentes instancias del mismo tipo, aqu\xed el modificador de solo lectura no impide que los datos de la instancia se modifiquen.")),(0,t.kt)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n  \nclass GFG {\n  \n    \n    public readonly string str1;\n    public readonly string str2;\n  \n    public readonly string str3 = "gfg";\n  \n    public GFG(string a, string b)\n    {\n  \n        str1 = a;\n        str2 = b;\n        Console.WriteLine("Display value of string 1 {0}, "\n                         + "and string 2 {1}", str1, str2);\n    }\n  \n    static public void Main()\n    {\n        GFG ob = new GFG("GeeksforGeeks", "GFG");\n    }\n}\n\n')),(0,t.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,t.kt)("div",{parentName:"div",className:"admonition-heading"},(0,t.kt)("h5",{parentName:"div"},(0,t.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,t.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,t.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,t.kt)("div",{parentName:"div",className:"admonition-content"},(0,t.kt)("ul",{parentName:"div"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://geeks.ms/jorge/2019/07/17/poner-una-propiedad-a-readonly-no-te-asegura-que-sea-readonly-ii/"},"Poner una propiedad a readonly no te asegura que sea readonly II")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.infoworld.com/article/3546242/how-to-use-const-readonly-and-static-in-csharp.html"},"How to use const, readonly, and static in C#")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/readonly-in-c-sharp/"},"Readonly in C#")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly"},"readonly (C# Reference)"))))))}d.isMDXComponent=!0}}]);