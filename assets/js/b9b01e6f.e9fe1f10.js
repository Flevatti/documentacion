"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[701],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>p});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),m=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=m(e.components);return t.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=m(n),p=i,k=d["".concat(s,".").concat(p)]||d[p]||u[p]||r;return n?t.createElement(k,l(l({ref:a},c),{},{components:n})):t.createElement(k,l({ref:a},c))}));function p(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=n[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4241:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:9},l='Conceptos de "C#" - Parte 4',o={unversionedId:"C--/guiaC4",id:"C--/guiaC4",title:'Conceptos de "C#" - Parte 4',description:'" - Parte 4',source:"@site/docs/C--/guiaC4.md",sourceDirName:"C--",slug:"/C--/guiaC4",permalink:"/documentacion/docs/C--/guiaC4",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/guiaC4.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"C",previous:{title:'Conceptos de "C#" - Parte 3',permalink:"/documentacion/docs/C--/guiaC3"},next:{title:"Investigar",permalink:"/documentacion/docs/C--/investigar"}},s={},m=[{value:"Params",id:"params",level:2},{value:"\xbfPor qu\xe9 usamos params?",id:"por-qu\xe9-usamos-params",level:4},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Otro ejemplo",id:"otro-ejemplo",level:4},{value:"Arrays",id:"arrays",level:2},{value:"Arrays unidimensionales",id:"arrays-unidimensionales",level:4},{value:"Arrays multidimensionales",id:"arrays-multidimensionales",level:4},{value:"Arrays en forma de estrella(jagged Arrays)",id:"arrays-en-forma-de-estrellajagged-arrays",level:4},{value:"Declaraci\xf3n de arrays",id:"declaraci\xf3n-de-arrays",level:4},{value:"Inicializaci\xf3n",id:"inicializaci\xf3n",level:4},{value:"1- Implicita",id:"1--implicita",level:4},{value:"2- Expl\xedcita",id:"2--expl\xedcita",level:4},{value:"Asignaci\xf3n de valores",id:"asignaci\xf3n-de-valores",level:4},{value:"Arrays de objetos y estructuras personalizadas",id:"arrays-de-objetos-y-estructuras-personalizadas",level:4},{value:"Acceder a elementos de array",id:"acceder-a-elementos-de-array",level:4},{value:"Cambiar elementos de un array",id:"cambiar-elementos-de-un-array",level:4},{value:"C\xf3mo recorrer un array",id:"c\xf3mo-recorrer-un-array",level:4},{value:"1- For",id:"1--for",level:4},{value:"2- Foreach",id:"2--foreach",level:4},{value:"3- Iteradores de la clase Array",id:"3--iteradores-de-la-clase-array",level:4},{value:"4- M\xe9todo Array.ForEach()",id:"4--m\xe9todo-arrayforeach",level:4},{value:"Longitud de un array",id:"longitud-de-un-array",level:4},{value:"C\xf3mo ordenar un array",id:"c\xf3mo-ordenar-un-array",level:4},{value:"1- Array.Sort()",id:"1--arraysort",level:4},{value:"2- Bubble sort",id:"2--bubble-sort",level:4},{value:"Buscar elementos en un array",id:"buscar-elementos-en-un-array",level:4},{value:"1- Array.indexOf()",id:"1--arrayindexof",level:4},{value:"2- Array.Find()",id:"2--arrayfind",level:4},{value:"3- Array.Exists()",id:"3--arrayexists",level:4},{value:"Filtrar , transformar y agregar",id:"filtrar--transformar-y-agregar",level:4},{value:"Filtrar",id:"filtrar",level:4},{value:"Transformar",id:"transformar",level:4},{value:"Agregar Elementos",id:"agregar-elementos",level:4},{value:"Eliminar elementos",id:"eliminar-elementos",level:4},{value:"Ejemplos",id:"ejemplos",level:4},{value:"2 Dimensiones",id:"2-dimensiones",level:4},{value:"Multidimensional",id:"multidimensional",level:4},{value:"Colecciones",id:"colecciones",level:2},{value:"No generica",id:"no-generica",level:4},{value:"Gen\xe9rico",id:"gen\xe9rico",level:4},{value:"Concurrent",id:"concurrent",level:4},{value:"Resumen",id:"resumen",level:4},{value:"4 Tipos",id:"4-tipos",level:4},{value:"Indexed Based",id:"indexed-based",level:4},{value:"Key Value Pair",id:"key-value-pair",level:4},{value:"Prioritized Collection",id:"prioritized-collection",level:4},{value:"Specialized Collections",id:"specialized-collections",level:4},{value:"Caracteristicas",id:"caracteristicas",level:4},{value:"Excepciones",id:"excepciones",level:5},{value:"Tipos de colecciones",id:"tipos-de-colecciones",level:4},{value:"IEnumerable",id:"ienumerable",level:4},{value:"ICollection",id:"icollection",level:4},{value:"IList",id:"ilist",level:4},{value:"IQueryable",id:"iqueryable",level:4},{value:"Colecciones indexables",id:"colecciones-indexables",level:4},{value:"Colecciones de pares-valor",id:"colecciones-de-pares-valor",level:4},{value:"Iteradores",id:"iteradores",level:4},{value:"Linq y Colecciones",id:"linq-y-colecciones",level:4},{value:"En C# existen muchas colecciones para usar, a continuaci\xf3n, explicaremos algunas.",id:"en-c-existen-muchas-colecciones-para-usar-a-continuaci\xf3n-explicaremos-algunas",level:4},{value:"List&lt;t&gt;",id:"listt",level:3},{value:"Sintaxis con new",id:"sintaxis-con-new",level:4},{value:"Sintaxis de inicializaci\xf3n de colecci\xf3n",id:"sintaxis-de-inicializaci\xf3n-de-colecci\xf3n",level:4},{value:"Add()",id:"add",level:4},{value:"Remove()",id:"remove",level:4},{value:"RemoveAt()",id:"removeat",level:4},{value:"RemoveRange()",id:"removerange",level:4},{value:"Clear()",id:"clear",level:4},{value:"RemoveAll()",id:"removeall",level:4},{value:"Sort()",id:"sort",level:4},{value:"Indice",id:"indice",level:4},{value:"Queue&lt;t&gt;",id:"queuet",level:3},{value:"Stack&lt;T&gt;",id:"stackt",level:3},{value:"Dictionary&lt;TKey,TValue&gt;",id:"dictionarytkeytvalue",level:3},{value:"HashSet&lt;T&gt;",id:"hashsett",level:3},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"ArrayList",id:"arraylist",level:3},{value:"M\xe9todo Add y AddRange",id:"m\xe9todo-add-y-addrange",level:4},{value:"Indice",id:"indice-1",level:4},{value:"Propiedad count",id:"propiedad-count",level:4},{value:"Eliminar elementos",id:"eliminar-elementos-1",level:4},{value:"Insertar elementos",id:"insertar-elementos",level:4},{value:"Buscar elementos",id:"buscar-elementos",level:4},{value:"Ordenar",id:"ordenar",level:4},{value:"SortedSet&lt;T&gt;",id:"sortedsett",level:3},{value:"HashTable",id:"hashtable",level:3},{value:"Ejemplo",id:"ejemplo-2",level:4},{value:"SortedList",id:"sortedlist",level:3},{value:"SortedList&lt;TKey, TValue&gt;",id:"sortedlisttkey-tvalue",level:3},{value:"Stack",id:"stack",level:3},{value:"Queue",id:"queue",level:3},{value:"Otros",id:"otros",level:3}],c={toc:m};function u(e){let{components:a,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"conceptos-de-c---parte-4"},'Conceptos de "C#" - Parte 4'),(0,i.kt)("h2",{id:"params"},"Params"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Params es una palabra clave importante en C# . Se utiliza como un argumento que puede tomar los valores de varias variables que se pasan como par\xe1metro. \xd3sea puede tratar varios par\xe1metros como un array (matriz)."),(0,i.kt)("li",{parentName:"ul"},'Al usar "Params", el compilador convierte los par\xe1metros pasados a un m\xe9todo a una matriz temporal, y esta matriz luego se usa para recuperar los par\xe1metros del m\xe9todo.'),(0,i.kt)("li",{parentName:"ul"},"Punto importante sobre la palabra clave Params:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Es \xfatil cuando el programador no tiene conocimientos previos sobre la cantidad de par\xe1metros a utilizar."),(0,i.kt)("li",{parentName:"ul"},"Solo se permite una palabra clave Params y no se permitir\xe1n par\xe1metros adicionales en la declaraci\xf3n de funci\xf3n despu\xe9s de una palabra clave params."),(0,i.kt)("li",{parentName:"ul"},"La longitud del params ser\xe1 cero si no se pasan argumentos."))),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, una clase Student con un m\xe9todo TotalMarks que devuelve la suma de todas las calificaciones. Cada grado podr\xe1 tener un n\xfamero diferente de materias y sus respectivas calificaciones. El 3er grado podr\xe1 tener 3 materias solamente. El octavo grado puede tener 4 materias mientras que el noveno grado puede tener 5 materias. Podemos usar params en este caso y pasar 3, 4 y 5 valores separados por comas.  ")),(0,i.kt)("h4",{id:"por-qu\xe9-usamos-params"},"\xbfPor qu\xe9 usamos params?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La palabra clave params en C# se usa para declarar un m\xe9todo que no conoce la cantidad de par\xe1metros. "),(0,i.kt)("li",{parentName:"ul"},"En lugar de utilizar varios m\xe9todos sobrecargados para pasar m\xfaltiples valores, podemos simplemente crear una matriz y pasarla como un argumento o una lista de valores separados por comas."),(0,i.kt)("li",{parentName:"ul"},"Digamos que tenemos una clase, Estudiante. Tiene dos m\xe9todos, TotalMarks y AllSubjects. Cada uno de estos m\xe9todos toma un par\xe1metro de tipo params. Como puede ver en el c\xf3digo siguiente, params es una matriz:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Students\n{\n    public static int TotalMarks(params int[] list)\n    {\n        int total = 0;\n        for (int i = 0; i < list.Length; i++)\n            total += list[i];\n        return total;\n    }\n\n    public static string AllSubjects(params string[] subjects)\n    {\n        System.Text.StringBuilder builder = new System.Text.StringBuilder();\n        for (int i = 0; i < subjects.Length; i++)\n        {\n            builder.Append(subjects[i]);\n            builder.Append(" ");\n        }\n        return builder.ToString();\n    }\n}\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora, para llamar a estos m\xe9todos, podemos crear una matriz y pasarla como par\xe1metro. Alternativamente, tambi\xe9n podemos pasar valores separados por comas como  par\xe1metros. El siguiente fragmento de c\xf3digo muestra ambos ejemplos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// Total for 3rd grade. Pass 3 comma separate values as params\nConsole.WriteLine("Params with 3 parameters");\nint total3 = Students.TotalMarks(8, 9, 8);\n// Print result\nConsole.WriteLine(total3);\n// Create an array of strings\nstring[] subs = {"English", "Reading", "Writing"};\n// Pass array of strings as a params and print result\nConsole.WriteLine(Students.AllSubjects(subs));\n\n')),(0,i.kt)("h4",{id:"ejemplo"},"Ejemplo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"\nusing System;\nnamespace Examples {\n      \nclass Geeks {\n      \n\n    public static int Add(params int[] ListNumbers)\n    {\n        int total = 0;\n          \n       \n        foreach(int i in ListNumbers) \n        {\n            total += i;\n        }\n        return total;\n    }\n          \n// Driver Code    \nstatic void Main(string[] args)\n{\n      \n \n    int y = Add(12,13,10,15,56);\n      \n   \n    Console.WriteLine(y);\n}\n}\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"No es necesario definir el tama\xf1o de la matriz porque al usar la palabra clave params en el programa anterior, los datos enteros tendr\xe1n el formato:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"[0]"," = 12"),(0,i.kt)("li",{parentName:"ul"},"[1]"," = 13"),(0,i.kt)("li",{parentName:"ul"},"[2]"," = 10"),(0,i.kt)("li",{parentName:"ul"},"[3]"," = 15"),(0,i.kt)("li",{parentName:"ul"},"[4]"," = 56")))))),(0,i.kt)("h4",{id:"otro-ejemplo"},"Otro ejemplo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los params de tipo objeto permitir\xe1n cualquier tipo de argumentos y cualquier n\xfamero de argumentos de la siguiente manera:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'\nusing System; \n  \nnamespace Example2 {\nclass Geeks {\n      \n\n        public void result(params object[] array) \n        { \n            for (int i = 0; i < array.Length; i++) \n            { \n                  \n                // Display result\n                Console.WriteLine(array[i]); \n            }     \n        } \n  \n\n    static void Main(string[] args) \n    { \n        Geeks gfg = new Geeks(); \n          \n   \n        gfg.result("Geeks", "GFG",\n                   "ProGeek Cup 2.0",\n                        "G4G", "100");\n    } \n  \n} \n} \n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/UploadFile/c63ec5/use-params-keyword-in-C-Sharp/"},"Params Keyword in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/c-sharp-params/"},"C# | Params")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://linuxhint.com/params-csharp/"},"Ultimate Guide to Use C# params Keyword")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.shekhali.com/csharp-params-keyword/"},"Params Keyword in C# With Examples")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dotneteers.net/params-performance-in-c/"},"Params performance in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.educba.com/c-sharp-params/"},"C# Params")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params"},"params (C# Reference)"))))),(0,i.kt)("h2",{id:"arrays"},"Arrays"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Un array en C# es una estructura de datos que permite almacenar una colecci\xf3n de elementos(valores) del mismo tipo en una \xfanica variable."),(0,i.kt)("li",{parentName:"ul"},"Estos elementos est\xe1n organizados de manera secuencial y pueden ser accedidos mediante un \xedndice (index), que indica su posici\xf3n dentro del array. El primer elemento del array siempre tiene el \xedndice 0, el segundo tiene el \xedndice 1, y as\xed sucesivamente."),(0,i.kt)("li",{parentName:"ul"},"Los arreglos (arrays) en C# son fundamentales en la programaci\xf3n, ya que permiten almacenar y manipular grandes cantidades de informaci\xf3n de manera estructurada y eficiente."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, pueden usarse para almacenar una lista de n\xfameros enteros, una colecci\xf3n de objetos o incluso otros arrays."),(0,i.kt)("li",{parentName:"ul"},"Los vectores/Arrays/matrices en C# pueden clasificarse en varias categor\xedas principales.")),(0,i.kt)("h4",{id:"arrays-unidimensionales"},"Arrays unidimensionales"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Son arrays de una sola dimensi\xf3n, que se pueden visualizar como una lista o un vector. Pueden almacenar elementos de cualquier tipo (primitivo, objeto o estructura) y se accede a sus elementos utilizando un \xfanico \xedndice."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = new int[5]; // Un array de 5 enteros\nstring[] nombres = new string[3]; // Un array de 3 cadenas\n\n")),(0,i.kt)("h4",{id:"arrays-multidimensionales"},"Arrays multidimensionales"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Son arrays que tienen m\xe1s de una dimensi\xf3n y pueden visualizarse como un cubo o una tabla."),(0,i.kt)("li",{parentName:"ul"},"Los arrays multidimensionales tambi\xe9n pueden almacenar elementos de cualquier tipo y se accede a sus elementos utilizando m\xfaltiples \xedndices, uno por cada dimensi\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Cada dimensi\xf3n es un array."),(0,i.kt)("li",{parentName:"ul"},"En un array de dos dimensiones: En las posiciones de un array tiene otro array."),(0,i.kt)("li",{parentName:"ul"},"En un array de tres dimensiones: En las posiciones de un array tiene un array y ese tambi\xe9n en sus posiciones tiene otro array"),(0,i.kt)("li",{parentName:"ul"},"Y de la misma forma, se pueden crear Arrays de 4 dimensiones o m\xe1s."),(0,i.kt)("li",{parentName:"ul"},"Entonces es multidimensional cuando hay varios Arrays anidados."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"string[, ,] cubo = new string[2, 2, 2]; // Un cubo de 2x2x2\nint[,] array2DDeclaration = new int[4, 2];\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"La cantidad de \u201ccomas\u201d dentro del corchete, indican la cantidad de dimensiones que tiene el array."),(0,i.kt)("li",{parentName:"ul"},"Una coma (\u201c,\u201d): Dos dimensiones"),(0,i.kt)("li",{parentName:"ul"},"Dos comas (\u201c,\u201d): Tres dimensiones"),(0,i.kt)("li",{parentName:"ul"},"Y asi\u2026")))),(0,i.kt)("h4",{id:"arrays-en-forma-de-estrellajagged-arrays"},"Arrays en forma de estrella(jagged Arrays)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Son arrays de arrays, donde cada elemento es a su vez un array unidimensional. Estos arrays permiten crear estructuras de datos irregulares, como matrices de diferentes longitudes. Se accede a sus elementos utilizando dos \xedndices: el primero para el array exterior y el segundo para el array interior."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[][] matrizIrregular = new int[3][]; // Un array de 3 arrays unidimensionales\nmatrizIrregular[0] = new int[4]; // El primer array tiene 4 elementos\nmatrizIrregular[1] = new int[2]; // El segundo array tiene 2 elementos\nmatrizIrregular[2] = new int[5]; // El tercer array tiene 5 elementos\n\n")),(0,i.kt)("h4",{id:"declaraci\xf3n-de-arrays"},"Declaraci\xf3n de arrays"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Un array en C# se declara especificando el tipo de dato de sus elementos seguido de corchetes vac\xedos y el nombre del array."),(0,i.kt)("li",{parentName:"ul"},"Para crear un array en C#, se utiliza la palabra clave new seguida del tipo de dato y la cantidad de elementos(tama\xf1o) que va a tener la \u201clista (array)\u201d entre corchetes."),(0,i.kt)("li",{parentName:"ul"},"Veamos un ejemplo b\xe1sico:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros;   // Declaraci\xf3n de un array de enteros\nnumeros = new int[5]; // Creaci\xf3n de un array de 5 elementos\n\n")),(0,i.kt)("h4",{id:"inicializaci\xf3n"},"Inicializaci\xf3n"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Existen dos formas de inicializar un array en C#: impl\xedcita y expl\xedcita.")),(0,i.kt)("h4",{id:"1--implicita"},"1- Implicita"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La inicializaci\xf3n impl\xedcita permite asignar los valores directamente en la declaraci\xf3n del array sin especificar su tama\xf1o. El compilador determina autom\xe1ticamente el tama\xf1o del array seg\xfan la cantidad de elementos proporcionados.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = {1, 2, 3, 4, 5}; // Inicializaci\xf3n impl\xedcita\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Entre llaves ponemos los valores que van a tener el array."),(0,i.kt)("li",{parentName:"ul"},"Cada valor se separa con una coma (\u201c,\u201d).")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Podes especificar el tama\xf1o del array (como si fuera expl\xedcita), pero es opcional.")))),(0,i.kt)("h4",{id:"2--expl\xedcita"},"2- Expl\xedcita"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En la inicializaci\xf3n expl\xedcita, se especifica el tama\xf1o del array y se asignan los valores a cada elemento individualmente. Esto se puede hacer utilizando la notaci\xf3n de corchetes y el \xedndice del elemento."),(0,i.kt)("li",{parentName:"ul"},"Con esta sintaxis asignamos un valor a una \u201cposici\xf3n (\xedndice)\u201d del array: Variable","[\xedndice]"," = valor;."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = new int[5]; // Inicializaci\xf3n expl\xedcita de un array de 5 elementos.\nnumeros[0] = 1;\nnumeros[1] = 2;\nnumeros[2] = 3;\nnumeros[3] = 4;\nnumeros[4] = 5;\n\n")),(0,i.kt)("h4",{id:"asignaci\xf3n-de-valores"},"Asignaci\xf3n de valores"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para asignar valores a elementos individuales de un array, se utiliza la notaci\xf3n de corchetes junto con el \xedndice del elemento."),(0,i.kt)("li",{parentName:"ul"},"Es importante recordar que los \xedndices de los arrays en C# comienzan en 0."),(0,i.kt)("li",{parentName:"ul"},"Con esta sintaxis asignamos un valor a una \u201cposici\xf3n (\xedndice)\u201d del array: Variable","[\xedndice]"," = valor;."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'string[] palabras = {\n  "hola",\n  "mundo"\n}; // Inicializaci\xf3n impl\xedcita\npalabras[1] = "C#"; // Modificando el segundo elemento del array\n\n')),(0,i.kt)("h4",{id:"arrays-de-objetos-y-estructuras-personalizadas"},"Arrays de objetos y estructuras personalizadas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los arrays en C# tambi\xe9n pueden contener objetos de clases o estructuras personalizadas. Por ejemplo, si tenemos una clase llamada Persona, podemos crear un array de objetos Persona de la siguiente manera:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'class Persona {\n  public string Nombre;\n  public int Edad;\n}\n\n// Declaraci\xf3n y creaci\xf3n de un array de objetos Persona\nPersona[] personas = new Persona[3];\n\n// Inicializando objetos en el array\npersonas[0] = new Persona {\n  Nombre = "Ana",\n  Edad = 30\n};\npersonas[1] = new Persona {\n  Nombre = "Juan",\n  Edad = 25\n};\npersonas[2] = new Persona {\n  Nombre = "Laura",\n  Edad = 28\n};\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Recuerda que, al tratarse de objetos, es necesario inicializar cada elemento del array para evitar errores en tiempo de ejecuci\xf3n al intentar acceder a elementos no inicializados.")))),(0,i.kt)("h4",{id:"acceder-a-elementos-de-array"},"Acceder a elementos de array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder a un elemento espec\xedfico de un arreglo en C#, debes usar el \xedndice del elemento. El \xedndice es un n\xfamero entero que representa la posici\xf3n del elemento en el arreglo. Los \xedndices en C# comienzan en cero, lo que significa que el primer elemento tiene un \xedndice  cero."),(0,i.kt)("li",{parentName:"ul"},"Para acceder a un elemento de un arreglo en C#, debes usar la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreArreglo[indice]\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"nombreArreglo es el nombre del arreglo y indice es el n\xfamero de \xedndice del elemento que deseas acceder.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, si tienes un arreglo de nombres de frutas y deseas acceder al segundo elemento, que tiene un \xedndice de 1, puedes usar la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'string[] frutas = {\n  "manzana",\n  "banana",\n  "naranja",\n  "pi\xf1a",\n  "fresa"\n};\nstring segundaFruta = frutas[1]; // "banana"\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, frutas","[1]"," accede al segundo elemento del arreglo frutas, que es \u201cbanana\u201d, y lo almacena en la variable segundaFruta.")))),(0,i.kt)("h4",{id:"cambiar-elementos-de-un-array"},"Cambiar elementos de un array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La sintaxis es la misma que se utiliza para asignarle un valor a un indice del array."),(0,i.kt)("li",{parentName:"ul"},"Para modificar un elemento en un arreglo (array) en C#, primero debes acceder al elemento que deseas cambiar, y luego asignarle un nuevo valor. Puedes hacer esto de la siguiente manera."),(0,i.kt)("li",{parentName:"ul"},"Supongamos que tenemos un arreglo de enteros llamado numeros con 5 elementos y queremos cambiar el segundo elemento por un nuevo valor:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = {\n  10,\n  20,\n  30,\n  40,\n  50\n};\n\nnumeros[1] = 25;\n\nConsole.WriteLine(numeros[1]); // Imprime: 25\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, hemos cambiado el valor del segundo elemento (numeros","[1]",") a 25. Luego, hemos utilizado la funci\xf3n Console.WriteLine para imprimir el nuevo valor del segundo elemento.")))),(0,i.kt)("h4",{id:"c\xf3mo-recorrer-un-array"},"C\xf3mo recorrer un array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Existen varias formas de recorrer un arreglo (array) en C#. Aqu\xed te presento algunas de ellas.")),(0,i.kt)("h4",{id:"1--for"},"1- For"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puedes recorrer un vector en C# con un bucle for, utilizando el \xedndice de cada elemento para acceder a ellos."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n\n    for (int i = 0; i < numeros.Length; i++) {\n      Console.WriteLine(numeros[i]);\n    }\n  }\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"La propiedad Lenght de un Array, te devuelve la cantidad de elementos que tiene."),(0,i.kt)("li",{parentName:"ul"},"En el ejemplo anterior te devuelve 5")))),(0,i.kt)("h4",{id:"2--foreach"},"2- Foreach"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El bucle foreach es otra forma com\xfan de recorrer un arreglo (array). En este caso, no necesitas utilizar un \xedndice para acceder a cada elemento, sino que puedes hacerlo directamente con una variable."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n\n    foreach(int numero in numeros) {\n      Console.WriteLine(numero);\n    }\n  }\n}\n\n")),(0,i.kt)("h4",{id:"3--iteradores-de-la-clase-array"},"3- Iteradores de la clase Array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La clase Array de .NET Framework proporciona varios m\xe9todos para recorrer los elementos de un array. Por ejemplo, el m\xe9todo GetEnumerator() devuelve un iterador que permite recorrer el array con un bucle while."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n\nclass Program {\n  static void Main() {\n\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n    IEnumerator enumerador = numeros.GetEnumerator();\n\n    while (enumerador.MoveNext()) {\n      Console.WriteLine(enumerador.Current);\n    }\n\n  }\n}\n\n")),(0,i.kt)("h4",{id:"4--m\xe9todo-arrayforeach"},"4- M\xe9todo Array.ForEach()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo Array.ForEach() es un m\xe9todo est\xe1tico de la clase Array que toma un array y una acci\xf3n (representada por un delegado) como argumentos."),(0,i.kt)("li",{parentName:"ul"},"La acci\xf3n se ejecuta para cada elemento en el array. El m\xe9todo Array.ForEach() es \xfatil cuando deseas aplicar una funci\xf3n o acci\xf3n a cada elemento en el array sin preocuparte por los \xedndices."),(0,i.kt)("li",{parentName:"ul"},"El \xfanico argumento que tiene el delegado, contiene el valor de cada elemento (valor) de la lista."),(0,i.kt)("li",{parentName:"ul"},"Sin embargo, al igual que el bucle foreach, no permite acceder al \xedndice del elemento actual en el array directamente."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n\n    Array.ForEach(numeros, numero =>Console.WriteLine(numero));\n  }\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Cada uno de estos m\xe9todos tiene sus propias ventajas y desventajas. Por ejemplo, el bucle for te permite acceder a los \xedndices de los elementos, mientras que el bucle foreach y Array.ForEach() son m\xe1s simples y f\xe1ciles de leer, pero no permiten acceder a los \xedndices directamente.")))),(0,i.kt)("h4",{id:"longitud-de-un-array"},"Longitud de un array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La longitud de un array en C# se refiere al n\xfamero de elementos que contiene el array. La propiedad Length se utiliza para obtener la longitud de un array, y es de solo lectura."),(0,i.kt)("li",{parentName:"ul"},"Esta propiedad es especialmente \xfatil cuando necesitas iterar sobre todos los elementos del array o cuando necesitas realizar operaciones basadas en el tama\xf1o del array."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n    int longitud = numeros.Length;\n    Console.WriteLine("La longitud del array es: " + longitud);\n\n  }\n}\n\n')),(0,i.kt)("h4",{id:"c\xf3mo-ordenar-un-array"},"C\xf3mo ordenar un array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ordenar un vector (array) en C# es una tarea com\xfan en la programaci\xf3n, y hay varias formas de hacerlo. En este caso, me centrar\xe9 en dos m\xe9todos principales: utilizando el m\xe9todo Array.Sort() proporcionado por la clase Array, y ordenando manualmente el array mediante un algoritmo de ordenamiento como el \u201cBubble Sort\u201d.")),(0,i.kt)("h4",{id:"1--arraysort"},"1- Array.Sort()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La forma m\xe1s f\xe1cil y r\xe1pida de ordenar un array en C# es utilizando el m\xe9todo Array.Sort() proporcionado por la clase Array."),(0,i.kt)("li",{parentName:"ul"},"Este m\xe9todo utiliza un algoritmo de ordenamiento eficiente y es apropiado para la mayor\xeda de los casos."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      5,\n      3,\n      8,\n      1,\n      4\n    };\n    Console.WriteLine("Array original:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n\n    // Ordenar el array\n    Array.Sort(numeros);\n\n    Console.WriteLine("\\nArray ordenado:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n  }\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este ejemplo ordena un array de enteros en orden ascendente utilizando Array.Sort(). Si necesitas ordenar en orden descendente, puedes utilizar Array.Reverse() despu\xe9s de Array.Sort():")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      5,\n      3,\n      8,\n      1,\n      4\n    };\n    Console.WriteLine("Array original:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n\n    // Ordenar el array en orden ascendente\n    Array.Sort(numeros);\n\n    // Invertir el array para obtener el orden descendente\n    Array.Reverse(numeros);\n\n    Console.WriteLine("\\nArray ordenado en orden descendente:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, primero se ordena el array en orden ascendente utilizando Array.Sort(). Luego, se invierte el array utilizando Array.Reverse() para obtener el orden descendente."),(0,i.kt)("li",{parentName:"ul"},"El resultado final es un array ordenado en orden descendente.")))),(0,i.kt)("h4",{id:"2--bubble-sort"},"2- Bubble sort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Bubble Sort es un algoritmo simple de ordenamiento que compara y cambia elementos adyacentes si est\xe1n en el orden incorrecto. Aunque no es el algoritmo m\xe1s eficiente, es f\xe1cil de entender e implementar."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      5,\n      3,\n      8,\n      1,\n      4\n    };\n    Console.WriteLine("Array original:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n\n    // Ordenar el array usando Bubble Sort\n    for (int i = 0; i < numeros.Length - 1; i++) {\n             \n      for (int j = 0; j < numeros.Length - 1 - i; j++) {\n        if (numeros[j] > numeros[j + 1]) {\n          // Intercambiar elementos\n          int temp = numeros[j];\n          numeros[j] = numeros[j + 1];\n          numeros[j + 1] = temp;\n        }\n      }\n    }\n\n    Console.WriteLine("\\nArray ordenado:");\n\n    foreach(int numero in numeros) {\n      Console.Write(numero + " ");\n    }\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este ejemplo ordena un array de enteros en orden ascendente utilizando el algoritmo Bubble Sort. "),(0,i.kt)("li",{parentName:"ul"},"Puedes modificar la condici\xf3n en el bucle interno para cambiar el criterio de ordenamiento (por ejemplo, ordenar en orden descendente).")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En general, se recomienda utilizar el m\xe9todo Array.Sort() para ordenar arrays en C#, ya que es m\xe1s eficiente y f\xe1cil de usar que implementar manualmente un algoritmo de ordenamiento.")))),(0,i.kt)("h4",{id:"buscar-elementos-en-un-array"},"Buscar elementos en un array"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En C#, hay varias formas de buscar elementos en un array. Aqu\xed te muestro tres m\xe9todos diferentes: Array.IndexOf(), Array.Find() y Array.Exists().")),(0,i.kt)("h4",{id:"1--arrayindexof"},"1- Array.indexOf()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este m\xe9todo busca la primera aparici\xf3n de un elemento espec\xedfico en un array y devuelve el \xedndice del elemento. Si no se encuentra el elemento, devuelve -1."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      10,\n      20,\n      30,\n      40,\n      50\n    };\n\n    int elementoABuscar = 30;\n    int indice = Array.IndexOf(numeros, elementoABuscar);\n\n    if (indice >= 0) {\n      Console.WriteLine($ "Elemento {elementoABuscar} encontrado en el \xedndice: {indice}");\n    } else {\n      Console.WriteLine($ "Elemento {elementoABuscar} no encontrado.");\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"2--arrayfind"},"2- Array.Find()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este m\xe9todo busca el primer elemento que cumple con un criterio especificado por un delegado Predicate","<","T> y devuelve el elemento."),(0,i.kt)("li",{parentName:"ul"},"Si no se encuentra ning\xfan elemento que cumpla con el criterio, se devuelve el valor predeterminado del tipo del array (como null para referencias o 0 para n\xfameros)."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      10,\n      20,\n      30,\n      40,\n      50\n    };\n\n    int elementoEncontrado = Array.Find(numeros, x =>x > 20);\n\n    if (elementoEncontrado != 0) {\n      Console.WriteLine($ "Elemento encontrado: {elementoEncontrado}");\n    } else {\n      Console.WriteLine("Elemento no encontrado.");\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"3--arrayexists"},"3- Array.Exists()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este m\xe9todo verifica si alg\xfan elemento del array cumple con un criterio especificado por un delegado Predicate","<","T> y devuelve un valor booleano true si existe un elemento que cumpla con el criterio, o false en caso contrario."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      10,\n      20,\n      30,\n      40,\n      50\n    };\n\n    bool existeElemento = Array.Exists(numeros, x =>x > 20);\n\n    if (existeElemento) {\n      Console.WriteLine("Existe un elemento que cumple con el criterio.");\n    } else {\n      Console.WriteLine("No existe ning\xfan elemento que cumpla con el criterio.");\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"filtrar--transformar-y-agregar"},"Filtrar , transformar y agregar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Language Integrated Query (LINQ) es una caracter\xedstica poderosa en C# que te permite trabajar con colecciones de datos de manera eficiente y expresiva. LINQ proporciona una serie de operadores de consulta para filtrar, transformar y agregar datos en arrays y otras colecciones.")),(0,i.kt)("h4",{id:"filtrar"},"Filtrar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Filtrar se refiere a seleccionar elementos de una colecci\xf3n que cumplan con una condici\xf3n espec\xedfica. La funci\xf3n Where es el operador de filtrado m\xe1s utilizado en LINQ:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Linq;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10\n    };\n\n    // Filtrar n\xfameros pares\n    var numerosPares = numeros.Where(x =>x % 2 == 0);\n\n    Console.WriteLine("N\xfameros pares:");\n    foreach(var numero in numerosPares) {\n      Console.WriteLine(numero);\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"transformar"},"Transformar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Transformar se refiere a aplicar una funci\xf3n a cada elemento de la colecci\xf3n y generar una nueva colecci\xf3n con los resultados. La funci\xf3n Select es el operador de transformaci\xf3n m\xe1s utilizado en LINQ:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Linq;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n\n    // Elevar al cuadrado cada n\xfamero\n    var cuadrados = numeros.Select(x =>x * x);\n\n    Console.WriteLine("Cuadrados:");\n    foreach(var cuadrado in cuadrados) {\n      Console.WriteLine(cuadrado);\n    }\n  }\n\n')),(0,i.kt)("h4",{id:"agregar-elementos"},"Agregar Elementos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Agregar se refiere a realizar operaciones en una colecci\xf3n que resulten en un \xfanico valor. Algunos ejemplos de agregaci\xf3n incluyen calcular la suma, el promedio, el m\xe1ximo o el m\xednimo de una colecci\xf3n. LINQ proporciona operadores de agregaci\xf3n, como Sum, Average, Max y Min:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Linq;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n\n    // Calcular la suma, el promedio, el m\xe1ximo y el m\xednimo\n    int suma = numeros.Sum();\n    double promedio = numeros.Average();\n    int maximo = numeros.Max();\n    int minimo = numeros.Min();\n\n    Console.WriteLine($ "Suma: {suma}");\n    Console.WriteLine($ "Promedio: {promedio}");\n    Console.WriteLine($ "M\xe1ximo: {maximo}");\n    Console.WriteLine($ "M\xednimo: {minimo}");\n  }\n}\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es importante mencionar que estos operadores pueden combinarse en consultas m\xe1s complejas. Por ejemplo, aqu\xed tienes un ejemplo, donde se aplican m\xe1s operaciones de filtrado, transformaci\xf3n y agregaci\xf3n en una sola consulta:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Linq;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10\n    };\n\n    // Filtrar n\xfameros pares, elevar al cuadrado y calcular la suma\n    int sumaCuadradosPares = numeros.Where(x =>x % 2 == 0).Select(x =>x * x).Sum();\n    Console.WriteLine($ "Suma de cuadrados de n\xfameros pares: {sumaCuadradosPares}");\n\n    // Filtrar n\xfameros impares, multiplicar por 3 y calcular el promedio\n    double promedioImparesTriple = numeros.Where(x =>x % 2 != 0).Select(x =>x * 3).Average();\n    Console.WriteLine($ "Promedio del triple de n\xfameros impares: {promedioImparesTriple}");\n\n    // Filtrar n\xfameros menores a 6, elevar al cubo y calcular el m\xe1ximo\n    int maximoCubosMenoresSeis = numeros.Where(x =>x < 6).Select(x =>x * x * x).Max();\n    Console.WriteLine($ "M\xe1ximo de los cubos de n\xfameros menores a 6: {maximoCubosMenoresSeis}");\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este ejemplo muestra c\xf3mo combinar m\xfaltiples operadores de LINQ en una sola consulta para realizar operaciones m\xe1s complejas en arrays. En este caso, se aplican diferentes operaciones a n\xfameros pares, impares y n\xfameros menores a 6, utilizando los operadores Where, Select, Sum, Average y Max.")))),(0,i.kt)("h4",{id:"eliminar-elementos"},"Eliminar elementos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En C#, los arrays tienen un tama\xf1o fijo y no se pueden eliminar elementos una vez que se asignan. Si deseas eliminar un elemento de un array, en su lugar puedes crear un nuevo array sin el elemento que deseas eliminar."),(0,i.kt)("li",{parentName:"ul"},"Una forma de hacer esto es utilizar LINQ y el m\xe9todo Where para filtrar el elemento que deseas eliminar."),(0,i.kt)("li",{parentName:"ul"},"A continuaci\xf3n se muestra un ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Linq;\n\nclass Program {\n  static void Main() {\n    int[] numeros = {\n      1,\n      2,\n      3,\n      4,\n      5\n    };\n    int elementoAEliminar = 3;\n\n    // Eliminar el elemento del array\n    int[] nuevoArray = numeros.Where(x =>x != elementoAEliminar).ToArray();\n\n    // Mostrar el nuevo array\n    Console.WriteLine("Nuevo array sin el elemento 3:");\n    foreach(int numero in nuevoArray) {\n      Console.WriteLine(numero);\n    }\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, se crea un nuevo array llamado nuevoArray que contiene todos los elementos de numeros, excepto el elemento con el valor 3."),(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que este enfoque crea un nuevo array y no modifica el array original. Si deseas trabajar con colecciones que permitan agregar o eliminar elementos de manera m\xe1s flexible, considera usar List","<","T> en lugar de arrays. La clase List","<","T> proporciona m\xe9todos como Add, Remove y RemoveAt para agregar y eliminar elementos f\xe1cilmente.")))),(0,i.kt)("h4",{id:"ejemplos"},"Ejemplos"),(0,i.kt)("h4",{id:"2-dimensiones"},"2 Dimensiones"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[,] numbers = { {1, 4, 2}, {3, 6, 8} };\nConsole.WriteLine(numbers[0, 2]);  // Outputs 2\n\n")),(0,i.kt)("h4",{id:"multidimensional"},"Multidimensional"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace geeksforgeeks {\n     \nclass GFG {\n     \n   \n    public static void Main()\n    {\n         \n\n        int[, ] intarray = new int[, ] { { 1, 2 },\n                                         { 3, 4 },\n                                         { 5, 6 },\n                                         { 7, 8 } };\n                                          \n\n        int[, ] intarray_d = new int[4, 2] { { 1, 2 }, { 3, 4 },\n                                             { 5, 6 }, { 7, 8 } };\n \n  \n        string[, ] str = new string[4, 2] { { "one", "two" },\n                                            { "three", "four" },\n                                            { "five", "six" },\n                                            { "seven", "eight" } };\n \n   \n        int[,, ] intarray3D = new int[,, ] { { { 1, 2, 3 },\n                                             { 4, 5, 6 } },\n                                             { { 7, 8, 9 },\n                                           { 10, 11, 12 } } };\n                                             \n                                             \n   \n        int[,, ] intarray3Dd = new int[2, 2, 3] { { { 1, 2, 3 },\n                                                  { 4, 5, 6 } },\n                                                  { { 7, 8, 9 },\n                                                { 10, 11, 12 } } };\n \n       \n        Console.WriteLine("2DArray[0][0] : " + intarray[0, 0]);\n        Console.WriteLine("2DArray[0][1] : " + intarray[0, 1]);\n        Console.WriteLine("2DArray[1][1] : " + intarray[1, 1]);\n        Console.WriteLine("2DArray[2][0] " + intarray[2, 0]);\n \n        Console.WriteLine("2DArray[1][1] (other) : "\n                                 + intarray_d[1, 1]);\n                                  \n        Console.WriteLine("2DArray[1][0] (other)"\n                             + intarray_d[1, 0]);\n \n        Console.WriteLine("3DArray[1][0][1] : "\n                           + intarray3D[1, 0, 1]);\n                            \n        Console.WriteLine("3DArray[1][1][2] : "\n                          + intarray3D[1, 1, 2]);\n \n        Console.WriteLine("3DArray[0][1][1] (other): "\n                             + intarray3Dd[0, 1, 1]);\n                              \n        Console.WriteLine("3DArray[1][0][2] (other): "\n                             + intarray3Dd[1, 0, 2]);\n \n\n        Console.WriteLine("To String element");\n        for (int i = 0; i < 4; i++)\n            for (int j = 0; j < 2; j++)\n                Console.Write(str[i, j] + " ");\n    }\n}\n}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/arrays#single-dimensional-arrays"},"Single-dimensional arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/builtin-types/arrays"},"Matrices")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/arrays"},"Arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://oregoom.com/c-sharp/array/"},"Arrays en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.codecademy.com/resources/docs/c-sharp/arrays"},"Arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.w3schools.com/cs/cs_arrays_multi.php"},"C# Multidimensional Arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/c-sharp-arrays/"},"C# | Arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://estradawebgroup.com/Post/Guia-practica-para-trabajar-con-Arrays-y-colecciones-en-C/20641#google_vignette"},"Gu\xeda pr\xe1ctica para trabajar con Arrays y colecciones en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/working-with-arrays-in-C-Sharp/"},"\tWorking with Arrays in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.educba.com/arrays-in-c-sharp/"},"Arrays in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://estradawebgroup.com/Post/Manipulacion-avanzada-de-arrays-en-C/20653"},"Manipulaci\xf3n avanzada de arrays en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.softwaretestinghelp.com/c-sharp/csharp-arrays/"},"C# Array: How To Declare, Initialize And Access An Array In C#?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.bytehide.com/blog/array-csharp"},"Arrays in C#: In-Depth Guide with Examples"))))),(0,i.kt)("h2",{id:"colecciones"},"Colecciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para muchas aplicaciones, puede que desee crear y administrar grupos de datos relacionados. Existen dos formas de agrupar datos: mediante la creaci\xf3n de matrices (Arrays) de objetos y con la creaci\xf3n de colecciones de objetos."),(0,i.kt)("li",{parentName:"ul"},"Las matrices (Arrays) son muy \xfatiles para crear y trabajar con un n\xfamero fijo de objetos fuertemente tipados (de un tipo de dato especifico)."),(0,i.kt)("li",{parentName:"ul"},"Las colecciones proporcionan una manera m\xe1s flexible de trabajar con grupos de objetos. A diferencia de las matrices, el grupo de objetos con el que trabaja puede aumentar y reducirse de manera din\xe1mica a medida que cambian las necesidades de la aplicaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Para algunas colecciones, puede asignar una clave a cualquier objeto que incluya en la colecci\xf3n para, de este modo, recuperar r\xe1pidamente el objeto con la clave."),(0,i.kt)("li",{parentName:"ul"},"Una colecci\xf3n es una clase, por lo que debe declarar una instancia de la clase para poder agregar elementos a dicha colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Los tipos de colecci\xf3n implementan la siguiente funcionalidad: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Agregar e insertar elementos a una colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Eliminar elementos de una colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Encontrar, clasificar y buscar elementos."),(0,i.kt)("li",{parentName:"ul"},"Reemplazo de elementos."),(0,i.kt)("li",{parentName:"ul"},"Copiar y clonar colecciones y elementos."),(0,i.kt)("li",{parentName:"ul"},"Propiedades de capacidad y recuento para encontrar la capacidad de la colecci\xf3n y el n\xfamero de elementos de la colecci\xf3n."))),(0,i.kt)("li",{parentName:"ul"},".NET admite dos tipos de colecciones, colecciones gen\xe9ricas y colecciones no gen\xe9ricas:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"No Generica"),(0,i.kt)("th",{parentName:"tr",align:null},"Generica"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ArrayList"),(0,i.kt)("td",{parentName:"tr",align:null},"List")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"HashTable"),(0,i.kt)("td",{parentName:"tr",align:null},"Dictionary")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SortedList"),(0,i.kt)("td",{parentName:"tr",align:null},"SortedList")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Stack"),(0,i.kt)("td",{parentName:"tr",align:null},"Stack")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Queue"),(0,i.kt)("td",{parentName:"tr",align:null},"Queue")))),(0,i.kt)("h4",{id:"no-generica"},"No generica"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las contiene el espacio de nombre System.Collections."),(0,i.kt)("li",{parentName:"ul"},"Funcionan con referencias de objetos, por lo que puede manejar cualquier tipo de objeto."),(0,i.kt)("li",{parentName:"ul"},"En colecciones no gen\xe9ricas, cada elemento puede representar un valor de un tipo de dato diferente. "),(0,i.kt)("li",{parentName:"ul"},"El tama\xf1o de la colecci\xf3n no es fijo. Los elementos de la colecci\xf3n se pueden agregar o eliminar en tiempo de ejecuci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Ejemplos: ArrayList , HashTable , SortedList , Stack , Queue , etc.")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Microsoft no recomienda que se implemente este tipo de colecciones, porque son muy costosas de implementar.")))),(0,i.kt)("h4",{id:"gen\xe9rico"},"Gen\xe9rico"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las contiene el espacio de nombre System.Collections.Generic"),(0,i.kt)("li",{parentName:"ul"},"Las colecciones gen\xe9ricas almacenan elementos solo del tipo de dato especificado:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Tipo espec\xedfico."),(0,i.kt)("li",{parentName:"ul"},"El tama\xf1o de la matriz no es fijo."),(0,i.kt)("li",{parentName:"ul"},"Los elementos se pueden agregar o eliminar en tiempo de ejecuci\xf3n."))),(0,i.kt)("li",{parentName:"ul"},"En la mayor\xeda de los casos, se recomienda utilizar colecciones gen\xe9ricas porque funcionan m\xe1s r\xe1pido que las colecciones no gen\xe9ricas y tambi\xe9n minimizan las excepciones al generar errores en tiempo de compilaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Ejemplos: List , Dictionary , SortedList , Stack , Queue , etc.")),(0,i.kt)("h4",{id:"concurrent"},"Concurrent"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Entro en .NET Framework Version 4 y sigui\xf3. Proporciona varias clases de colecci\xf3n seguras para subprocesos que se utilizan cuando varios subprocesos acceden a la colecci\xf3n simult\xe1neamente."),(0,i.kt)("li",{parentName:"ul"},"Ejemplos: BlockingCollection , ConcurrentBag , ConcurrentDictionary , etc.")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Estas son de uso avanzado, por lo tanto, no las explicaremos, aunque puede leer la documentaci\xf3n para m\xe1s informaci\xf3n."))),(0,i.kt)("h4",{id:"resumen"},"Resumen"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://media.geeksforgeeks.org/wp-content/uploads/Untitled-Diagram-20.jpg",alt:"Diagrama"})),(0,i.kt)("h4",{id:"4-tipos"},"4 Tipos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las colecciones se clasifican en 4 tipos: basadas en indexaci\xf3n, pares clave-valor, colecciones priorizadas y colecciones especializadas. "),(0,i.kt)("li",{parentName:"ul"},"Para una mejor comprensi\xf3n, eche un vistazo al siguiente diagrama:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2021/09/word-image-157.png?ezimgfmt=ng:webp/ngcb1",alt:"Diagrama"})),(0,i.kt)("h4",{id:"indexed-based"},"Indexed Based"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este tipo, se utiliza un \xedndice para acceder a cada elemento de la colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo: ArrayList.")),(0,i.kt)("h4",{id:"key-value-pair"},"Key Value Pair"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este tipo, usamos una clave para identificar un elemento de la colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo: Dictionary.")),(0,i.kt)("h4",{id:"prioritized-collection"},"Prioritized Collection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las Colecciones Priorizadas le ayudan a acceder a los elementos en una secuencia particular."),(0,i.kt)("li",{parentName:"ul"},"Si desea acceder a primero en entrar, primero en salir (FIFO) a los elementos de una colecci\xf3n, debe utilizar la colecci\xf3n Queue. Por otro lado, si desea acceder al \xfaltimo en entrar, primero en salir (LIFO) a los elementos de una colecci\xf3n, debe utilizar la colecci\xf3n Stack.")),(0,i.kt)("h4",{id:"specialized-collections"},"Specialized Collections"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las Colecciones Especializadas est\xe1n dise\xf1adas espec\xedficamente para un prop\xf3sito espec\xedfico. Por ejemplo, un  HybridDictionary comienza como una lista y luego se convierte en una tabla hash."),(0,i.kt)("li",{parentName:"ul"},"En este apartado no se explicar\xe1 ninguna colecci\xf3n de este tipo porque es de uso avanzado.")),(0,i.kt)("h4",{id:"caracteristicas"},"Caracteristicas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las colecciones proporcionan una forma flexible de trabajar con grupos de objetos. Puedes clasificar diferentes colecciones por estas caracter\xedsticas:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Acceso a elementos: Algunas colecciones acceden a los elementos por \xedndice (la posici\xf3n del elemento en una colecci\xf3n ordenada). El ejemplo m\xe1s com\xfan es System.Collections.Generic.List","<","T> . Otras colecciones acceden a los elementos por clave, donde un valor est\xe1 asociado con una \xfanica clave. El ejemplo m\xe1s com\xfan es System.Collections.Generic.Dictionary","<","TKey,TValue> . Usted elige entre estos tipos de colecci\xf3n seg\xfan c\xf3mo su aplicaci\xf3n accede a los elementos."),(0,i.kt)("li",{parentName:"ul"},"Perfil de rendimiento : cada colecci\xf3n tiene diferentes perfiles de rendimiento para acciones como agregar un elemento, buscar un elemento o eliminar un elemento. Puede elegir un tipo de colecci\xf3n seg\xfan las operaciones m\xe1s utilizadas en su aplicaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Crecer y reducir din\xe1micamente : la mayor\xeda de las colecciones admiten agregar o eliminar elementos din\xe1micamente. En particular, Array , System.Span","<","T> y System.Memory","<","T> no lo hacen. ")))),(0,i.kt)("h5",{id:"excepciones"},"Excepciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las matrices(arrays) se representan mediante System.Array y presentan compatibilidad con la sintaxis en el lenguaje C#. "),(0,i.kt)("li",{parentName:"ul"},"System.Span","<","T> es un tipo ref struct que proporciona una instant\xe1nea(snapshot) sobre una secuencia de elementos sin copiar esos elementos. El compilador aplica reglas de seguridad para garantizar que no se pueda acceder a Span despu\xe9s de que la secuencia a la que hace referencia ya no est\xe9 en el \xe1mbito. Memory","<","T> proporciona un comportamiento similar cuando no se puede usar un tipo ref struct.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/?term=collection"},"Todos los tipos de colecciones"))))),(0,i.kt)("h4",{id:"tipos-de-colecciones"},"Tipos de colecciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"C# nos permite trabajar con varios tipos de colecciones:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"IEnumerable"),(0,i.kt)("li",{parentName:"ul"},"ICollection"),(0,i.kt)("li",{parentName:"ul"},"IList"),(0,i.kt)("li",{parentName:"ul"},"IQueryable")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:720/format:webp/1*VVhsT-wGh4NjAuwmmx1WeQ.jpeg",alt:"TipoColecciones"})),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Como puedes ver IEnumerable es la clase base de todas las dem\xe1s."),(0,i.kt)("li",{parentName:"ul"},"Te estar\xe1s preguntando por qu\xe9 IQueryable no se encuentra en la misma columna y es que en realidad esta clase se encuentra en un namespace diferente."),(0,i.kt)("li",{parentName:"ul"},"Mientras que IEnumerable, ICollection e IList se encuentran en System.Collections, IQueryable est\xe1 en System.Linq.")))),(0,i.kt)("h4",{id:"ienumerable"},"IEnumerable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es el tipo m\xe1s b\xe1sico de colecci\xf3n. Proporciona un enumerador que ayuda a iterar sobre los elementos."),(0,i.kt)("li",{parentName:"ul"},"Qu\xe9 puede hacer:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Permite recorrer mediante iteraci\xf3n (foreach) cada uno de los elementos de la colecci\xf3n y ejecutar filtros de b\xfasqueda con la clausula where."))),(0,i.kt)("li",{parentName:"ul"},"Qu\xe9 NO puede hacer: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"No permite operaciones de edici\xf3n sobre los elementos de la colecci\xf3n (Agregar, eliminar, actualizar, etc.). "),(0,i.kt)("li",{parentName:"ul"},"Tampoco proporciona un recuento de dichos elementos por tanto si quieres saber la cantidad total debes obtenerla manualmente mediante un foreach."))),(0,i.kt)("li",{parentName:"ul"},"Cu\xe1ndo usarla: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Puedes usar IEnumerable cuando no necesites hacer modificaciones sobre tu lista de elementos y no te importe conocer el total de ellos.")))),(0,i.kt)("h4",{id:"icollection"},"ICollection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es otro tipo de colecci\xf3n que deriva directamente de IEnumerable y ampl\xeda su funcionalidad."),(0,i.kt)("li",{parentName:"ul"},"Qu\xe9 puede hacer:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Con esta clase podemos agregar, editar, eliminar y contar los elementos de la colecci\xf3n (el famoso .Count)."))),(0,i.kt)("li",{parentName:"ul"},"Cu\xe1ndo usarla: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Por lo general ver\xe1s este tipo de colecci\xf3n al trabajar con Entity Framework ya que no tiene tanto sobrecoste.")))),(0,i.kt)("h4",{id:"ilist"},"IList"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IList deriva directamente de ICollection. Es decir, re\xfane todos los poderes de IEnumerable e ICollection en un solo lugar adem\xe1s de alguna funcionalidad adicional como insertar o eliminar un elemento en el centro de una lista. "),(0,i.kt)("li",{parentName:"ul"},"Es probablemente la colecci\xf3n m\xe1s utilizada.")),(0,i.kt)("h4",{id:"iqueryable"},"IQueryable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La diferencia entre IEnumerable y IQueryble es que si, por ejemplo, realizamos una consulta a la tabla PERSONA en nuestra base de datos para obtener todos los registros y guardamos el resultado en una variable del tipo IEnumerable esta guardar\xe1 los datos en memoria."),(0,i.kt)("li",{parentName:"ul"},"Por otro lado, si almacen\xe1semos el resultado de la misma consulta en una variable tipo IQueryable esta guardar\xe1 la consulta SQL en s\xed, es decir: SELECT * FROM PERSONA la cual se \u201cmaterializar\xe1\u201d \xfanicamente cuando coloquemos a nuestra variable el famoso .ToList() o iteremos la colecci\xf3n con un foreach.")),(0,i.kt)("h4",{id:"colecciones-indexables"},"Colecciones indexables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Una colecci\xf3n indexable es aquella en la que puede acceder a cada elemento utilizando su \xedndice. Su \xedndice es el n\xfamero de elementos que est\xe1n antes en la secuencia. Por tanto, el \xedndice 0 es el primer elemento, el \xedndice 1 es el segundo, y as\xed sucesivamente."),(0,i.kt)("li",{parentName:"ul"},"Estos ejemplos utilizan la clase List","<","T> . Es la colecci\xf3n indexable m\xe1s com\xfan:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'\nvar salmons = new List<string> { "chinook", "coho", "pink", "sockeye" };\n\n\nforeach (var salmon in salmons)\n{\n    Console.Write(salmon + " ");\n}\n\nsalmons.Remove("coho");\n\n\n\nfor (var index = 0; index < salmons.Count; index++)\n{\n    Console.Write(salmons[index] + " ");\n}\n// Output: chinook pink sockeye\n\n\nsalmons.Add("coho");\n\nforeach (var salmon in salmons)\n{\n    Console.Write(salmon + " ");\n}\n// Output: chinook pink sockeye coho\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El siguiente ejemplo elimina elementos de una lista por \xedndice."),(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo RemoveAt hace que los elementos despu\xe9s de un elemento eliminado tengan un valor de \xedndice m\xe1s bajo.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var numbers = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n\n\nfor (var index = numbers.Count - 1; index >= 0; index--)\n{\n    if (numbers[index] % 2 == 1)\n    {\n    \n        numbers.RemoveAt(index);\n    }\n}\n\n\nnumbers.ForEach(\n    number => Console.Write(number + " "));\n// Output: 0 2 4 6 8\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para el tipo de elementos en List","<","T> , tambi\xe9n puede definir su propia clase. En el siguiente ejemplo, la clase Galaxy que utiliza List","<","T> se define en el c\xf3digo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'private static void IterateThroughList()\n{\n    var theGalaxies = new List<Galaxy>\n    {\n        new (){ Name="Tadpole", MegaLightYears=400},\n        new (){ Name="Pinwheel", MegaLightYears=25},\n        new (){ Name="Milky Way", MegaLightYears=0},\n        new (){ Name="Andromeda", MegaLightYears=3}\n    };\n\n    foreach (Galaxy theGalaxy in theGalaxies)\n    {\n        Console.WriteLine(theGalaxy.Name + "  " + theGalaxy.MegaLightYears);\n    }\n\n    // Output:\n    //  Tadpole  400\n    //  Pinwheel  25\n    //  Milky Way  0\n    //  Andromeda  3\n}\n\npublic class Galaxy\n{\n    public string Name { get; set; }\n    public int MegaLightYears { get; set; }\n}\n\n')),(0,i.kt)("h4",{id:"colecciones-de-pares-valor"},"Colecciones de pares-valor"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Estos ejemplos usan la clase Dictionary","<","TKey,TValue>. Es la colecci\xf3n de diccionarios m\xe1s com\xfan. Una colecci\xf3n de diccionarios permite acceder a los elementos de la colecci\xf3n mediante la clave de cada elemento. Cada adici\xf3n al diccionario consta de un valor y de su clave asociada."),(0,i.kt)("li",{parentName:"ul"},"En el ejemplo siguiente se crea una colecci\xf3n Dictionary y se recorre en iteraci\xf3n el diccionario usando una instrucci\xf3n foreach:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'private static void IterateThruDictionary()\n{\n    Dictionary<string, Element> elements = BuildDictionary();\n\n    foreach (KeyValuePair<string, Element> kvp in elements)\n    {\n        Element theElement = kvp.Value;\n\n        Console.WriteLine("key: " + kvp.Key);\n        Console.WriteLine("values: " + theElement.Symbol + " " +\n            theElement.Name + " " + theElement.AtomicNumber);\n    }\n}\n\npublic class Element\n{\n    public required string Symbol { get; init; }\n    public required string Name { get; init; }\n    public required int AtomicNumber { get; init; }\n}\n\nprivate static Dictionary<string, Element> BuildDictionary() =>\n    new ()\n    {\n        {"K",\n            new (){ Symbol="K", Name="Potassium", AtomicNumber=19}},\n        {"Ca",\n            new (){ Symbol="Ca", Name="Calcium", AtomicNumber=20}},\n        {"Sc",\n            new (){ Symbol="Sc", Name="Scandium", AtomicNumber=21}},\n        {"Ti",\n            new (){ Symbol="Ti", Name="Titanium", AtomicNumber=22}}\n    };\n\n')),(0,i.kt)("h4",{id:"iteradores"},"Iteradores"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los iteradores se usan para efectuar una iteraci\xf3n personalizada en una colecci\xf3n. Un iterador usa una instrucci\xf3n yield return para devolver cada elemento de la colecci\xf3n a la vez."),(0,i.kt)("li",{parentName:"ul"},"Llame a un iterador mediante una instrucci\xf3n foreach. Cada iteraci\xf3n del bucle foreach llama al iterador. Cuando se alcanza una instrucci\xf3n yield return en el iterador, se devuelve una expresi\xf3n y se conserva la ubicaci\xf3n actual en el c\xf3digo. La ejecuci\xf3n se llama desde esa ubicaci\xf3n la pr\xf3xima vez que se llama al iterador."),(0,i.kt)("li",{parentName:"ul"},"El siguiente ejemplo usa un iterador (es un m\xe9todo). El m\xe9todo del iterador tiene una instrucci\xf3n yield return que se encuentra dentro de un bucle for. En el m\xe9todo ListEvenNumbers, cada iteraci\xf3n del cuerpo de la instrucci\xf3n foreach crea una llamada al m\xe9todo iterador, que contin\xfaa con la siguiente instrucci\xf3n yield return:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'private static void ListEvenNumbers()\n{\n    foreach (int number in EvenSequence(5, 18))\n    {\n        Console.Write(number.ToString() + " ");\n    }\n    Console.WriteLine();\n    // Output: 6 8 10 12 14 16 18\n}\n\nprivate static IEnumerable<int> EvenSequence(\n    int firstNumber, int lastNumber)\n{\n    // Yield even numbers in the range.\n    for (var number = firstNumber; number <= lastNumber; number++)\n    {\n        if (number % 2 == 0)\n        {\n            yield return number;\n        }\n    }\n}\n\n')),(0,i.kt)("h4",{id:"linq-y-colecciones"},"Linq y Colecciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Language Integrated Query (LINQ) se puede usar para acceder a las colecciones. Las consultas LINQ proporcionan capacidades de filtrado, ordenaci\xf3n y agrupaci\xf3n. "),(0,i.kt)("li",{parentName:"ul"},"El ejemplo siguiente ejecuta una consulta LINQ en una List gen\xe9rica. La consulta LINQ devuelve otra colecci\xf3n que contiene los resultados:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'private static void ShowLINQ()\n{\n    List<Element> elements = BuildList();\n\n    // LINQ Query.\n    var subset = from theElement in elements\n                 where theElement.AtomicNumber < 22\n                 orderby theElement.Name\n                 select theElement;\n\n    foreach (Element theElement in subset)\n    {\n        Console.WriteLine(theElement.Name + " " + theElement.AtomicNumber);\n    }\n\n    // Output:\n    //  Calcium 20\n    //  Potassium 19\n    //  Scandium 21\n}\n\nprivate static List<Element> BuildList() => new()\n    {\n        { new(){ Symbol="K", Name="Potassium", AtomicNumber=19}},\n        { new(){ Symbol="Ca", Name="Calcium", AtomicNumber=20}},\n        { new(){ Symbol="Sc", Name="Scandium", AtomicNumber=21}},\n        { new(){ Symbol="Ti", Name="Titanium", AtomicNumber=22}}\n    };\n\n')),(0,i.kt)("h4",{id:"en-c-existen-muchas-colecciones-para-usar-a-continuaci\xf3n-explicaremos-algunas"},"En C# existen muchas colecciones para usar, a continuaci\xf3n, explicaremos algunas."),(0,i.kt)("h3",{id:"listt"},"List","<","t>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La clase List","<","T> es una colecci\xf3n ordenada que permite almacenar elementos del mismo tipo. Para declarar e inicializar una lista en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List<tipoDeDato> nombreLista = new List<tipoDeDato>();\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"tipoDeDato representa el tipo de dato que se almacenar\xe1 en la lista. Por ejemplo, si se desea almacenar enteros, se utilizar\xe1 List","<","int>, si se desea almacenar cadenas de texto, se utilizar\xe1 List","<","string>, etc."),(0,i.kt)("li",{parentName:"ul"},"Es una clase gen\xe9rica.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tambi\xe9n se puede inicializar una lista con elementos utilizando la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List<T> lista = new List<T>() { elemento1, elemento2, elemento3, ... };\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"elemento1, elemento2, elemento3, etc. son los elementos que se desean agregar a la lista.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La primera es usando la palabra clave new y la segunda es usando la sintaxis de inicializaci\xf3n de colecci\xf3n. Aqu\xed hay un ejemplo de cada una:")),(0,i.kt)("h4",{id:"sintaxis-con-new"},"Sintaxis con new"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para declarar e inicializar una lista de enteros en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List<int> miLista = new List<int>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para agregar elementos a una lista en C#, se utiliza el m\xe9todo Add:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miLista.Add(1);\nmiLista.Add(2);\nmiLista.Add(3);\n")),(0,i.kt)("h4",{id:"sintaxis-de-inicializaci\xf3n-de-colecci\xf3n"},"Sintaxis de inicializaci\xf3n de colecci\xf3n"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List<int> miLista = new List<int> { 1, 2, 3, 4, 5 };\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, se crea una nueva lista de tipo int utilizando la sintaxis de inicializaci\xf3n de colecci\xf3n. Los elementos se agregan directamente dentro de los corchetes y separados por comas. La lista resultante contendr\xe1 cinco elementos con los valores del 1 al 5.")))),(0,i.kt)("h4",{id:"add"},"Add()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para a\xf1adir elementos a una lista en C#, podemos usar el m\xe9todo Add que pertenece a la clase List","<","T>. Este m\xe9todo a\xf1ade un elemento al final de la lista."),(0,i.kt)("li",{parentName:"ul"},"Aqu\xed tienes un ejemplo de c\xf3mo a\xf1adir elementos a una lista en C#:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\n\nclass Program {\n  static void Main(string[] args) {\n    // Crear una lista de enteros vac\xeda\n    List < int > numeros = new List < int > ();\n\n    // A\xf1adir elementos a la lista\n    numeros.Add(1);\n    numeros.Add(2);\n    numeros.Add(3);\n\n    // Mostrar los elementos de la lista\n    foreach(int numero in numeros) {\n      Console.WriteLine(numero);\n    }\n  }\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, creamos una lista vac\xeda llamada numeros que va a contener enteros. Luego a\xf1adimos tres elementos a la lista usando el m\xe9todo Add. Finalmente, recorremos la lista con un bucle foreach y mostramos cada elemento por pantalla.")))),(0,i.kt)("h4",{id:"remove"},"Remove()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Elimina la primera aparici\xf3n de un elemento en la lista."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'List < string > lista = new List < string > {\n  "manzana",\n  "naranja",\n  "pera",\n  "uva"\n};\nlista.Remove("pera");\n\n')),(0,i.kt)("h4",{id:"removeat"},"RemoveAt()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Elimina el elemento de un \xedndice espec\xedfico."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'List < string > lista = new List < string > {\n  "manzana",\n  "naranja",\n  "pera",\n  "uva"\n};\nlista.RemoveAt(2);\n\n')),(0,i.kt)("h4",{id:"removerange"},"RemoveRange()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Elimina una secci\xf3n de la lista que incluye un rango de elementos, comenzando en un \xedndice espec\xedfico."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'List < string > lista = new List < string > {\n  "manzana",\n  "naranja",\n  "pera",\n  "uva"\n};\nlista.RemoveRange(1, 2);\n\n')),(0,i.kt)("h4",{id:"clear"},"Clear()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Elimina todos los elementos de la lista."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'List < string > lista = new List < string > {\n  "manzana",\n  "naranja",\n  "pera",\n  "uva"\n};\nlista.Clear();\n\n')),(0,i.kt)("h4",{id:"removeall"},"RemoveAll()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Elimina todos los elementos de la lista que cumplen con un predicado espec\xedfico."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List < int > lista = new List < int > {\n  1,\n  2,\n  3,\n  4,\n  5\n};\nlista.RemoveAll(n =>n % 2 == 0);\n\n")),(0,i.kt)("h4",{id:"sort"},"Sort()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo Sort() ordena los elementos de la lista seg\xfan un valor. "),(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo Sort() admite una sobrecarga que te permite especificar un comparador personalizado para determinar el orden de los elementos."),(0,i.kt)("li",{parentName:"ul"},"Aqu\xed te dejo un ejemplo de c\xf3mo utilizar el m\xe9todo Sort() para ordenar una lista de n\xfameros enteros en orden ascendente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"List < int > numeros = new List < int > {\n  3,\n  1,\n  4,\n  1,\n  5,\n  9,\n  2,\n  6,\n  5\n};\n\nnumeros.Sort(); // Ordenar en orden ascendente\n\nforeach(int numero in numeros) {\n  Console.WriteLine(numero);\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este c\xf3digo primero crea una lista de n\xfameros enteros y luego llama al m\xe9todo Sort() para ordenarlos en orden ascendente. Finalmente, se utiliza un bucle foreach para imprimir los n\xfameros ordenados en la consola.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tambi\xe9n puedes utilizar el m\xe9todo Reverse() para ordenar los elementos de una lista en orden descendente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"numeros.Sort(); // Ordenar en orden ascendente\nnumeros.Reverse(); // Ordenar en orden descendente\n\nforeach(int numero in numeros) {\n  Console.WriteLine(numero);\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este c\xf3digo primero ordena los n\xfameros en orden ascendente y luego invierte el orden de los elementos utilizando el m\xe9todo Reverse(). Finalmente, se utiliza un bucle foreach para imprimir los n\xfameros en orden descendente en la consola.")))),(0,i.kt)("h4",{id:"indice"},"Indice"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder a los elementos de una lista en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miLista[indice];\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Es como un array")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para acceder al elemento en la primera posici\xf3n de una lista de enteros llamada miLista, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int elemento = miLista[0];\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Para una lista m\xe1s compleja, existe LinkedList","<","T>. ")))),(0,i.kt)("h3",{id:"queuet"},"Queue","<","t>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La clase Queue","<","T> es una colecci\xf3n que implementa una estructura de cola, donde el primer elemento en entrar es el primer elemento en salir (FIFO). Para declarar e inicializar una cola en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Queue<T> nombreCola = new Queue<T>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para declarar e inicializar una cola de enteros en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Queue<int> miCola = new Queue<int>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para agregar elementos a una cola en C#, se utiliza el m\xe9todo Enqueue:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreCola.Enqueue(elemento);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para agregar elementos a una cola de enteros llamada miCola, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miCola.Enqueue(1);\nmiCola.Enqueue(2);\nmiCola.Enqueue(3);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder al primer elemento de una cola en C#, se utiliza el m\xe9todo Peek:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreCola.Peek();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para acceder al primer elemento de una cola de enteros llamada miCola, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int primerElemento = miCola.Peek();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para eliminar y devolver el primer elemento de una cola en C#, se utiliza el m\xe9todo Dequeue:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreCola.Dequeue();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para eliminar y devolver el primer elemento de una cola de enteros llamada miCola, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int primerElemento = miCola.Dequeue();\n")),(0,i.kt)("h3",{id:"stackt"},"Stack","<","T>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La clase Stack","<","T> es una colecci\xf3n que implementa una estructura de pila, donde el \xfaltimo elemento en entrar es el primer elemento en salir (LIFO). Para declarar e inicializar una pila en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Stack<T> nombrePila = new Stack<T>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para declarar e inicializar una pila de enteros en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Stack<int> miPila = new Stack<int>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para agregar elementos a una pila en C#, se utiliza el m\xe9todo Push:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombrePila.Push(elemento);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para agregar elementos a una pila de enteros llamada miPila, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miPila.Push(1);\nmiPila.Push(2);\nmiPila.Push(3);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder al primer elemento de una pila en C#, se utiliza el m\xe9todo Peek:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int ultimoElemento = miPila.Peek();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para eliminar y devolver el \xfaltimo elemento de una pila en C#, se utiliza el m\xe9todo Pop:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int ultimoElemento = miPila.Pop();\n")),(0,i.kt)("h3",{id:"dictionarytkeytvalue"},"Dictionary","<","TKey,TValue>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La clase Dictionary","<","TKey, TValue> es una colecci\xf3n de pares clave-valor, donde la clave y el valor pueden ser de tipos diferentes. Para declarar e inicializar un diccionario en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Dictionary<TKey, TValue> nombreDiccionario = new Dictionary<TKey, TValue>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para declarar e inicializar un diccionario donde las claves son de tipo string y los valores son de tipo int en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Dictionary<string, int> miDiccionario = new Dictionary<string, int>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para agregar elementos a un diccionario en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreDiccionario.Add(clave, valor);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para agregar un par clave-valor a un diccionario de tipo string e int llamado miDiccionario, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'miDiccionario.Add("uno", 1);\nmiDiccionario.Add("dos", 2);\nmiDiccionario.Add("tres", 3);\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder a los valores de un diccionario en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreDiccionario[clave];\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Es lo mismo que un array."),(0,i.kt)("li",{parentName:"ul"},"Por lo tanto, se modifica su valor con la  ","[clave]",".")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Por ejemplo, para acceder al valor asociado a la clave "dos" de un diccionario de tipo string e int llamado miDiccionario, se utiliza la siguiente sintaxis:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'int valor = miDiccionario["dos"];\n')),(0,i.kt)("h3",{id:"hashsett"},"HashSet","<","T>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"HashSet","<","T> almacena un conjunto de valores distintos sin ning\xfan orden en particular. A diferencia de un List","<","T>,  HashSet","<","T> no tiene ning\xfan \xedndice que pueda usarse para almacenar y recuperar un elemento de la colecci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"La clase HashSet","<","T> es una colecci\xf3n que no permite duplicados y proporciona operaciones r\xe1pidas de b\xfasqueda, inserci\xf3n y eliminaci\xf3n. Para declarar e inicializar un conjunto en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"HashSet<T> nombreConjunto = new HashSet<T>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para declarar e inicializar un conjunto de enteros en C#, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"HashSet<int> miConjunto = new HashSet<int>();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para agregar elementos a un conjunto en C#, se utiliza el m\xe9todo Add:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreConjunto.Add(elemento);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para agregar elementos a un conjunto de enteros llamado miConjunto, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miConjunto.Add(1);\nmiConjunto.Add(2);\nmiConjunto.Add(3);\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para verificar si un elemento est\xe1 en un conjunto en C#, se utiliza el m\xe9todo Contains:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreConjunto.Contains(elemento);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para verificar si el elemento 2 est\xe1 en un conjunto de enteros llamado miConjunto, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"bool resultado = miConjunto.Contains(2);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para eliminar un elemento de un conjunto en C#, se utiliza el m\xe9todo Remove:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"nombreConjunto.Remove(elemento);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para eliminar el elemento 2 de un conjunto de enteros llamado miConjunto, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"miConjunto.Remove(2);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tambi\xe9n es posible realizar operaciones de conjunto en C#, como uni\xf3n, intersecci\xf3n y diferencia, utilizando los m\xe9todos Union, Intersect y Except, respectivamente."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, para realizar la uni\xf3n de dos conjuntos de enteros llamados conjunto1 y conjunto2, se utiliza la siguiente sintaxis:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"HashSet<int> union = new HashSet<int>(conjunto1);\nunion.UnionWith(conjunto2);\n\n")),(0,i.kt)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\n \npublic class Example\n{\n    public static void Main()\n    {\n        HashSet<int> numbers = new HashSet<int>() { 1, 2, 3, 4 };\n        int target = 2;\n \n        int item;\n        bool found = numbers.TryGetValue(target, out item);\n \n        Console.WriteLine(found);        // True\n    }\n}\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El m\xe9todo TryGetValue() busca en el conjunto un valor espec\xedfico y devuelve un valor booleano que indica si la b\xfasqueda fue exitosa. Tenga en cuenta que se necesita un  par\xe1metro out  para almacenar el valor coincidente o un valor predeterminado si la b\xfasqueda no produjo ninguna coincidencia.")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.techiedelight.com/es/retrieve-an-item-from-a-hashset-in-csharp/"},"Recuperar un elemento de un HashSet en C#"))))),(0,i.kt)("h3",{id:"arraylist"},"ArrayList"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es un array especial."),(0,i.kt)("li",{parentName:"ul"},"Veamos algunas diferencias entre los ArrayList y los arrays normales:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cambiar de tama\xf1o: Los ArrayList pueden cambiar de tama\xf1o f\xe1cilmente, mientras que los arrays normales no pueden."),(0,i.kt)("li",{parentName:"ul"},"Guardar elementos diferentes: En un ArrayList, puedes guardar elementos de diferentes tipos, como n\xfameros y letras juntos. En un array normal, solo puedes guardar elementos del mismo tipo."),(0,i.kt)("li",{parentName:"ul"},"Hacer cosas con ellos: Con un ArrayList, puedes hacer muchas cosas \xfatiles, como agregar cosas al final, quitar cosas en el medio y buscar informaci\xf3n. Algunas de estas cosas son m\xe1s dif\xedciles de hacer con un array normal."))),(0,i.kt)("li",{parentName:"ul"},"Entonces, si necesitas una forma flexible de guardar y organizar informaci\xf3n en tu programa de C#, un ArrayList puede ser una excelente opci\xf3n. "),(0,i.kt)("li",{parentName:"ul"},"Se ubica en el namespace System.Collections"),(0,i.kt)("li",{parentName:"ul"},"Crear un ArrayList en C# es f\xe1cil. Piensa en \xe9l como una caja vac\xeda donde guardar\xe1s cosas:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections; // A\xf1adimos la librer\xeda necesaria para usar ArrayList\nArrayList miArrayList = new ArrayList(); // Creamos un ArrayList llamado "miLista"\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, se est\xe1 creando un ArrayList vac\xedo llamado miArrayList utilizando el operador new y el constructor predeterminado de la clase ArrayList.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, si queremos crear un ArrayList en C# con los nombres de algunos pa\xedses, podr\xedamos hacer lo siguiente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main(string[] args) {\n    ArrayList paises = new ArrayList() {\n      "Espa\xf1a",\n      "Francia",\n      "Italia",\n      "Alemania",\n      "Reino Unido"\n    };\n\n    foreach(string pais in paises) {\n      Console.WriteLine(pais);\n    }\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, estamos creando un ArrayList llamado paises con cinco elementos, que son los nombres de algunos pa\xedses europeos. Luego, utilizamos un bucle foreach para recorrer el ArrayList y mostrar cada uno de los nombres de los pa\xedses en la consola.")))),(0,i.kt)("h4",{id:"m\xe9todo-add-y-addrange"},"M\xe9todo Add y AddRange"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para a\xf1adir un elemento a un ArrayList en C#, se puede utilizar el m\xe9todo Add() de la clase ArrayList, el cual acepta un valor como argumento y lo a\xf1ade al final de la lista.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'ArrayList myArrayList = new ArrayList(); // crear un ArrayList vac\xedo\nmyArrayList.Add("elemento1"); // a\xf1adir un elemento\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si quieres agregar varios elementos a la vez, usa el m\xe9todo AddRange():")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = {\n  10,\n  20,\n  30\n};\nmiArrayList.AddRange(numeros); // Agrega los n\xfameros 10, 20 y 30 al ArrayList\n\n")),(0,i.kt)("h4",{id:"indice-1"},"Indice"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para acceder a un elemento espec\xedfico en un ArrayList, utilizamos el operador [] (corchetes) junto con el \xedndice del elemento que deseamos obtener. "),(0,i.kt)("li",{parentName:"ul"},"Para modificar un elemento, simplemente asignamos un nuevo valor al \xedndice correspondiente."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main() {\n    ArrayList miLista = new ArrayList();\n    miLista.Add(5);\n    miLista.Add("Hola");\n\n    // Acceder al primer elemento (\xedndice 0)\n    Console.WriteLine("Primer elemento: " + miLista[0]);\n\n    // Modificar el segundo elemento (\xedndice 1)\n    miLista[1] = "Mundo";\n    Console.WriteLine("Segundo elemento: " + miLista[1]);\n  }\n}\n\n')),(0,i.kt)("h4",{id:"propiedad-count"},"Propiedad count"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La propiedad Count nos permite obtener el n\xfamero de elementos en un ArrayList:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int cantidad = miArrayList.Count;\n")),(0,i.kt)("h4",{id:"eliminar-elementos-1"},"Eliminar elementos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Remove() elimina el primer elemento que coincide con el valor especificado. "),(0,i.kt)("li",{parentName:"ul"},"RemoveAt() elimina el elemento en el \xedndice especificado."),(0,i.kt)("li",{parentName:"ul"},"RemoveRange() elimina un rango de elementos comenzando en el \xedndice especificado y con la cantidad especificada."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main() {\n    ArrayList miArrayList = new ArrayList() {\n      "Uno",\n      "Dos",\n      "Tres",\n      "Cuatro",\n      "Cinco"\n    };\n\n    // Eliminar un elemento espec\xedfico\n    miArrayList.Remove("Tres");\n\n    // Eliminar el elemento en el \xedndice 1\n    miArrayList.RemoveAt(1);\n\n    // Eliminar un rango de elementos comenzando en el \xedndice 1 y eliminando 2 elementos\n    miArrayList.RemoveRange(1, 2);\n\n    foreach(var elemento in miArrayList) {\n      Console.WriteLine(elemento);\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"insertar-elementos"},"Insertar elementos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Insert() a\xf1ade un elemento en el \xedndice especificado. "),(0,i.kt)("li",{parentName:"ul"},"InsertRange() a\xf1ade una colecci\xf3n de elementos en el \xedndice especificado."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main() {\n    ArrayList miArrayList = new ArrayList() {\n      "Uno",\n      "Dos",\n      "Tres"\n    };\n\n    // Insertar un elemento en el \xedndice 1\n    miArrayList.Insert(1, "Nuevo elemento");\n\n    // Insertar una colecci\xf3n de elementos en el \xedndice 2\n    string[] nuevosElementos = {\n      "Cuatro",\n      "Cinco"\n    };\n    miArrayList.InsertRange(2, nuevosElementos);\n\n    foreach(var elemento in miArrayList) {\n      Console.WriteLine(elemento);\n    }\n  }\n}\n\n')),(0,i.kt)("h4",{id:"buscar-elementos"},"Buscar elementos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IndexOf() devuelve el \xedndice de la primera aparici\xf3n de un elemento. "),(0,i.kt)("li",{parentName:"ul"},"LastIndexOf() devuelve el \xedndice de la \xfaltima aparici\xf3n de un elemento. "),(0,i.kt)("li",{parentName:"ul"},"Contains() devuelve true si el ArrayList contiene el elemento especificado."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main() {\n    ArrayList miArrayList = new ArrayList() {\n      "Uno",\n      "Dos",\n      "Tres",\n      "Dos"\n    };\n\n    // Buscar el \xedndice de la primera aparici\xf3n de "Dos"\n    int primerIndice = miArrayList.IndexOf("Dos");\n    Console.WriteLine("Primer \xedndice de \'Dos\': " + primerIndice);\n\n    // Buscar el \xedndice de la \xfaltima aparici\xf3n de "Dos"\n    int ultimoIndice = miArrayList.LastIndexOf("Dos");\n    Console.WriteLine("\xdaltimo \xedndice de \'Dos\': " + ultimoIndice);\n\n    // Verificar si el ArrayList contiene el elemento "Tres"\n    bool contieneTres = miArrayList.Contains("Tres");\n    Console.WriteLine("\xbfContiene \'Tres\'? " + contieneTres);\n  }\n}\n\n')),(0,i.kt)("h4",{id:"ordenar"},"Ordenar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sort() ordena los elementos del ArrayList seg\xfan su valor. "),(0,i.kt)("li",{parentName:"ul"},"Reverse() invierte el orden de los elementos en el ArrayList."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\nclass Program {\n  static void Main() {\n    ArrayList miArrayList = new ArrayList() {\n      3,\n      1,\n      4,\n      5,\n      2\n    };\n\n    // Ordenar los elementos del ArrayList\n    miArrayList.Sort();\n    Console.WriteLine("ArrayList ordenado:");\n    foreach(var elemento in miArrayList) {\n      Console.WriteLine(elemento);\n    }\n\n    // Revertir el orden de los elementos en el ArrayList\n    miArrayList.Reverse();\n    Console.WriteLine("ArrayList invertido:");\n    foreach(var elemento in miArrayList) {\n      Console.WriteLine(elemento);\n    }\n  }\n}\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://oregoom.com/c-sharp/arraylist/"},"ArrayList en C#"))))),(0,i.kt)("h3",{id:"sortedsett"},"SortedSet","<","T>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En C#, SortedSet es una colecci\xf3n de objetos ordenados. Es de colecci\xf3n de tipo gen\xe9rico."),(0,i.kt)("li",{parentName:"ul"},"Puntos importantes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"La clase SortedSet implementa las interfaces ICollection , IEnumerable , IReadOnlyCollection , ISet , ICollection , IEnumerable , IDeserializationCallback e ISerializable ."),(0,i.kt)("li",{parentName:"ul"},"En SortedSet, los elementos deben ser \xfanicos."),(0,i.kt)("li",{parentName:"ul"},"La cantidad de elementos que puede contener SortedSet se denomina capacidad de SortedSet."),(0,i.kt)("li",{parentName:"ul"},"En SortedSet, el orden de los elementos es ascendente (se puede cambiar mediante un constructor especifico)."),(0,i.kt)("li",{parentName:"ul"},"Generalmente se usa cuando queremos almacenar elementos \xfanicos y mantener el orden ascendente (u otro tipo de orden)."),(0,i.kt)("li",{parentName:"ul"},"En SortedSet, el usuario solo puede almacenar elementos del mismo tipo."))),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\n \nclass GFG {\n \n  \n    static public void Main()\n    {\n \n    \n        SortedSet<int> my_Set1 = new SortedSet<int>();\n \n   \n        my_Set1.Add(101);\n        my_Set1.Add(1001);\n        my_Set1.Add(10001);\n        my_Set1.Add(100001);\n        Console.WriteLine("Elements of my_Set1:");\n \n \n        foreach(var val in my_Set1)\n        {\n            Console.WriteLine(val);\n        }\n \n     \n        SortedSet<int> my_Set2 = new SortedSet<int>() {\n                                202,2002,20002,200002};\n                 \n  \n        Console.WriteLine("Elements of my_Set2:");\n        foreach(var value in my_Set2)\n        {\n            Console.WriteLine(value);\n        }\n    }\n}\n\n')),(0,i.kt)("h3",{id:"hashtable"},"HashTable"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hashtable es una colecci\xf3n no gen\xe9rica que almacena pares clave-valor, similar a la colecci\xf3n gen\xe9rica Dictionary","<","TKey, TValue> . Optimiza las b\xfasquedas calculando el c\xf3digo hash de cada clave y lo almacena en un dep\xf3sito diferente internamente y luego hace coincidir el c\xf3digo hash de la clave especificada en el momento de acceder a los valores."),(0,i.kt)("li",{parentName:"ul"},"Caracter\xedsticas de la tabla hash",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hashtable almacena pares clave-valor."),(0,i.kt)("li",{parentName:"ul"},"Viene bajo el espacio de nombres System.Collections. "),(0,i.kt)("li",{parentName:"ul"},"Implementa la interfaz IDictionary ."),(0,i.kt)("li",{parentName:"ul"},"Las claves deben ser \xfanicas y no pueden ser nulas."),(0,i.kt)("li",{parentName:"ul"},"Los valores pueden ser nulos o duplicados."),(0,i.kt)("li",{parentName:"ul"},"Se puede acceder a los valores pasando la clave asociada en el indexador, por ejemplo, myHashtable","[key]"),(0,i.kt)("li",{parentName:"ul"},"Los elementos se almacenan como objetos DictionaryEntry.")))),(0,i.kt)("h4",{id:"ejemplo-2"},"Ejemplo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Crear:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'Hashtable numberNames = new Hashtable();\nnumberNames.Add(1,"One"); \nnumberNames.Add(2,"Two");\nnumberNames.Add(3,"Three");\n\n\n\nforeach(DictionaryEntry de in numberNames)\n    Console.WriteLine("Key: {0}, Value: {1}", de.Key, de.Value);\n        \n\nvar cities = new Hashtable(){\n    {"UK", "London, Manchester, Birmingham"},\n    {"USA", "Chicago, New York, Washington"},\n    {"India", "Mumbai, New Delhi, Pune"}\n};\n        \nforeach(DictionaryEntry de in cities)\n    Console.WriteLine("Key: {0}, Value: {1}", de.Key, de.Value);\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Actualizar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var cities = new Hashtable(){\n    {"UK", "London, Manchester, Birmingham"},\n    {"USA", "Chicago, New York, Washington"},\n    {"India", "Mumbai, New Delhi, Pune"}\n};\n    \nstring citiesOfUK = (string) cities["UK"]; \nstring citiesOfUSA = (string) cities["USA"]; \n\nConsole.WriteLine(citiesOfUK);\nConsole.WriteLine(citiesOfUSA);\n\ncities["UK"] = "Liverpool, Bristol"; \ncities["USA"] = "Los Angeles, Boston"; \n\nif(!cities.ContainsKey("France")){\n    cities["France"] = "Paris";\n}\n\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Eliminar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'var cities = new Hashtable(){\n    {"UK", "London, Manchester, Birmingham"},\n    {"USA", "Chicago, New York, Washington"},\n    {"India", "Mumbai, New Delhi, Pune"}\n};\n\ncities.Remove("UK"); \n\nif(cities.ContainsKey("France")){ \n    cities.Remove("France");\n}\n\ncities.Clear(); \n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.tutorialsteacher.com/csharp/csharp-hashtable"},"C# - Hashtable"))))),(0,i.kt)("h3",{id:"sortedlist"},"SortedList"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Representa una colecci\xf3n de pares de clave y valor ordenados por las claves. Por ejemplo, si las claves son de tipos primitivos, se ordenan en orden ascendente de claves."),(0,i.kt)("li",{parentName:"ul"},"A los valores se puede tener acceso por clave y por \xedndice."),(0,i.kt)("li",{parentName:"ul"},"En el c\xf3digo siguiente se muestra c\xf3mo crear e inicializar un SortedList objeto y c\xf3mo imprimir sus claves y valores:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\n\npublic class SamplesSortedList2\n{\n    public static void Main()\n    {\n       \n        SortedList mySL = new SortedList();\n        mySL.Add("Third", "!");\n        mySL.Add("Second", "World");\n        mySL.Add("First", "Hello");\n\n       \n        Console.WriteLine("mySL");\n        Console.WriteLine("  Count:    {0}", mySL.Count);\n        Console.WriteLine("  Capacity: {0}", mySL.Capacity);\n        Console.WriteLine("  Keys and Values:");\n        PrintKeysAndValues(mySL);\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine("\\t-KEY-\\t-VALUE-");\n        for (int i = 0; i < myList.Count; i++)\n        {\n            Console.WriteLine("\\t{0}:\\t{1}", myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n/*\n\n\nmySL\n  Count:    3\n  Capacity: 16\n  Keys and Values:\n    -KEY-    -VALUE-\n    First:    Hello\n    Second:    World\n    Third:    !\n*/\n\n')),(0,i.kt)("h3",{id:"sortedlisttkey-tvalue"},"SortedList","<","TKey, TValue>"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es lo mismo que SortedList pero es gen\xe9rico."),(0,i.kt)("li",{parentName:"ul"},"Caracter\xedsticas de tener una lista ordenada:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"SortedList","<","TKey, TValue> es una matriz de pares clave-valor ordenados por  la clave."),(0,i.kt)("li",{parentName:"ul"},"Ordena los elementos tan pronto como se agregan. Ordena las claves de tipo primitivo en orden ascendente y las claves de objeto seg\xfan IComparer","<","T> ."),(0,i.kt)("li",{parentName:"ul"},"Viene bajo el espacio de nombres System.Collection.Generic."),(0,i.kt)("li",{parentName:"ul"},"Una clave debe ser \xfanica y no puede ser nula."),(0,i.kt)("li",{parentName:"ul"},"Un valor puede ser nulo o duplicado."),(0,i.kt)("li",{parentName:"ul"},"Se puede acceder a un valor pasando la clave asociada en el indexador mySortedList","[key]","."),(0,i.kt)("li",{parentName:"ul"},"Contiene elementos de tipo KeyValuePair","<","TKey, TValue>."),(0,i.kt)("li",{parentName:"ul"},"Utiliza menos memoria que SortedDictionary","<","TKey,TValue>."),(0,i.kt)("li",{parentName:"ul"},"Es m\xe1s r\xe1pido en la recuperaci\xf3n de datos una vez ordenados, mientras que SortedDictionary","<","TKey, TValue>es m\xe1s r\xe1pido en la inserci\xf3n y eliminaci\xf3n de pares clave-valor.  "))),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'//SortedList of int keys, string values \nSortedList<int, string> numberNames = new SortedList<int, string>();\nnumberNames.Add(3, "Three");\nnumberNames.Add(1, "One");\nnumberNames.Add(2, "Two");\nnumberNames.Add(4, null);\nnumberNames.Add(10, "Ten");\nnumberNames.Add(5, "Five");\n\n\n')),(0,i.kt)("h3",{id:"stack"},"Stack"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Representa una colecci\xf3n de objetos no gen\xe9rica de tipo "\xfaltimo en entrar primero en salir" (LIFO).'),(0,i.kt)("li",{parentName:"ul"},"Es lo mismo que Stack","<","T> solamente que no es gen\xe9rica."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections;\npublic class SamplesStack  {\n\n   public static void Main()  {\n\n \n      Stack myStack = new Stack();\n      myStack.Push("Hello");\n      myStack.Push("World");\n      myStack.Push("!");\n\n  \n      Console.WriteLine( "myStack" );\n      Console.WriteLine( "\\tCount:    {0}", myStack.Count );\n      Console.Write( "\\tValues:" );\n      PrintValues( myStack );\n   }\n\n   public static void PrintValues( IEnumerable myCollection )  {\n      foreach ( Object obj in myCollection )\n         Console.Write( "    {0}", obj );\n      Console.WriteLine();\n   }\n}\n\n\n/*\n\n\nmyStack\n    Count:    3\n    Values:    !    World    Hello\n*/\n\n')),(0,i.kt)("h3",{id:"queue"},"Queue"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Representa una colecci\xf3n de objetos de tipo "primero en entrar, primero en salir".'),(0,i.kt)("li",{parentName:"ul"},"Es lo mismo que Queue","<","T> solamente que no es gen\xe9rica."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\n using System.Collections;\n public class SamplesQueue  {\n\n    public static void Main()  {\n\n       // Creates and initializes a new Queue.\n       Queue myQ = new Queue();\n       myQ.Enqueue("Hello");\n       myQ.Enqueue("World");\n       myQ.Enqueue("!");\n\n       // Displays the properties and values of the Queue.\n       Console.WriteLine( "myQ" );\n       Console.WriteLine( "\\tCount:    {0}", myQ.Count );\n       Console.Write( "\\tValues:" );\n       PrintValues( myQ );\n    }\n\n    public static void PrintValues( IEnumerable myCollection )  {\n       foreach ( Object obj in myCollection )\n          Console.Write( "    {0}", obj );\n       Console.WriteLine();\n    }\n }\n /*\n This code produces the following output.\n\n myQ\n     Count:    3\n     Values:    Hello    World    !\n*/\n\n')),(0,i.kt)("h3",{id:"otros"},"Otros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Existen millones de colecciones m\xe1s."),(0,i.kt)("li",{parentName:"ul"},"La mayor\xeda de las colecciones tienen los mismos m\xe9todos para modificar/leer/crear/eliminar elementos de la lista. Existen algunas excepciones, pero solo cambiaria el \u201cnombre del m\xe9todo\u201d."),(0,i.kt)("li",{parentName:"ul"},"Por lo tanto, la mayor\xeda de las colecciones tienen las mismas acciones (modificar / leer / crear / eliminar elementos de la lista)."),(0,i.kt)("li",{parentName:"ul"},'Una colecci\xf3n puede realizar acciones "espec\xedficas" que no se puede hacer con otras, por eso es importante seleccionar una colecci\xf3n que se adecue a tus necesidades.'),(0,i.kt)("li",{parentName:"ul"},"Por estas \u201cdiferencias\u201d entre colecciones, se recomienda ver la documentaci\xf3n de cada colecci\xf3n para ver sus m\xe9todos y propiedades."),(0,i.kt)("li",{parentName:"ul"},"Cuando accedes a un elemento de una colecci\xf3n , te devuelve un tipo de dato  especifico . Averigua que tipo de dato devuelve antes de usar una colecci\xf3n.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.tutorialesprogramacionya.com/csharpya/detalleconcepto.php?codigo=212"},"Colecciones")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/builtin-types/collections"},"Colecciones")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/standard/collections/"},"Colecciones y estructuras de datos")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/standard/collections/commonly-used-collection-types"},"Tipos de colecci\xf3n utilizados normalmente")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://estradawebgroup.com/Post/Guia-practica-para-trabajar-con-Arrays-y-colecciones-en-C/20641"},"Gu\xeda pr\xe1ctica para trabajar con Arrays y colecciones en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/tour-of-csharp/tutorials/arrays-and-collections"},"Aprenda a administrar colecciones de datos mediante List","<","T> en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://oregoom.com/c-sharp/listas/"},"Listas en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jonaes.medium.com/colecciones-en-c-328664c45019"},"Colecciones en C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/UploadFile/736bf5/collection-in-C-Sharp/"},"Collections in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.tutorialsteacher.com/csharp/csharp-collection#google_vignette"},"C# Generic & Non-generic Collections")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/collections-in-c-sharp/"},"Collections in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.tutorialspoint.com/csharp/csharp_collections.htm"},"C# - Collections")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://dotnettutorials.net/lesson/collections-csharp/#google_vignette"},"Collections in C#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.javatpoint.com/c-sharp-collections"},"C# Collections"))))))}u.isMDXComponent=!0}}]);