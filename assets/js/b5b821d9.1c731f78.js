"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[6772],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var o=n(6540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,l=function(e,a){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var t=o.createContext({}),c=function(e){var a=o.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=c(e.components);return o.createElement(t.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},p=o.forwardRef((function(e,a){var n=e.components,l=e.mdxType,i=e.originalType,t=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=l,g=m["".concat(t,".").concat(p)]||m[p]||u[p]||i;return n?o.createElement(g,r(r({ref:a},d),{},{components:n})):o.createElement(g,r({ref:a},d))}));function g(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var t in a)hasOwnProperty.call(a,t)&&(s[t]=a[t]);s.originalType=e,s[m]="string"==typeof e?e:l,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7560:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(8168),l=(n(6540),n(5680));const i={sidebar_position:3},r="Poo",s={unversionedId:"C--/POO",id:"C--/POO",title:"Poo",description:"Progamaci\xf3n Orientada a Objetos",source:"@site/docs/C--/POO.md",sourceDirName:"C--",slug:"/C--/POO",permalink:"/documentacion/docs/C--/POO",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/POO.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"C",previous:{title:'"C#" - Parte 2',permalink:"/documentacion/docs/C--/C2"},next:{title:"Conceptos de POO - Parte 2",permalink:"/documentacion/docs/C--/POO2"}},t={},c=[{value:"Progamaci\xf3n Orientada a Objetos",id:"progamaci\xf3n-orientada-a-objetos",level:2},{value:"Clase",id:"clase",level:4},{value:"Herencia",id:"herencia",level:4},{value:"Polimorfismo",id:"polimorfismo",level:4},{value:"Principio de encapsulamiento",id:"principio-de-encapsulamiento",level:4},{value:"4 Pilares",id:"4-pilares",level:4},{value:"Ejemplo - Gestion de Cliente",id:"ejemplo---gestion-de-cliente",level:2},{value:"Creamos un nuevo formulario",id:"creamos-un-nuevo-formulario",level:4},{value:"Menu.cs",id:"menucs",level:4},{value:"Dise\xf1o",id:"dise\xf1o",level:4},{value:"L\xf3gica de click",id:"l\xf3gica-de-click",level:4},{value:"GestionUsuarios.cs",id:"gestionusuarioscs",level:4},{value:"Dise\xf1o",id:"dise\xf1o-1",level:4},{value:"L\xf3gica al hacer click en Guardar",id:"l\xf3gica-al-hacer-click-en-guardar",level:4},{value:"L\xf3gica al hacer click en Eliminar",id:"l\xf3gica-al-hacer-click-en-eliminar",level:4},{value:"Y si quisieramos cargar mas datos.",id:"y-si-quisieramos-cargar-mas-datos",level:4},{value:"GestionUsuarios.cs",id:"gestionusuarioscs-1",level:4},{value:"Dise\xf1o",id:"dise\xf1o-2",level:4},{value:"Creamos una clase",id:"creamos-una-clase",level:4},{value:"Clase Cliente",id:"clase-cliente",level:4},{value:"Logica del click Guardar",id:"logica-del-click-guardar",level:4},{value:"Si a\xf1ad\xeds un usuario te debe aparecer: NombreDelProyecto.Cliente",id:"si-a\xf1ad\xeds-un-usuario-te-debe-aparecer-nombredelproyectocliente",level:4},{value:"\xbfPor qu\xe9 pasa esto?",id:"por-qu\xe9-pasa-esto",level:5},{value:"Para solucionar esto modificamos el ToString () de la clase.",id:"para-solucionar-esto-modificamos-el-tostring--de-la-clase",level:4},{value:"Clase Cliente",id:"clase-cliente-1",level:4},{value:"Conceptos de POO",id:"conceptos-de-poo",level:2},{value:"Clase",id:"clase-1",level:3},{value:"Objeto",id:"objeto",level:3},{value:"Crear una clase",id:"crear-una-clase",level:3},{value:"Modificadores",id:"modificadores",level:4},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Uso de varias clases en C#",id:"uso-de-varias-clases-en-c",level:4},{value:"Ejemplo",id:"ejemplo-1",level:6},{value:"Crear un objeto en C#",id:"crear-un-objeto-en-c",level:3},{value:"Varios objetos en C#",id:"varios-objetos-en-c",level:4},{value:"Miembros de la clase",id:"miembros-de-la-clase",level:3},{value:"Campos",id:"campos",level:3},{value:"M\xe9todos",id:"m\xe9todos",level:3},{value:"Ejemplo",id:"ejemplo-2",level:4},{value:"Modificadores de acceso",id:"modificadores-de-acceso",level:3},{value:"public",id:"public",level:4},{value:"private",id:"private",level:4},{value:"protected",id:"protected",level:4},{value:"internal",id:"internal",level:4},{value:"protected internal",id:"protected-internal",level:4},{value:"Clase parcial",id:"clase-parcial",level:3},{value:"Ejemplo",id:"ejemplo-3",level:4},{value:"Lectura y Escritura",id:"lectura-y-escritura",level:3},{value:"Sobrecarga y Sobrescritura",id:"sobrecarga-y-sobrescritura",level:3},{value:"Sobrecarga",id:"sobrecarga",level:4},{value:"Ejemplos",id:"ejemplos",level:5},{value:"Sobrescritura",id:"sobrescritura",level:4},{value:"Ejemplo",id:"ejemplo-4",level:5},{value:"Constructor",id:"constructor",level:3},{value:"Ejemplo",id:"ejemplo-5",level:4},{value:"Multiples constructores",id:"multiples-constructores",level:4},{value:"Ejemplo",id:"ejemplo-6",level:5},{value:"Ventajas",id:"ventajas",level:4},{value:"Interfaces",id:"interfaces",level:3},{value:"Ejemplo",id:"ejemplo-7",level:4},{value:"Notas sobre las interfaces",id:"notas-sobre-las-interfaces",level:4},{value:"\xbfPor qu\xe9 y cu\xe1ndo usar interfaces?",id:"por-qu\xe9-y-cu\xe1ndo-usar-interfaces",level:4},{value:"Otro ejemplo",id:"otro-ejemplo",level:4},{value:"Implementar varias interfaces",id:"implementar-varias-interfaces",level:4},{value:"Clases estaticas",id:"clases-estaticas",level:3},{value:"Ejemplo",id:"ejemplo-8",level:4},{value:"Clases abstractas",id:"clases-abstractas",level:3},{value:"Ejemplo",id:"ejemplo-9",level:4},{value:"Otro ejemplo",id:"otro-ejemplo-1",level:4}],d={toc:c},m="wrapper";function u(e){let{components:a,...n}=e;return(0,l.yg)(m,(0,o.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"poo"},"Poo"),(0,l.yg)("h2",{id:"progamaci\xf3n-orientada-a-objetos"},"Progamaci\xf3n Orientada a Objetos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Primero surgi\xf3 la \u201cProgamaci\xf3n Estructurada\u201d que consist\xeda en crear programas en base a variables y funciones. ")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"La evoluci\xf3n de este paradigma es la \u201cProgamaci\xf3n Orientada a Objetos\u201d (POO).")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Ventajas:"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Permite reutilizar c\xf3digo"),(0,l.yg)("li",{parentName:"ul"},"Agiliza el desarrollo de software"),(0,l.yg)("li",{parentName:"ul"},"El c\xf3digo es m\xe1s parecido al mundo real."),(0,l.yg)("li",{parentName:"ul"},"Facilita el trabajo en equipo"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},'La "Progamaci\xf3n Orientada a Objetos" se basa en clases y objetos.'))),(0,l.yg)("h4",{id:"clase"},"Clase"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Una clase permite guardar variables y funciones."),(0,l.yg)("li",{parentName:"ul"},"A las variables se le llama \u201cpropiedades\u201d."),(0,l.yg)("li",{parentName:"ul"},"A las funciones se le llama \u201cm\xe9todos\u201d."),(0,l.yg)("li",{parentName:"ul"},"Con la clase podemos crear \u201cinstancias\u201d de la clase."),(0,l.yg)("li",{parentName:"ul"},"Estas instancias son conocidas como \u201cobjetos\u201d.")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Una \u201cClase\u201d es un tipo de dato."),(0,l.yg)("li",{parentName:"ul"},"Se puede crear Arreglos de una \u201cClase\u201d.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Todo lo que trabajamos hasta ahora son clases."),(0,l.yg)("li",{parentName:"ul"},"String es una clase, Int es una clase, Bool es una clase, Los elementos del formulario son clases, etc.")))),(0,l.yg)("h4",{id:"herencia"},"Herencia"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Con \u201cPoo\u201d podemos usar las \u201cherencias\u201d, que consiste que una \u201cclase hija\u201d pueda usar las propiedades y m\xe9todos de una \u201cclase padre\u201d."),(0,l.yg)("li",{parentName:"ul"},"Cuando solo se crean \u201cInstancias de las clases hijas\u201d, la \u201cclase padre\u201d se denomina abstracta.")),(0,l.yg)("h4",{id:"polimorfismo"},"Polimorfismo"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Consiste en que cada \u201cclase hija\u201d responda de diferente manera a un mismo m\xe9todo."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, si en la clase padre creamos un m\xe9todo para mostrar informaci\xf3n, y tiene dos clases hijas que manejan diferentes propiedades. Al ejecutar (llamar /invocar) el m\xe9todo, tendr\xeda un comportamiento diferente seg\xfan la clase que lo llamo.")),(0,l.yg)("h4",{id:"principio-de-encapsulamiento"},"Principio de encapsulamiento"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es el  \u201cmodificador\u201d de una funci\xf3n/m\xe9todo y propiedad."),(0,l.yg)("li",{parentName:"ul"},"Puede ser:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Publico (public): Se puede acceder desde otros lugares aparte de la clase misma."),(0,l.yg)("li",{parentName:"ul"},"Protegido (Averiguar)"),(0,l.yg)("li",{parentName:"ul"},"Privado (private) : Solo se utilizan dentro de la misma clase."))),(0,l.yg)("li",{parentName:"ul"},"El principio de encapsulamiento consiste:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Crear variables de tipo privado."),(0,l.yg)("li",{parentName:"ul"},"Crear m\xe9todos \u201cp\xfablicos\u201d para gestionar el valor que contiene la variable privada."),(0,l.yg)("li",{parentName:"ul"},"Para acceder al valor de la variable privada, los m\xe9todos se llaman \u201cgetter\u201d"),(0,l.yg)("li",{parentName:"ul"},"Para modificar el valor de la propiedad privada, los m\xe9todos se llaman \u201csetter\u201d.")))),(0,l.yg)("h4",{id:"4-pilares"},"4 Pilares"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los 4 pilares de la progamaci\xf3n orientada a objetos son:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Herencia"),(0,l.yg)("li",{parentName:"ul"},"Abstracci\xf3n"),(0,l.yg)("li",{parentName:"ul"},"Polimorfismo"),(0,l.yg)("li",{parentName:"ul"},"Encapsulamiento.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Para que entienda los conceptos les recomiendo estas dos gu\xedas de javascript:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://fedeleva.github.io/documentacion/docs/Javascript/objeto"},"Objetos")," "),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://fedeleva.github.io/documentacion/docs/Javascript/poo"},"Poo")))),(0,l.yg)("li",{parentName:"ul"},"Ambos lenguajes de progamaci\xf3n utilizan los mismos conceptos, pero Javascript no es orientado a objeto basado en clases.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://oregoom.com/c-sharp/poo/"},"POO en C#")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://bravedeveloper.com/2022/06/27/fundamentos-de-la-poo-con-c-la-programacion-poo-y-el-diseno-orientado-a-objetos-ddo/"},"Fundamentos de la POO con C# [1/10]: La Programaci\xf3n y el Dise\xf1o Orientado a Objetos"))))),(0,l.yg)("h2",{id:"ejemplo---gestion-de-cliente"},"Ejemplo - Gestion de Cliente"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Creamos un nuevo proyecto")),(0,l.yg)("h4",{id:"creamos-un-nuevo-formulario"},"Creamos un nuevo formulario"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Click derecho en el nombre del proyecto (En el explorador de soluciones) -- Agregar (Add) \u2013  Form (Windows Forms) "),(0,l.yg)("li",{parentName:"ol"},"En la pantalla que nos aparece:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Tiene que estar marcado Form (Windows Form) y le damos a add (agregar)")))),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Le pod\xe9s cambiar el nombre al formulario, solo cambiando el nombre del archivo en Explorador de soluciones")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Por lo general en el explorador de soluciones figuran como NombreDelFormulario.cs")))),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Como tenemos dos formularios, Quedar\xeda asi: ",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Menu.cs"),(0,l.yg)("li",{parentName:"ul"},"GestionUsuarios.cs")))),(0,l.yg)("h4",{id:"menucs"},"Menu.cs"),(0,l.yg)("h4",{id:"dise\xf1o"},"Dise\xf1o"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'private void InitializeComponent()\n        {\n            button1 = new Button();\n            SuspendLayout();\n            // \n            // button1\n            // \n            button1.Location = new Point(143, 128);\n            button1.Name = "button1";\n            button1.Size = new Size(139, 29);\n            button1.TabIndex = 0;\n            button1.Text = "Gestionar Clientes";\n            button1.UseVisualStyleBackColor = true;\n            // \n            // Menu\n            // \n            AutoScaleDimensions = new SizeF(8F, 20F);\n            AutoScaleMode = AutoScaleMode.Font;\n            ClientSize = new Size(428, 281);\n            Controls.Add(button1);\n            Name = "Menu";\n            Text = "Form1";\n            ResumeLayout(false);\n        }\n\n        #endregion\n\n        private Button button1;\n\n')),(0,l.yg)("h4",{id:"l\xf3gica-de-click"},"L\xf3gica de click"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"  private void button1_Click(object sender, EventArgs e)\n        {\n            GestionUsuarios ventanaGestionCliente = new GestionUsuarios();\n            ventanaGestionCliente.ShowDialog();\n        }\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"El tipo de dato es el nombre de una clase."),(0,l.yg)("li",{parentName:"ul"},"El nombre del \u201cformulario\u201d es una clase y estamos creando una instancia de esta."),(0,l.yg)("li",{parentName:"ul"},"Con el new nombreClase() estamos creando una instancia( un \u201cobjeto\u201d) de nombreClase."),(0,l.yg)("li",{parentName:"ul"},"El objeto solo se puede guardar en una variable cuyo tipo de dato es la clase con la que se cre\xf3 (Aunque tambi\xe9n puede asignarse en una variable cuyo tipo de dato es la clase \u201cpadre\u201d)."),(0,l.yg)("li",{parentName:"ul"},"Ese \u201cobjeto\u201d tiene las propiedades y m\xe9todos que guarda la clase."),(0,l.yg)("li",{parentName:"ul"},"Con ese objeto llamamos (ejecutamos) al metodo ShowDialog()."),(0,l.yg)("li",{parentName:"ul"},"A trav\xe9s del punto (\u201c.\u201d), invocamos las propiedades y m\xe9todos. Si termina con par\xe9ntesis (\u201c()\u201d) es un m\xe9todo."),(0,l.yg)("li",{parentName:"ul"},"Con el metodo ShowDialog() abrimos el formulario que esta asociado a la clase (GestionUsuarios).")))),(0,l.yg)("h4",{id:"gestionusuarioscs"},"GestionUsuarios.cs"),(0,l.yg)("h4",{id:"dise\xf1o-1"},"Dise\xf1o"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'  private void InitializeComponent()\n        {\n            listClientes = new ListBox();\n            label1 = new Label();\n            txtNombre = new TextBox();\n            btnGuardar = new Button();\n            btnEliminar = new Button();\n            SuspendLayout();\n            // \n            // listClientes\n            // \n            listClientes.FormattingEnabled = true;\n            listClientes.ItemHeight = 20;\n            listClientes.Location = new Point(29, 28);\n            listClientes.Name = "listClientes";\n            listClientes.Size = new Size(325, 324);\n            listClientes.TabIndex = 0;\n            // \n            // label1\n            // \n            label1.AutoSize = true;\n            label1.Location = new Point(371, 28);\n            label1.Name = "label1";\n            label1.Size = new Size(64, 20);\n            label1.TabIndex = 1;\n            label1.Text = "Nombre";\n            // \n            // txtNombre\n            // \n            txtNombre.Location = new Point(450, 28);\n            txtNombre.Name = "txtNombre";\n            txtNombre.Size = new Size(125, 27);\n            txtNombre.TabIndex = 2;\n            // \n            // btnGuardar\n            // \n            btnGuardar.Location = new Point(403, 72);\n            btnGuardar.Name = "btnGuardar";\n            btnGuardar.Size = new Size(94, 29);\n            btnGuardar.TabIndex = 3;\n            btnGuardar.Text = "Guardar";\n            btnGuardar.UseVisualStyleBackColor = true;\n            btnGuardar.Click += btnGuardar_Click;\n            // \n            // btnEliminar\n            // \n            btnEliminar.Location = new Point(260, 386);\n            btnEliminar.Name = "btnEliminar";\n            btnEliminar.Size = new Size(94, 29);\n            btnEliminar.TabIndex = 4;\n            btnEliminar.Text = "Eliminar";\n            btnEliminar.UseVisualStyleBackColor = true;\n            btnEliminar.Click += button1_Click;\n            // \n            // GestionUsuarios\n            // \n            AutoScaleDimensions = new SizeF(8F, 20F);\n            AutoScaleMode = AutoScaleMode.Font;\n            ClientSize = new Size(597, 450);\n            Controls.Add(btnEliminar);\n            Controls.Add(btnGuardar);\n            Controls.Add(txtNombre);\n            Controls.Add(label1);\n            Controls.Add(listClientes);\n            Name = "GestionUsuarios";\n            Text = "Form2";\n            Load += GestionUsuarios_Load;\n            ResumeLayout(false);\n            PerformLayout();\n        }\n\n        #endregion\n\n        private ListBox listClientes;\n        private Label label1;\n        private TextBox txtNombre;\n        private Button btnGuardar;\n        private Button btnEliminar;\n\n')),(0,l.yg)("h4",{id:"l\xf3gica-al-hacer-click-en-guardar"},"L\xf3gica al hacer click en Guardar"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"   private void btnGuardar_Click(object sender, EventArgs e)\n        {\n            string nombre = txtNombre.Text;\n            listClientes.Items.Add(nombre);\n        }\n\n")),(0,l.yg)("h4",{id:"l\xf3gica-al-hacer-click-en-eliminar"},"L\xf3gica al hacer click en Eliminar"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"     private void button1_Click(object sender, EventArgs e)\n        {\n            listClientes.Items.RemoveAt(listClientes.SelectedIndex);\n        }\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Con elementoListBox.SelectedIndex obtenemos el \xedndice (la posici\xf3n, como si fuera un array) del valor que seleccionamos a traves del ListBox."),(0,l.yg)("li",{parentName:"ul"},"Con elementoListBox.Items.RemoveAt(\xedndice) , borramos de la lista del ListBox el valor que contiene el \xedndice.")))),(0,l.yg)("h4",{id:"y-si-quisieramos-cargar-mas-datos"},"Y si quisieramos cargar mas datos."),(0,l.yg)("h4",{id:"gestionusuarioscs-1"},"GestionUsuarios.cs"),(0,l.yg)("h4",{id:"dise\xf1o-2"},"Dise\xf1o"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'private void InitializeComponent()\n        {\n            listClientes = new ListBox();\n            label1 = new Label();\n            txtNombre = new TextBox();\n            btnGuardar = new Button();\n            btnEliminar = new Button();\n            label2 = new Label();\n            txtApellido = new TextBox();\n            lblTelefono = new Label();\n            txtTelefono = new TextBox();\n            label4 = new Label();\n            txtTarjeta = new TextBox();\n            SuspendLayout();\n            // \n            // listClientes\n            // \n            listClientes.FormattingEnabled = true;\n            listClientes.ItemHeight = 20;\n            listClientes.Location = new Point(29, 28);\n            listClientes.Name = "listClientes";\n            listClientes.Size = new Size(325, 324);\n            listClientes.TabIndex = 0;\n            // \n            // label1\n            // \n            label1.AutoSize = true;\n            label1.Location = new Point(371, 28);\n            label1.Name = "label1";\n            label1.Size = new Size(64, 20);\n            label1.TabIndex = 1;\n            label1.Text = "Nombre";\n            // \n            // txtNombre\n            // \n            txtNombre.Location = new Point(450, 28);\n            txtNombre.Name = "txtNombre";\n            txtNombre.Size = new Size(125, 27);\n            txtNombre.TabIndex = 2;\n            // \n            // btnGuardar\n            // \n            btnGuardar.Location = new Point(418, 264);\n            btnGuardar.Name = "btnGuardar";\n            btnGuardar.Size = new Size(94, 29);\n            btnGuardar.TabIndex = 3;\n            btnGuardar.Text = "Guardar";\n            btnGuardar.UseVisualStyleBackColor = true;\n            btnGuardar.Click += btnGuardar_Click;\n            // \n            // btnEliminar\n            // \n            btnEliminar.Location = new Point(260, 387);\n            btnEliminar.Name = "btnEliminar";\n            btnEliminar.Size = new Size(94, 29);\n            btnEliminar.TabIndex = 4;\n            btnEliminar.Text = "Eliminar";\n            btnEliminar.UseVisualStyleBackColor = true;\n            btnEliminar.Click += button1_Click;\n            // \n            // label2\n            // \n            label2.AutoSize = true;\n            label2.Location = new Point(371, 82);\n            label2.Name = "label2";\n            label2.Size = new Size(66, 20);\n            label2.TabIndex = 5;\n            label2.Text = "Apellido";\n            // \n            // txtApellido\n            // \n            txtApellido.Location = new Point(450, 79);\n            txtApellido.Name = "txtApellido";\n            txtApellido.Size = new Size(125, 27);\n            txtApellido.TabIndex = 6;\n            // \n            // lblTelefono\n            // \n            lblTelefono.AutoSize = true;\n            lblTelefono.Location = new Point(371, 144);\n            lblTelefono.Name = "lblTelefono";\n            lblTelefono.Size = new Size(67, 20);\n            lblTelefono.TabIndex = 7;\n            lblTelefono.Text = "Telefono";\n            // \n            // txtTelefono\n            // \n            txtTelefono.Location = new Point(450, 137);\n            txtTelefono.Name = "txtTelefono";\n            txtTelefono.Size = new Size(125, 27);\n            txtTelefono.TabIndex = 8;\n            // \n            // label4\n            // \n            label4.AutoSize = true;\n            label4.Location = new Point(371, 202);\n            label4.Name = "label4";\n            label4.Size = new Size(53, 20);\n            label4.TabIndex = 9;\n            label4.Text = "Tarjeta";\n            // \n            // txtTarjeta\n            // \n            txtTarjeta.Location = new Point(450, 195);\n            txtTarjeta.Name = "txtTarjeta";\n            txtTarjeta.Size = new Size(125, 27);\n            txtTarjeta.TabIndex = 10;\n            // \n            // GestionUsuarios\n            // \n            AutoScaleDimensions = new SizeF(8F, 20F);\n            AutoScaleMode = AutoScaleMode.Font;\n            ClientSize = new Size(597, 450);\n            Controls.Add(txtTarjeta);\n            Controls.Add(label4);\n            Controls.Add(txtTelefono);\n            Controls.Add(lblTelefono);\n            Controls.Add(txtApellido);\n            Controls.Add(label2);\n            Controls.Add(btnEliminar);\n            Controls.Add(btnGuardar);\n            Controls.Add(txtNombre);\n            Controls.Add(label1);\n            Controls.Add(listClientes);\n            Name = "GestionUsuarios";\n            Text = "Form2";\n            Load += GestionUsuarios_Load;\n            ResumeLayout(false);\n            PerformLayout();\n        }\n\n        #endregion\n\n        private ListBox listClientes;\n        private Label label1;\n        private TextBox txtNombre;\n        private Button btnGuardar;\n        private Button btnEliminar;\n        private Label label2;\n        private TextBox txtApellido;\n        private Label lblTelefono;\n        private TextBox txtTelefono;\n        private Label label4;\n        private TextBox txtTarjeta;\n\n')),(0,l.yg)("h4",{id:"creamos-una-clase"},"Creamos una clase"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Click derecho sobre el nombre del proyecto \u2013 Add (Agregar) \u2013 Class (Clase)"),(0,l.yg)("li",{parentName:"ol"},"En la ventana que aparece:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"En el nombre ponemos Cliente , quedando : Cliente.cs")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"La extensi\xf3n de una clase es .cs"),(0,l.yg)("li",{parentName:"ul"},"Y esa extensi\xf3n la vimos en muchos otros archivos, por lo tanto, casi todo se trabaja con clases.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Para evitar los Arrays multidimensionales, se usan las clases."))),(0,l.yg)("h4",{id:"clase-cliente"},"Clase Cliente"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace GestionDeFacturas\n{\n    internal class Cliente\n    {\n        // Definimos las propiedades\n        // Sintaxis: Modificador tipo-de-dato  nombrePropiedad;\n        private string nombre;\n\n\n\n        // Creamos los metodos getter y setter de la propiedad nombre\n        // Estos metodos figuran como la  propiedad "Nombre" del objeto.\n        public string Nombre\n        {\n            // Obtenemos el valor de la propiedad nombre (get)\n            get { return nombre; }\n                // Modificamos el valor de la propiedad nombre (set)\n                // El argumento "value" se genera solo , no hace falta especificarlo.\n             \n            set { nombre = value; }\n        }\n\n\n        // Otra alternativa de crear los metedos getter y setter\n        // De esta forma creamos el get y set de la propiedad apellido.\n        // Estos metodos figuran como la  propiedad "Apellido" del objeto.\n        // Cuando lo definimos con esta alternativa , no hace falta declarar la variable/propiedad.\n        public string Apellido { get; set; }\n        public string Telefono { get; set; }\n        public string TarjetaCredito { get; set; }\n        // Un getter solo\n        //Figura como la propiedad "NombreCompleto" del objeto.\n        public string NombreCompleto\n        {\n            get { return nombre + " " + Apellido; }\n        }\n    }\n\n\n}\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Aplicamos los principios de encapsulamiento: ",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Las propiedades son privadas."),(0,l.yg)("li",{parentName:"ul"},"Utilizamos m\xe9todos p\xfablicos para leer o escribir en las propiedades privadas.")))))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Para usar los getter y set"),(0,l.yg)("li",{parentName:"ul"},"Obtener valor = Instancia.NombrePropiedad "),(0,l.yg)("li",{parentName:"ul"},"Modificar el valor = Instancia.NombrePropiedad = Valor ")))),(0,l.yg)("h4",{id:"logica-del-click-guardar"},"Logica del click Guardar"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"   private void btnGuardar_Click(object sender, EventArgs e)\n        {\n             // Creamos un objeto a partir de la clase Cliente\n            Cliente cliente = new Cliente();\n            // Usamos los get que creamos\n            cliente.Nombre = txtNombre.Text;\n            cliente.Apellido = txtApellido.Text;\n            cliente.TarjetaCredito = txtTarjeta.Text;\n            cliente.Telefono = txtTelefono.Text;\n\n            listClientes.Items.Add(cliente);\n        }\n\n")),(0,l.yg)("h4",{id:"si-a\xf1ad\xeds-un-usuario-te-debe-aparecer-nombredelproyectocliente"},"Si a\xf1ad\xeds un usuario te debe aparecer: NombreDelProyecto.Cliente"),(0,l.yg)("h5",{id:"por-qu\xe9-pasa-esto"},"\xbfPor qu\xe9 pasa esto?"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Porque toda clase tiene el m\xe9todo ToString() que convierte un \u201cvalor\u201d a Texto (String)."),(0,l.yg)("li",{parentName:"ul"},"Cuando a una \u201cinstancia\u201d de la clase, la tratamos de mostrar en un listado o en una alerta, se ejecuta ToString() y por defecto te muestra el nombre del proyecto y de la clase.")),(0,l.yg)("h4",{id:"para-solucionar-esto-modificamos-el-tostring--de-la-clase"},"Para solucionar esto modificamos el ToString () de la clase."),(0,l.yg)("h4",{id:"clase-cliente-1"},"Clase Cliente"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'   public string NombreCompleto\n        {\n            get { return nombre + " " + Apellido; }\n        }\n         \n        // Con la palabra "override" especificamos que  remplazamos(modificamos)  el metodo que ya estaba definido(creado) (en este caso remplazamos\n        // ToString() que ya venia incluido por defecto , con el nuevo (el que definimos abajo))\n                public override string ToString()\n        {\n            return NombreCompleto;\n        }\n\n')),(0,l.yg)("h2",{id:"conceptos-de-poo"},"Conceptos de POO"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La programaci\xf3n orientada a objetos (POO) es un paradigma de programaci\xf3n que se basa en la definici\xf3n de clases y objetos para representar entidades del mundo real."),(0,l.yg)("li",{parentName:"ul"},"En este enfoque, los datos (propiedades) y las funciones (m\xe9todos) que operan sobre esos datos se agrupan en unidades llamadas clases."),(0,l.yg)("li",{parentName:"ul"},"Los objetos son instancias de una clase y contienen datos y m\xe9todos que act\xfaan en esos datos."),(0,l.yg)("li",{parentName:"ul"},"En la programaci\xf3n orientada a objetos, los objetos son la unidad b\xe1sica de estructuraci\xf3n y se utilizan para representar conceptos y entidades del mundo real, como clientes, cuentas bancarias, autom\xf3viles, animales, etc."),(0,l.yg)("li",{parentName:"ul"},"Los objetos pueden interactuar entre s\xed mediante el intercambio de mensajes que activan los m\xe9todos."),(0,l.yg)("li",{parentName:"ul"},"Las clases y los objetos son elementos fundamentales de la POO, y se utilizan para modelar y representar objetos del mundo real y sus interacciones en el software"),(0,l.yg)("li",{parentName:"ul"},"Haciendo una analog\xeda con el trabajo de un ingeniero, la CLASE se corresponder\xeda con el plano de un motor y e OBJETO ser\xedan los diferentes motores que se construyen a partir de ese plano. Crear un OBJETO a partir de un una clase es lo que se llama INSTANCIAR.")),(0,l.yg)("h3",{id:"clase-1"},"Clase"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En C#, una clase es una plantilla o un modelo a partir del cual se crean objetos. Define los datos(propiedades) y el comportamiento (m\xe9todos) de los objetos."),(0,l.yg)("li",{parentName:"ul"},"Define un conjunto de propiedades y m\xe9todos que tendr\xe1n todos los objetos que se creen de esta clase."),(0,l.yg)("li",{parentName:"ul"},"Una clase define la estructura, los campos, las propiedades, los m\xe9todos y los eventos que pertenecen a un objeto en particular. En resumen, una clase proporciona una descripci\xf3n de c\xf3mo se comportar\xe1 un objeto."),(0,l.yg)("li",{parentName:"ul"},"Un ejemplo de una clase en la vida real podr\xeda ser un modelo de coche. El modelo de coche es la plantilla a partir de la cual se crean los objetos  coche."),(0,l.yg)("li",{parentName:"ul"},"El modelo de coche define los datos (propiedades) y el comportamiento (m\xe9todos) de los objetos de coche, como el tama\xf1o, el color, la marca, la potencia, la velocidad m\xe1xima, la capacidad de carga, el consumo de combustible, etc. Todos los objetos de coche creados a partir del modelo de coche tendr\xe1n estas caracter\xedsticas."),(0,l.yg)("li",{parentName:"ul"},"Es una plantilla a partir de la cual se crean los objetos."),(0,l.yg)("li",{parentName:"ul"},"En t\xe9rminos pr\xe1cticos es una porci\xf3n de c\xf3digo que nos permite crear objetos personalizados."),(0,l.yg)("li",{parentName:"ul"},"Una clase est\xe1 conformada por sus miembros, los cuales son:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Campos"),(0,l.yg)("li",{parentName:"ul"},"Propiedades"),(0,l.yg)("li",{parentName:"ul"},"M\xe9todos")))),(0,l.yg)("h3",{id:"objeto"},"Objeto"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un objeto es una instancia de una clase que representa un elemento del mundo real o un concepto abstracto. En t\xe9rminos m\xe1s simples, un objeto es una entidad que tiene un estado y un comportamiento asociado con \xe9l."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, considera un objeto de la vida real,  un coche. Un coche es una entidad que tiene un estado, como su modelo, a\xf1o de fabricaci\xf3n, kilometraje, nivel de gasolina, etc."),(0,l.yg)("li",{parentName:"ul"},"Adem\xe1s, un coche tambi\xe9n tiene un comportamiento asociado, como acelerar, frenar, cambiar de marcha, etc."),(0,l.yg)("li",{parentName:"ul"},"En t\xe9rminos pr\xe1cticos viene a ser una variable creada a partir de una clase, la cual permite utilizar todo lo que hemos definido en la clase, como por ejemplo sus atributos (propiedades) o m\xe9todos."),(0,l.yg)("li",{parentName:"ul"},"Ejemplos:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"El alumno Pedro Sol\xeds creado a partir de la clase Alumnos, otro objeto de la misma clase ser\xeda la alumna Mar\xeda S\xe1nchez.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"En C# se crean objetos con la palabra reservada new"))),(0,l.yg)("h3",{id:"crear-una-clase"},"Crear una clase"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para crear una clase en C#, se utiliza la palabra clave ",(0,l.yg)("strong",{parentName:"li"},"class"),", seguida del nombre de la clase y un bloque de c\xf3digo entre llaves. Dentro de este bloque de c\xf3digo, se pueden definir las propiedades y m\xe9todos de la clase."),(0,l.yg)("li",{parentName:"ul"},"Sintaxis:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"\n[atributos] [modificadores] [parcial] class NombreDeLaClase [ : clase base , interfaz1, interfaz2, ...]  {\n    C\xf3digo de la clase\n}\n\n")),(0,l.yg)("h4",{id:"modificadores"},"Modificadores"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para determinar la visibilidad el lenguaje cuenta con las siguientes palabras clave como \u201cmodificadores\u201d:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"public: la clase puede ser utilizada en cualquier proyecto."),(0,l.yg)("li",{parentName:"ul"},"internal: la clase est\xe1 limitada al proyecto en el cual est\xe1 definida."),(0,l.yg)("li",{parentName:"ul"},"private: la clase s\xf3lo puede usarse en el m\xf3dulo(clase) en la que est\xe1 definida."),(0,l.yg)("li",{parentName:"ul"},"protected: la clase s\xf3lo puede ser utilizada  en el m\xf3dulo(clase) en la que est\xe1 definida o en una subclase. Es decir s\xf3lo se puede utilizar protected para una clase declarada en otra clase."),(0,l.yg)("li",{parentName:"ul"},"protected internal: lo mismo que internal + protected."),(0,l.yg)("li",{parentName:"ul"},"abstract: no permite crear instancias de esta clase, s\xf3lo sirve para ser heredada como clase base. "),(0,l.yg)("li",{parentName:"ul"},"sealed: cuando una clase es la \xfaltima de una jerarqu\xeda, por lo que no podr\xe1 ser utilizada como base de otra clase.")))),(0,l.yg)("h4",{id:"ejemplo"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'\npublic class Persona {\n  // Propiedades\n  public string Nombre;\n  public int Edad;\n\n  // M\xe9todo\n  public void Saludar() {\n    Console.WriteLine("Hola, mi nombre es " + Nombre + " y tengo " + Edad + " a\xf1os.");\n  }\n}\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"En este ejemplo, hemos creado una clase llamada Persona que tiene dos propiedades (Nombre y Edad) y un m\xe9todo (Saludar). La propiedad Nombre es una cadena de texto, y la propiedad Edad es un n\xfamero entero."),(0,l.yg)("li",{parentName:"ul"},"El m\xe9todo Saludar es un m\xe9todo que escribe en la consola una cadena de texto que incluye el nombre y la edad de la persona."),(0,l.yg)("li",{parentName:"ul"},"Con esta clase definida, podemos crear objetos de la clase Persona en nuestro c\xf3digo y utilizar sus propiedades y m\xe9todos.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Cuando una variable se declara directamente en una clase, a menudo se  puede  denominar: campo , atributo o propiedad."),(0,l.yg)("li",{parentName:"ul"},"No es obligatorio, pero es una buena pr\xe1ctica comenzar con una primera letra may\xfascula al nombrar clases. "),(0,l.yg)("li",{parentName:"ul"},"Es com\xfan que el nombre del archivo C# y la clase coincidan, ya que hace que nuestro c\xf3digo est\xe9 organizado. Sin embargo, no es obligatorio (como en Java).")))),(0,l.yg)("h4",{id:"uso-de-varias-clases-en-c"},"Uso de varias clases en C#"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En C#, es com\xfan utilizar varias clases en un programa para organizar el c\xf3digo y separar las funcionalidades. Cada clase puede tener sus propios m\xe9todos y propiedades, y se pueden crear instancias de estas clases para trabajar con sus objetos."),(0,l.yg)("li",{parentName:"ul"},"Para utilizar varias clases en un programa de C#, se pueden seguir los siguientes pasos:",(0,l.yg)("ol",{parentName:"li"},(0,l.yg)("li",{parentName:"ol"},"Crear cada una de las clases con sus m\xe9todos y atributos correspondientes."),(0,l.yg)("li",{parentName:"ol"},"Crear una clase principal que utilizar\xe1 las otras clases y que ser\xe1 el punto de entrada del programa."),(0,l.yg)("li",{parentName:"ol"},"Crear instancias de las otras clases dentro de la clase principal."),(0,l.yg)("li",{parentName:"ol"},"Utilizar los m\xe9todos y atributos de las instancias de las otras clases para realizar las tareas deseadas.")))),(0,l.yg)("h6",{id:"ejemplo-1"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\npublic class Persona {\n  public string Nombre {\n    get;\n    set;\n  }\n  public int Edad {\n    get;\n    set;\n  }\n\n  public void ImprimirDetalles() {\n    Console.WriteLine("Nombre: " + Nombre);\n    Console.WriteLine("Edad: " + Edad);\n  }\n}\n\npublic class Program {\n  static void Main(string[] args) {\n    // Crear instancias de la clase Persona\n    Persona persona1 = new Persona();\n    persona1.Nombre = "Juan";\n    persona1.Edad = 25;\n\n    Persona persona2 = new Persona();\n    persona2.Nombre = "Maria";\n    persona2.Edad = 30;\n\n    // Imprimir los detalles de las personas\n    persona1.ImprimirDetalles();\n    Console.WriteLine();\n\n    persona2.ImprimirDetalles();\n    Console.WriteLine();\n  }\n}\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"En este ejemplo, se crean dos instancias de la clase \xabPersona\xbb dentro de la clase \xabProgram\xab, se establecen sus atributos con valores y se llaman a sus m\xe9todos para imprimir sus detalles. Este es un ejemplo sencillo de c\xf3mo se pueden utilizar varias clases en un programa de C#."))),(0,l.yg)("h3",{id:"crear-un-objeto-en-c"},"Crear un objeto en C#"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para crear un objeto en C#, primero necesitas tener una clase definida que defina las propiedades y m\xe9todos que tendr\xe1 el objeto. Luego, puedes crear una instancia de esa clase, lo que crea el objeto."),(0,l.yg)("li",{parentName:"ul"},"Para crear un objeto de Persona, especifique el nombre de la clase como tipo de dato, seguido del nombre del objeto y use la palabra clave ",(0,l.yg)("strong",{parentName:"li"},"new"),"."),(0,l.yg)("li",{parentName:"ul"},'Sintaxis para crear un objeto: "new nombreClase()" , donde:',(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"El nombreClase() es un constructor."),(0,l.yg)("li",{parentName:"ul"},"La palabra ",(0,l.yg)("strong",{parentName:"li"},"new")," sirve para crear una instancia de la clase."))),(0,l.yg)("li",{parentName:"ul"},"Aqu\xed hay un ejemplo b\xe1sico de c\xf3mo crear una clase Persona y luego crear un objeto persona1 de esa clase:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\npublic class Persona {\n  public string Nombre;\n  public int Edad;\n\n  public void Presentarse() {\n    Console.WriteLine("Hola, mi nombre es " + Nombre + " y tengo " + Edad + " a\xf1os.");\n  }\n}\n\npublic class Program {\n  public static void Main() {\n    // Crear un objeto Persona\n    Persona persona1 = new Persona();\n\n    // Asignar valores a las propiedades\n    persona1.Nombre = "Juan";\n    persona1.Edad = 25;\n\n    // Llamar al m\xe9todo Presentarse\n    persona1.Presentarse();\n  }\n}\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"En este ejemplo, primero se define la clase Persona con dos propiedades Nombre y Edad y un m\xe9todo Presentarse. Luego, en la funci\xf3n Main, se crea una instancia de la clase Persona llamada persona1. Despu\xe9s se asignan valores a las propiedades Nombre y Edad de persona1."),(0,l.yg)("li",{parentName:"ul"},"Por \xfaltimo, se llama al m\xe9todo Presentarse del objeto persona1, que muestra un mensaje que incluye el nombre y la edad de la persona.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},'Tenga en cuenta que usamos la sintaxis de punto (".") para acceder a variables/campos dentro de una clase (persona1.Nombre). '))),(0,l.yg)("h4",{id:"varios-objetos-en-c"},"Varios objetos en C#"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En C#, es posible crear varios objetos de una misma clase, lo que permite trabajar con diferentes instancias de la misma clase de manera independiente."),(0,l.yg)("li",{parentName:"ul"},"Cada objeto tiene sus propias propiedades y m\xe9todos, y puede ser manipulado de forma separada de los dem\xe1s objetos."),(0,l.yg)("li",{parentName:"ul"},"Para crear varios objetos de una clase en C#, se utiliza la sintaxis new para asignar una instancia de la clase a cada objeto."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, si tenemos una clase llamada Persona que tiene una propiedad nombre, podemos crear varios objetos de la clase Persona con diferentes nombres de la siguiente manera:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'Persona persona1 = new Persona();\npersona1.nombre = "Juan";\n\nPersona persona2 = new Persona();\npersona2.nombre = "Mar\xeda";\n\n')),(0,l.yg)("h3",{id:"miembros-de-la-clase"},"Miembros de la clase"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los miembros de una clase en C# son las propiedades, campos y m\xe9todos que pertenecen a esa clase."),(0,l.yg)("li",{parentName:"ul"},"Campos: Son los datos(variables) que contiene una clase."),(0,l.yg)("li",{parentName:"ul"},"Propiedades: Son m\xe9todos especiales dedicados solamente a lectura (se llaman get) o escritura (se llaman set) de los campos de la clase. En palabras sencillas podr\xeda decirse que una propiedad es la puerta de entrada a los campos de una clase."),(0,l.yg)("li",{parentName:"ul"},"Metodos: Son funciones o acciones que una clase puede realizar.")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Al conjunto de campos y propiedades se les conoce como Atributos."))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Existen convenciones entre desarrolladores para nombrar los miembros de una clase, por ejemplo: Las propiedades deben empezar con may\xfasculas, los m\xe9todos tambi\xe9n."))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Todo miembro de una clase debe implementar el PascalCase, en otras palabras si el miembro tiene un nombre con varias palabras, todas deben estar unidas y cada palabra debe empezar con may\xfascula."))),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Estos miembros se utilizan para definir la estructura de una clase y su comportamiento."),(0,l.yg)("li",{parentName:"ul"},"Los campos, se utilizan para almacenar datos."),(0,l.yg)("li",{parentName:"ul"},"Cada objeto que se crea a partir de una clase tiene su propia copia de las variables de la clase."),(0,l.yg)("li",{parentName:"ul"},"Los m\xe9todos de clase son funciones que se utilizan para realizar operaciones espec\xedficas con los datos que se almacenan en la instancia (objeto). Cada objeto que se crea a partir de una clase tiene acceso a todos los m\xe9todos de la clase."),(0,l.yg)("li",{parentName:"ul"},"Adem\xe1s de los campos y los m\xe9todos de instancia, una clase tambi\xe9n puede tener campos y m\xe9todos est\xe1ticos."),(0,l.yg)("li",{parentName:"ul"},"Los campos est\xe1ticos son variables que se comparten entre todos los objetos que se crean a partir de la clase, mientras que los m\xe9todos est\xe1ticos son funciones que se pueden llamar sin tener que crear primero un objeto.")),(0,l.yg)("h3",{id:"campos"},"Campos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las variables dentro de una clase se llaman campos y que puede acceder a ellos creando un objeto de la clase y usando la sintaxis de punto ( \u201c.\u201d)."),(0,l.yg)("li",{parentName:"ul"},"El siguiente ejemplo crear\xe1 un objeto de la clase Car, con el nombre myObj. Luego imprimimos el valor de los campos color y maxSpeed: ")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'class Car \n{\n  string color = "red";\n  int maxSpeed = 200;\n\n  static void Main(string[] args)\n  {\n    Car myObj = new Car();\n    Console.WriteLine(myObj.color);\n    Console.WriteLine(myObj.maxSpeed);\n  }\n}\n\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Tambi\xe9n puede dejar los campos en blanco y modificarlos al crear el objeto:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'class Car \n{\n  string color;\n  int maxSpeed;\n\n  static void Main(string[] args)\n  {\n    Car myObj = new Car();\n    myObj.color = "red";\n    myObj.maxSpeed = 200;\n    Console.WriteLine(myObj.color);\n    Console.WriteLine(myObj.maxSpeed);\n  }\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Esto es especialmente \xfatil cuando se crean m\xfaltiples objetos de una clase"))),(0,l.yg)("h3",{id:"m\xe9todos"},"M\xe9todos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los m\xe9todos de objetos en C# son funciones que se definen dentro de una clase y que permiten que los objetos de esa clase realicen operaciones espec\xedficas."),(0,l.yg)("li",{parentName:"ul"},"Los m\xe9todos se usan para realizar ciertas acciones."),(0,l.yg)("li",{parentName:"ul"},"Los m\xe9todos normalmente pertenecen a una clase y definen c\xf3mo se comporta un objeto de una clase."),(0,l.yg)("li",{parentName:"ul"},"Estos m\xe9todos pueden ser llamados desde un objeto de la clase y pueden tener diferentes tipos de argumentos y valores de retorno."),(0,l.yg)("li",{parentName:"ul"},"Sintaxis:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"public < tipo_retorno > < nombre_del_m\xe9todo > ( < tipo_parametro1 > < nombre_parametro1 > , < tipo_parametro2 > < nombre_parametro2 > , ...) {\n  // C\xf3digo del m\xe9todo / Cuerpo del m\xe9todo\n}\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Donde:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"public: un modificador de acceso que determina la visibilidad del m\xe9todo. public significa que el m\xe9todo es accesible desde cualquier parte del c\xf3digo."),(0,l.yg)("li",{parentName:"ul"},"<","tipo_retorno>: el tipo de dato que devuelve el m\xe9todo. Puede ser cualquier tipo de dato v\xe1lido en C#, incluyendo tipos primitivos, objetos y tipos definidos por el usuario."),(0,l.yg)("li",{parentName:"ul"},"<","nombre_del_m\xe9todo>: el nombre del m\xe9todo, que debe ser \xfanico dentro de la clase."),(0,l.yg)("li",{parentName:"ul"},"<","tipo_parametro1> ","<","nombre_parametro1>, ","<","tipo_parametro2> ","<","nombre_parametro2>, ...: los par\xe1metros (argumentos ) que se pasan al m\xe9todo. Pueden ser cualquier tipo de dato v\xe1lido en C#.")))),(0,l.yg)("h4",{id:"ejemplo-2"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"public int Sumar(int num1, int num2) {\nint resultado = num1 + num2;\nreturn resultado;\n}\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al igual que con los campos, puede acceder a los m\xe9todos con la sintaxis de puntos (\u201c.\u201d). Sin embargo, tenga en cuenta que el m\xe9todo debe ser public. Y recuerda que usamos el nombre del m\xe9todo seguido de dos par\xe9ntesis (\u201c()\u201d) y un punto y coma (\u201c;\u201d) para llamar (ejecutar) el m\xe9todo."),(0,l.yg)("li",{parentName:"ul"},"Entre los par\xe9ntesis , van los par\xe1metros del m\xe9todo."),(0,l.yg)("li",{parentName:"ul"},"Este m\xe9todo se puede llamar desde un objeto de la clase que lo contiene de la siguiente manera:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"MiClase objeto = new MiClase();\nint resultado = objeto.Sumar(3, 5);\n\n")),(0,l.yg)("h3",{id:"modificadores-de-acceso"},"Modificadores de acceso"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los modificadores de acceso son palabras clave que se utilizan en la programaci\xf3n orientada a objetos para indicar la accesibilidad de los  miembros de una clase."),(0,l.yg)("li",{parentName:"ul"},"En C#, hay varios  modificadores de acceso que se pueden utilizar:")),(0,l.yg)("h4",{id:"public"},"public"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El modificador de acceso p\xfablico permite que una clase, un m\xe9todo o una propiedad sean accesibles desde cualquier parte del c\xf3digo. "),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Persona {\n  public string Nombre;\n  public int Edad;\n\n  public void Saludar() {\n    Console.WriteLine("\xa1Hola!");\n  }\n}\n\n')),(0,l.yg)("h4",{id:"private"},"private"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El modificador de acceso privado restringe el acceso a la clase en la que se define. Los campos y m\xe9todos privados s\xf3lo son accesibles desde dentro de la clase. "),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class CuentaBancaria {\n  private double Saldo;\n\n  public void Depositar(double cantidad) {\n    Saldo += cantidad;\n  }\n\n  public void Retirar(double cantidad) {\n    if (Saldo >= cantidad) {\n      Saldo -= cantidad;\n    } else {\n      Console.WriteLine("No hay suficiente saldo para retirar esa cantidad.");\n    }\n  }\n}\n\n')),(0,l.yg)("h4",{id:"protected"},"protected"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El modificador de acceso protegido permite el acceso a miembros de una clase desde la misma clase o clases que heredan de ella. "),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Vehiculo {\n  protected string Modelo;\n  protected int Anio;\n\n  public Vehiculo(string modelo, int anio) {\n    Modelo = modelo;\n    Anio = anio;\n  }\n}\n\npublic class Coche: Vehiculo {\n  public Coche(string modelo, int anio): base(modelo, anio) {\n    // Constructor de la clase Coche\n  }\n\n  public void MostrarDatos() {\n    Console.WriteLine("Modelo: " + Modelo);\n    Console.WriteLine("A\xf1o: " + Anio);\n  }\n}\n\n')),(0,l.yg)("h4",{id:"internal"},"internal"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El modificador de acceso interno permite que una clase o miembro sea accesible desde dentro del mismo ensamblado. "),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"internal class ClaseInterna {\n  // Miembros de la clase\n}\n\npublic class Programa {\n  static void Main(string[] args) {\n    ClaseInterna ci = new ClaseInterna(); // Se puede crear una instancia de la clase interna aqu\xed\n  }\n}\n\n")),(0,l.yg)("h4",{id:"protected-internal"},"protected internal"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El modificador de acceso protegido interno es una combinaci\xf3n de los dos modos anteriores y permite el acceso desde cualquier lugar dentro del mismo ensamblado o desde clases que heredan de la clase. "),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"protected internal class ClaseProtegidaInterna {\n  // Miembros de la clase\n}\n\npublic class Programa {\n  static void Main(string[] args) {\n    ClaseProtegidaInterna cpi = new ClaseProtegidaInterna(); // Se puede crear una instancia de la clase protegida interna aqu\xed\n  }\n}\n\npublic class ClaseHija: ClaseProtegidaInterna {\n  // La clase hija puede acceder a los miembros protegidos de la clase protegida interna\n}\n\n")),(0,l.yg)("h3",{id:"clase-parcial"},"Clase parcial"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Nos permite definir una clase en varias declaraciones."),(0,l.yg)("li",{parentName:"ul"},"Podemos definir(crear) una clase en varias declaraciones, pudiendo as\xed utilizar varios archivos para declarar una clase. "),(0,l.yg)("li",{parentName:"ul"},"Se utiliza normalmente para permitir la personalizaci\xf3n de clases generadas autom\xe1ticamente. el c\xf3digo generado suele colocarse en un archivo llamado .designer.cs; y durante la compilaci\xf3n se agrupan todas las definiciones parciales para obtener el c\xf3digo fuente de la clase.")),(0,l.yg)("h4",{id:"ejemplo-3"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"// Una declaraci\xf3n de la clase\npublic partial class Empleado {\n    public void HacerTrabajo(){\n      ... lo que sea ...\n    }\n}\n// Otra declaraci\xf3n de la clase\npublic partial class Empleado {\n    public void IrAComer() {\n      ... lo que sea ...\n    } \n}\n\n")),(0,l.yg)("h3",{id:"lectura-y-escritura"},"Lectura y Escritura"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se pueden restringir los accesos a una propiedad, si s\xf3lo incluimos la opci\xf3n \u201cget\u201d lo que estamos haciendo es dando permisos de lectura; en cambio si incluimos la opci\xf3n \u201cset\u201d lo que hacemos es dar permisos de escritura.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Persona {\n  private String elApellido;\n  private String elNombre;\n  private DateTime laFechaNac;\n  private String laClave;\n  public String Apellido {\n    get {return elApellido;}\n    set {elApellido=value.ToUpper();}\n  }\n  public String Nombre{\n    get {return elNombre;}\n    set {elNombre=value.ToLower();}\n  }\n  public DateTime FechaNac{\n    get {return laFechaNac;}\n    set { \n      if (value.Year >= 1900) {\n        laFechaNac = value;}\n    }\n  }\n  public int Edad {\n    get { return DateTime.Now.Year - laFechaNac.Year;}\n  }  \n  public String Clave {\n    set { laClave = value;}\n  }\n}\n\n")),(0,l.yg)("h3",{id:"sobrecarga-y-sobrescritura"},"Sobrecarga y Sobrescritura"),(0,l.yg)("h4",{id:"sobrecarga"},"Sobrecarga"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La sobrecarga es la creaci\xf3n dentro de la clase, de un grupo de m\xe9todos que tienen el mismo nombre, pero con un n\xfamero de par\xe1metros distinto y/o bien distintos tipos de datos.")),(0,l.yg)("h5",{id:"ejemplos"},"Ejemplos"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public void visualizaci\xf3n () {\n  MessageBox.Show("Sr. "+Apellido+" "+Nombre+" nacido el "+FechaNac); \n}\n\npublic void visualizaci\xf3n (string idioma) {\n  switch (idioma) {\n    case "es":  MessageBox.Show("Sr. "+Apellido+" "+Nombre+" nacido el "+FechaNac); break;\n    case "en":  MessageBox.Show("Mr. "+Apellido+" "+Nombre+" was born "+FechaNac); break;\n  }\n}\n\n')),(0,l.yg)("h4",{id:"sobrescritura"},"Sobrescritura"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Sabemos que las clases derivadas heredan las propiedades y m\xe9todos de su clase base. Se pueden usar los m\xe9todos sin ninguna modificaci\xf3n, pero s\xed el m\xe9todo no est\xe1 adaptado a la nueva clase podemos sobrescribirlo. Para ello utilizamos la palabra reservada ",(0,l.yg)("strong",{parentName:"li"},"override")," en la clase hija. "),(0,l.yg)("li",{parentName:"ul"},"Tambi\xe9n es obligatorio permitir la sobrescritura mediante el uso de  la palabra reservada ",(0,l.yg)("strong",{parentName:"li"},"virtual")," en la clase padre. Esto se utiliza para asegurar el polimorfismo entre las clases.")),(0,l.yg)("h5",{id:"ejemplo-4"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public override void visualizaci\xf3n () {\n  MessageBox.Show("Sr. "+Apellido+" "+Nombre+" nacido el "+FechaNac+" cobra "+Salario+".-\u20acuros/mes."); \n}\n\npublic sealead override void visualizaci\xf3n () {\n  base.visualizacion();\n  MessageBox.Show("y cobra "+Salario+".-\u20acuros/mes."); \n}\n\n')),(0,l.yg)("h3",{id:"constructor"},"Constructor"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es un m\xe9todo especial que nos garantiza una correcta instanciamiento de una clase."),(0,l.yg)("li",{parentName:"ul"},"Un constructor es un m\xe9todo especial que se utiliza para inicializar objetos. La ventaja de un constructor es que se llama cuando se crea un objeto de una clase. Se puede utilizar para establecer valores iniciales para los campos."),(0,l.yg)("li",{parentName:"ul"},"Este m\xe9todo se ejecuta de forma autom\xe1tica cuando creamos un objeto, o lo que es lo mismo, al instanciar una clase."),(0,l.yg)("li",{parentName:"ul"},"Lo que se ejecuta despu\xe9s del \u201cnew\u201d (nombreClase()) , es el constructor."),(0,l.yg)("li",{parentName:"ul"},"En una misma clase podemos tener m\xe1s de un constructor o podemos no especificarlo, en ese caso el entorno .NET crear\xe1 uno por defecto."),(0,l.yg)("li",{parentName:"ul"},"Aquel constructor que no tiene par\xe1metros se le conoce como constructor por defecto.")),(0,l.yg)("h4",{id:"ejemplo-5"},"Ejemplo"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imaginemos que tenemos la clase Alumno:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Alumno\n{\n    public int Id { get; set; }\n    public string Nombre { get; set; }\n    public DateTime FechaMatricula { get; set; }        \n}\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Tal como est\xe1 podemos hacer uso de ella, ya que, como hemos mencionado .NET crear\xe1 un constructor por defecto si no lo hemos definido, pero vamos a definirlo expl\xedcitamente, entonces nuestra clase lucir\xe1 as\xed ahora:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Alumno\n{\n    /* CONSTRUCTOR */\n    public Alumno()\n    {\n        Console.WriteLine("Un objeto de la clase Alumno se ha creado");\n    }\n \n    public int Id { get; set; }\n    public string Nombre { get; set; }\n    public DateTime FechaMatricula { get; set; }        \n}\n\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para poder probar, he a\xf1adido un Console.WriteLine, ahora vamos a instanciar nuestra clase Alumno desde el m\xe9todo Main de la clase Program:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"class Program\n{\n    static void Main()\n    {\n        var alumno = new Alumno();\n    }    \n}\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Tenga en cuenta que el nombre del constructor debe coincidir con el nombre de la clase y no puede tener un tipo de retorno (como void o int)."),(0,l.yg)("li",{parentName:"ul"},"Tambi\xe9n tenga en cuenta que se llama al constructor cuando se crea el objeto."),(0,l.yg)("li",{parentName:"ul"},"Todas las clases tienen constructores de forma predeterminada: si no crea un constructor de clase usted mismo, C# crea uno para usted. Sin embargo, no podr\xe1 establecer valores iniciales para los campos.")))),(0,l.yg)("h4",{id:"multiples-constructores"},"Multiples constructores"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es posible tener tantos constructores como necesitemos, siempre y cuando los par\xe1metros sean distintos."),(0,l.yg)("li",{parentName:"ul"},"Los constructores tambi\xe9n pueden tomar par\xe1metros, que se utilizan para inicializar campos.")),(0,l.yg)("h5",{id:"ejemplo-6"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Alumno\n{\n    /* CONSTRUCTORES */\n    public Alumno()\n    {\n        Console.WriteLine("Un objeto de la clase Alumno se ha creado");\n    }\n    public Alumno(int id, string Nombre, DateTime fechaMatricula)\n    {\n        this.Id = id;\n        this.Nombre = Nombre;\n        this.FechaMatricula = fechaMatricula;\n    }\n \n    public int Id { get; set; }\n    public string Nombre { get; set; }\n    public DateTime FechaMatricula { get; set; }        \n}\n\nclass Car\n{\n  public string model;\n\n  // Create a class constructor with a parameter\n  public Car(string modelName)\n  {\n    model = modelName;\n  }\n\n  static void Main(string[] args)\n  {\n    Car Ford = new Car("Mustang");\n    Console.WriteLine(Ford.model);\n  }\n}\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Gracias al concepto en POO llamado Sobrecarga u Overloading, al crear un objeto de la clase C# me presenta 2 opciones para hacerlo "))),(0,l.yg)("h4",{id:"ventajas"},"Ventajas"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Dentro de las ventajas que ofrecen los constructores destacan:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Inicializar variables, esto es especialmente \xfatil cuando la variable es de tipo por referencia ya que inicializarla previene el error: NullReferenceException."),(0,l.yg)("li",{parentName:"ul"},"Dar comportamiento personalizado o ejecutar l\xf3gica de negocio al crear objetos de cualquier clase.")))),(0,l.yg)("h3",{id:"interfaces"},"Interfaces"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es un CONTRATO que obliga a una clase \u201chija\u201d a implementar lo que la interfaz defina."),(0,l.yg)("li",{parentName:"ul"},"Una clase que implementa la palabra clave \u201c",(0,l.yg)("strong",{parentName:"li"},"interface"),"\u201d solo puede contener m\xe9todos y propiedades abstractos (con cuerpos vac\xedos).")),(0,l.yg)("h4",{id:"ejemplo-7"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"interface IAnimal \n{\n  void animalSound(); \n  void run(); \n}\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},'Se considera una buena pr\xe1ctica comenzar con la letra "I" al comienzo de una interfaz, ya que le facilita a usted y a los dem\xe1s recordar que se trata de una interfaz y no de una clase.'),(0,l.yg)("li",{parentName:"ul"},"De forma predeterminada, los miembros de una interfaz son abstract y public."),(0,l.yg)("li",{parentName:"ul"},"Las interfaces pueden contener propiedades y m\xe9todos, pero no campos.")))),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Para acceder a los m\xe9todos de la interfaz, la interfaz debe ser "implementada" (algo as\xed como heredada) por otra clase. '),(0,l.yg)("li",{parentName:"ul"},"Para implementar una interfaz, use el s\xedmbolo \u201c",(0,l.yg)("strong",{parentName:"li"},":"),"\u201d (al igual que con la herencia). "),(0,l.yg)("li",{parentName:"ul"},'El cuerpo del m\xe9todo de la interfaz lo proporciona la clase que lo "implementa". '),(0,l.yg)("li",{parentName:"ul"},"Tenga en cuenta que no tiene que usar la palabra clave override  al implementar una interfaz:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'// Interface\ninterface IAnimal \n{\n  void animalSound(); \n}\n\n\nclass Pig : IAnimal \n{\n  public void animalSound() \n  {\n   \n    Console.WriteLine("The pig says: wee wee");\n  }\n}\n\nclass Program \n{\n  static void Main(string[] args) \n  {\n    Pig myPig = new Pig(); \n    myPig.animalSound();\n  }\n}\n\n')),(0,l.yg)("h4",{id:"notas-sobre-las-interfaces"},"Notas sobre las interfaces"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Al igual que las clases abstractas , las interfaces no se pueden usar para crear objetos (en el ejemplo anterior, no es posible crear un objeto "IAnimal" en la clase Programa).'),(0,l.yg)("li",{parentName:"ul"},'Los m\xe9todos de interfaz no tienen cuerpo: el cuerpo lo proporciona la clase que lo "implementa".'),(0,l.yg)("li",{parentName:"ul"},"En la implementaci\xf3n de una interfaz, debe anular (completar el cuerpo) todos sus m\xe9todos."),(0,l.yg)("li",{parentName:"ul"},"Las interfaces pueden contener propiedades y m\xe9todos, pero no campos/variables."),(0,l.yg)("li",{parentName:"ul"},"Los miembros de la interfaz son por defecto abstract y public."),(0,l.yg)("li",{parentName:"ul"},"Una interfaz no puede contener un constructor (ya que no se puede usar para crear objetos).")),(0,l.yg)("h4",{id:"por-qu\xe9-y-cu\xe1ndo-usar-interfaces"},"\xbfPor qu\xe9 y cu\xe1ndo usar interfaces?"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para lograr la seguridad, oculte ciertos detalles y solo muestre los detalles importantes de un objeto (interfaz)."),(0,l.yg)("li",{parentName:"ul"},'C# no admite "herencia m\xfaltiple" (una clase solo puede heredar de una clase base). Sin embargo, se puede lograr con interfaces, porque la clase puede implementar m\xfaltiples interfaces. Nota: Para implementar m\xfaltiples interfaces, sep\xe1relas con una coma.')),(0,l.yg)("h4",{id:"otro-ejemplo"},"Otro ejemplo"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Aqu\xed tenemos la interfaz llamada ILogger")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},"internal interface ILogger\n{\n    void Log(string mensaje);\n    void LogException(Exception ex);\n}\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Y crear\xe9 dos clases que implementan la interfaz ILogger, la primera clase la llamar\xe9 LoggerArchivo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class LoggerArchivo : ILogger\n {\n     public void Log(string mensaje)\n     {\n         var rutaArchivo = @$"{Directory.GetCurrentDirectory()}\\Log.txt";\n         using (StreamWriter sw = new StreamWriter(rutaArchivo, append: true))\n         {\n             sw.WriteLine($"{DateTime.Now} : {mensaje}");\n         }\n     }\n     public void LogException(Exception ex)\n     {\n         string error = $"ERROR: {ex.Message}";\n         Log(error);\n     }\n }\n\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"De igual forma la otra clase que implemente dicha interfaz la llamar\xe9 LoggerConsola y tendr\xeda esta apariencia:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public class LoggerConsola : ILogger\n {\n     public void Log(string mensaje)\n     {\n         Console.WriteLine($"{DateTime.Now} : {mensaje}");\n     }\n     public void LogException(Exception ex)\n     {\n         SetColor(ConsoleColor.Red);\n         string error = $"ERROR: {ex.Message}";\n         Log(error);\n         SetColor(ConsoleColor.White);\n     }\n \n     private void SetColor(ConsoleColor color)\n     {\n         Console.ForegroundColor = color;\n     }\n }\n\n')),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("p",{parentName:"div"},"Como podr\xe1s notar crack, las clases que implementaron la interfaz tuvieron que definir los m\xe9todos que ella define."))),(0,l.yg)("h4",{id:"implementar-varias-interfaces"},"Implementar varias interfaces"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para implementar varias interfaces, sep\xe1relas con una coma:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'interface IFirstInterface \n{\n  void myMethod(); // interface method\n}\n\ninterface ISecondInterface \n{\n  void myOtherMethod(); // interface method\n}\n\n// Implement multiple interfaces\nclass DemoClass : IFirstInterface, ISecondInterface \n{\n  public void myMethod() \n  {\n    Console.WriteLine("Some text..");\n  }\n  public void myOtherMethod() \n  {\n    Console.WriteLine("Some other text...");\n  }\n}\n\nclass Program \n{\n  static void Main(string[] args)\n  {\n    DemoClass myObj = new DemoClass();\n    myObj.myMethod();\n    myObj.myOtherMethod();\n  }\n}\n\n')),(0,l.yg)("h3",{id:"clases-estaticas"},"Clases estaticas"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las clases normales, por as\xed decirlo, tienen miembros (campos, propiedades y m\xe9todos) los cuales  pueden ser utilizados cuando nosotros instanciamos un objeto de esa clase."),(0,l.yg)("li",{parentName:"ul"},"Esto es posible gracias al encapsulamiento, mediante el cual un objeto, es decir, la instancia de una clase, tiene miembros relacionados a dicho objeto. Si creo otra instancia, \xe9sta tendr\xe1 su propio objeto con miembros distintos a los de la primera instancia."),(0,l.yg)("li",{parentName:"ul"},"En el caso de las clases est\xe1ticas, \xe9stas tienen un comportamiento diferente, porque no pueden ser instanciadas, es decir los miembros (campos, propiedades y m\xe9todos) pueden ser utilizados sin necesidad de crear un objeto . Por lo tanto, no tiene miembros asociados a una instancia en particular."),(0,l.yg)("li",{parentName:"ul"},"Toda clase est\xe1tica debe tener miembros est\xe1ticos, esto quiere decir que una clase est\xe1tica debe tener campos, propiedades y m\xe9todos declarados como est\xe1ticos, esto incluye a su constructor."),(0,l.yg)("li",{parentName:"ul"},"Recordemos estas caracter\xedsticas de las clases est\xe1ticas:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"No pueden implementar interfaces."),(0,l.yg)("li",{parentName:"ul"},"No pueden heredar ni ser heredadas."))),(0,l.yg)("li",{parentName:"ul"},"En s\xedntesis, las clases est\xe1ticas se utilizan para organizar funcionalidades o m\xe9todos los cuales no est\xe1n asociados a objetos particulares."),(0,l.yg)("li",{parentName:"ul"},"Se utilizan para m\xe9todos generales, o utilitarios que queramos utilizar desde cualquier parte de nuestra aplicaci\xf3n.")),(0,l.yg)("h4",{id:"ejemplo-8"},"Ejemplo"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se utiliza la palabra clave ",(0,l.yg)("strong",{parentName:"li"},"static"))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'public static class HashHelper\n{\n    public static string MD5(string word)\n    {\n        MD5 md5 = MD5CryptoServiceProvider.Create();\n        ASCIIEncoding encoding = new ASCIIEncoding();\n        byte[] stream = null;\n        StringBuilder sb = new StringBuilder();\n        stream = md5.ComputeHash(encoding.GetBytes(word));\n        for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);\n        return sb.ToString();\n    }\n}\n\n')),(0,l.yg)("h3",{id:"clases-abstractas"},"Clases abstractas"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Son aquellas que se utilizan como clases base para otras clases."),(0,l.yg)("li",{parentName:"ul"},"Este tipo de clases no se pueden instanciar."),(0,l.yg)("li",{parentName:"ul"},"Las clases abstractas pueden tener m\xe9todos con una definici\xf3n por defecto, pero si queremos que su clase hija la modifique debemos hacer uso de la palabra reservada ",(0,l.yg)("strong",{parentName:"li"},"virtual"),"."),(0,l.yg)("li",{parentName:"ul"},"Las clases que implementan una clase abstracta, es decir las clases hijas, no est\xe1n obligadas a implementar los m\xe9todos que \xe9sta define.")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La palabra clave ",(0,l.yg)("strong",{parentName:"li"},"abstract")," se utiliza para clases y m\xe9todos:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Clase abstracta: es una clase restringida que no se puede usar para crear objetos (para acceder a ella, se debe heredar de otra clase)."),(0,l.yg)("li",{parentName:"ul"},"M\xe9todo abstracto: solo se puede usar en una clase abstracta y no tiene cuerpo. El cuerpo lo proporciona la clase derivada (heredada de).")))),(0,l.yg)("h4",{id:"ejemplo-9"},"Ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine("Clases abstractas!");\n        var cuadrado = new Cuadrado(10);\n        Console.WriteLine($"El lado es {cuadrado.Lado}, el \xe1rea es {cuadrado.CalcularArea()}, el perimetro es {cuadrado.CalcularPerimetro()} y el valor es {cuadrado.metodoEjemplo()}");\n    }\n}\npublic abstract class Poligono\n{\n    public abstract double CalcularArea();\n    public abstract double CalcularPerimetro();\n    public virtual bool metodoEjemplo()\n    {\n        return true;\n    }\n}\n \npublic class Cuadrado : Poligono\n{\n    //Propiedad\n    public int Lado { get; }\n    //Constructor\n    public Cuadrado(int lado)\n    {\n        Lado = lado;\n    }\n    //M\xe9todos\n    public override double CalcularArea()\n    {\n        return Math.Pow(this.Lado, 2);\n    }\n    public override double CalcularPerimetro()\n    {\n        return this.Lado * 4;\n    }\n    public override bool metodoEjemplo()\n    {\n        return false; //sobreescribimos la funcionalidad de la clase base\n    }\n}\n\n')),(0,l.yg)("h4",{id:"otro-ejemplo-1"},"Otro ejemplo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'abstract class Animal \n{\n  public abstract void animalSound();\n  public void sleep() \n  {\n    Console.WriteLine("Zzz");\n  }\n}\n\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Del ejemplo anterior, no es posible crear un objeto de la clase Animal."),(0,l.yg)("li",{parentName:"ul"},"Para acceder a la clase abstracta, se debe heredar de otra clase. ")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-csharp"},'\n// Abstract class\nabstract class Animal\n{\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep()\n  {\n    Console.WriteLine("Zzz");\n  }\n}\n\n// Derived class (inherit from Animal)\nclass Pig : Animal\n{\n  public override void animalSound()\n  {\n    // The body of animalSound() is provided here\n    Console.WriteLine("The pig says: wee wee");\n  }\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Pig myPig = new Pig(); // Create a Pig object\n    myPig.animalSound();  // Call the abstract method\n    myPig.sleep();  // Call the regular method\n  }\n}\n\n')))}u.isMDXComponent=!0}}]);