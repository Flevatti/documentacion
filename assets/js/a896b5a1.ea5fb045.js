"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[2929],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>p});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=i,g=u["".concat(s,".").concat(p)]||u[p]||d[p]||o;return t?n.createElement(g,r(r({ref:a},m),{},{components:t})):n.createElement(g,r({ref:a},m))}));function p(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6356:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(7462),i=(t(7294),t(3905));const o={sidebar_position:7},r="Comandos de Git",l={unversionedId:"Git/comandosGit",id:"Git/comandosGit",title:"Comandos de Git",description:"Git init",source:"@site/docs/Git/comandosGit.md",sourceDirName:"Git",slug:"/Git/comandosGit",permalink:"/documentacion/docs/Git/comandosGit",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Git/comandosGit.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"Git",previous:{title:"Tag",permalink:"/documentacion/docs/Git/tag"},next:{title:"Comandos de Git -- Parte 2",permalink:"/documentacion/docs/Git/comandosgit2"}},s={},c=[{value:"Git init",id:"git-init",level:2},{value:"Git add",id:"git-add",level:2},{value:"Git commit",id:"git-commit",level:2},{value:"Git push",id:"git-push",level:2},{value:"Ejemplo con la opci\xf3n --set-upstream",id:"ejemplo-con-la-opci\xf3n---set-upstream",level:4},{value:"Diferencia con git branch",id:"diferencia-con-git-branch",level:4},{value:"Git fetch y pull",id:"git-fetch-y-pull",level:2},{value:"Fetch",id:"fetch",level:4},{value:"Pull",id:"pull",level:4},{value:"Pull con rebase",id:"pull-con-rebase",level:4},{value:"Pull con merge",id:"pull-con-merge",level:4},{value:"Git checkout",id:"git-checkout",level:2},{value:"Commit espec\xedfico",id:"commit-espec\xedfico",level:4},{value:"Rama existente",id:"rama-existente",level:4},{value:"Rama nueva",id:"rama-nueva",level:4},{value:"Rama nueva o Reiniciar una rama a un punto de partida",id:"rama-nueva-o-reiniciar-una-rama-a-un-punto-de-partida",level:4},{value:"Forzar un checkout",id:"forzar-un-checkout",level:4},{value:"Deshacer los cambios en tu Directorio de trabajo",id:"deshacer-los-cambios-en-tu-directorio-de-trabajo",level:4},{value:"Documentaci\xf3n.",id:"documentaci\xf3n",level:4},{value:"Git rebase y merge",id:"git-rebase-y-merge",level:2},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Diferencia de los commits:",id:"diferencia-de-los-commits",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Para seguir explicando rebase",id:"para-seguir-explicando-rebase",level:4},{value:"Rebase",id:"rebase",level:4},{value:"No rebases la historia p\xfablica",id:"no-rebases-la-historia-p\xfablica",level:4},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:4},{value:"Merge",id:"merge",level:4},{value:"Fusi\xf3n de avance r\xe1pido",id:"fusi\xf3n-de-avance-r\xe1pido",level:4},{value:"Fusi\xf3n de 3 v\xedas",id:"fusi\xf3n-de-3-v\xedas",level:4},{value:"Git switch y restore",id:"git-switch-y-restore",level:2},{value:"Git restore",id:"git-restore",level:4},{value:"Git switch",id:"git-switch",level:4},{value:"git reflog",id:"git-reflog",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"Git reflog vs git log",id:"git-reflog-vs-git-log",level:4},{value:"Git reset",id:"git-reset",level:2},{value:"Estado de un proyecto",id:"estado-de-un-proyecto",level:4},{value:"Git reset y los tres \xe1rboles de git",id:"git-reset-y-los-tres-\xe1rboles-de-git",level:4},{value:"Directorio de trabajo",id:"directorio-de-trabajo",level:4},{value:"Indice del entorno de ensayo",id:"indice-del-entorno-de-ensayo",level:4},{value:"Historial de confirmaciones",id:"historial-de-confirmaciones",level:4},{value:"Funcionamiento",id:"funcionamiento",level:4},{value:"Git checkout b",id:"git-checkout-b",level:4},{value:"Git reset b",id:"git-reset-b",level:4},{value:"Opciones principales",id:"opciones-principales",level:4},{value:"--hard",id:"--hard",level:4},{value:"--mixed",id:"--mixed",level:4},{value:"--soft",id:"--soft",level:4},{value:"Unstage un archivo",id:"unstage-un-archivo",level:4},{value:"Eliminaci\xf3n de las confirmaciones locales",id:"eliminaci\xf3n-de-las-confirmaciones-locales",level:4},{value:"Restablecer una rama a un commit anterior",id:"restablecer-una-rama-a-un-commit-anterior",level:4},{value:"Diferencias con Git revert",id:"diferencias-con-git-revert",level:4},{value:"No restablezcas el historial p\xfablico",id:"no-restablezcas-el-historial-p\xfablico",level:4},{value:"Error",id:"error",level:4},{value:"Documentaci\xf3n",id:"documentaci\xf3n-1",level:4},{value:"git revert",id:"git-revert",level:2},{value:"C\xf3mo funciona",id:"c\xf3mo-funciona",level:4},{value:"Algunas opciones",id:"algunas-opciones",level:4},{value:"Reset vs Revert",id:"reset-vs-revert",level:4},{value:"Resumen",id:"resumen-1",level:4},{value:"Documentaci\xf3n",id:"documentaci\xf3n-2",level:4},{value:"Git stash",id:"git-stash",level:2},{value:"Esconde tu trabajo",id:"esconde-tu-trabajo",level:4},{value:"Reaplicando sus cambios ocultos",id:"reaplicando-sus-cambios-ocultos",level:4},{value:"Ocultar archivos ignorados o sin seguimiento",id:"ocultar-archivos-ignorados-o-sin-seguimiento",level:4},{value:"Administrar m\xfaltiples alijos",id:"administrar-m\xfaltiples-alijos",level:4},{value:"Ver diferencias de alijo",id:"ver-diferencias-de-alijo",level:4},{value:"Alijos parciales",id:"alijos-parciales",level:4},{value:"Creando una rama a partir de tu alijo",id:"creando-una-rama-a-partir-de-tu-alijo",level:4},{value:"Limpiando tu alijo",id:"limpiando-tu-alijo",level:4},{value:"C\xf3mo funciona git stash",id:"c\xf3mo-funciona-git-stash",level:4},{value:"Documentaci\xf3n",id:"documentaci\xf3n-3",level:4},{value:"git diff",id:"git-diff",level:2},{value:"Leer diferencias: resultados",id:"leer-diferencias-resultados",level:4},{value:"Introducci\xf3n a la comparaci\xf3n",id:"introducci\xf3n-a-la-comparaci\xf3n",level:4},{value:"Metadatos",id:"metadatos",level:4},{value:"Marcadores de los cambios",id:"marcadores-de-los-cambios",level:4},{value:"Fragmento de la diferencia",id:"fragmento-de-la-diferencia",level:4},{value:"Resaltar cambios",id:"resaltar-cambios",level:4},{value:"Otra forma",id:"otra-forma",level:4},{value:"Diferenciaci\xf3n de archivos binarios",id:"diferenciaci\xf3n-de-archivos-binarios",level:4},{value:"Comparar archivos",id:"comparar-archivos",level:4},{value:"Comparar todos los cambios",id:"comparar-todos-los-cambios",level:4},{value:"Comparar archivos entre dos confirmaciones distintas",id:"comparar-archivos-entre-dos-confirmaciones-distintas",level:4},{value:"Comparar ramas",id:"comparar-ramas",level:4},{value:"Comparar archivos de dos ramas",id:"comparar-archivos-de-dos-ramas",level:4},{value:"Documentaci\xf3n",id:"documentaci\xf3n-4",level:4},{value:"git rm",id:"git-rm",level:2},{value:"Uso",id:"uso",level:4},{value:"Especificar archivos",id:"especificar-archivos",level:4},{value:"Otros patrones",id:"otros-patrones",level:4},{value:"Opcion -f o --force",id:"opcion--f-o---force",level:4},{value:"Opcion -n o \u2013-dry-run",id:"opcion--n-o--dry-run",level:4},{value:"Opcion -r",id:"opcion--r",level:4},{value:"--",id:"--",level:4},{value:"Opcion \u2013-cached",id:"opcion--cached",level:4},{value:"Opcion --ignore-unmatch",id:"opcion---ignore-unmatch",level:4},{value:"Opcion -q o \u2013-quiet",id:"opcion--q-o--quiet",level:4},{value:"Como deshacer el comando git rm",id:"como-deshacer-el-comando-git-rm",level:4},{value:"Aclaraciones",id:"aclaraciones",level:4},{value:"Ejemplos",id:"ejemplos",level:4},{value:"Como eliminar archivos que ya no est\xe1n en el sistema de archivos",id:"como-eliminar-archivos-que-ya-no-est\xe1n-en-el-sistema-de-archivos",level:4},{value:"git clone",id:"git-clone",level:2},{value:"Copia de desarrollo",id:"copia-de-desarrollo",level:4},{value:"Colaboraci\xf3n entre repositorios",id:"colaboraci\xf3n-entre-repositorios",level:4},{value:"Uso",id:"uso-1",level:4},{value:"Clonaci\xf3n a una carpeta especifica",id:"clonaci\xf3n-a-una-carpeta-especifica",level:4},{value:"Clonar una etiqueta espec\xedfica",id:"clonar-una-etiqueta-espec\xedfica",level:4},{value:"Clon superficial",id:"clon-superficial",level:4},{value:"Opciones de configuraci\xf3n",id:"opciones-de-configuraci\xf3n",level:4},{value:"--branch",id:"--branch",level:4},{value:"--bare",id:"--bare",level:4},{value:"--mirror",id:"--mirror",level:4},{value:"--template",id:"--template",level:4},{value:"Url de Git",id:"url-de-git",level:4},{value:"Protocolos de URL de Git",id:"protocolos-de-url-de-git",level:4},{value:"-SSH",id:"-ssh",level:4},{value:"-GIT",id:"-git",level:4},{value:"-HTTP",id:"-http",level:4}],m={toc:c};function d(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"comandos-de-git"},"Comandos de Git"),(0,i.kt)("h2",{id:"git-init"},"Git init"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inicializa un repositorio."),(0,i.kt)("li",{parentName:"ul"},"Ejecutar este comando crea el subdirectorio. git en el  directorio en el que se ejecuta (el  directorio del proyecto); no se agregan ni cambian archivos que no sean en el subdirectorio .git"),(0,i.kt)("li",{parentName:"ul"},"Dentro del directorio .git se crean todos los metadatos que necesita Git (branch de default, objetos, referencias, archivos template\u2026)."),(0,i.kt)("li",{parentName:"ul"},"Cuando ejecutas git init, Git crea una estructura de directorios y archivos en la ubicaci\xf3n actual para comenzar a rastrear los cambios en el proyecto."),(0,i.kt)("li",{parentName:"ul"},"La mayor\xeda de los comandos de Git est\xe1n disponibles solo cuando se ejecutan dentro de un repositorio inicializado."),(0,i.kt)("li",{parentName:"ul"},"Es importante mencionar que git init se usa generalmente solo una vez al principio del proyecto, cuando se desea iniciar el seguimiento de versiones con Git. Si ya existe un repositorio Git (por ejemplo, si clonaste uno existente con git clone), no necesitas usar git init."),(0,i.kt)("li",{parentName:"ul"},"Obviamente, es posible inicializar un  directorio diferente al actual indicando la ruta:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git init /path/to/project/directory\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Como alternativa, puedes crear un repositorio dentro de un nuevo directorio especificando el nombre del proyecto:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git init [nombre del proyecto]\n")),(0,i.kt)("h2",{id:"git-add"},"Git add"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A\xf1ade archivos al \xedndice (almacenamiento provisional)."),(0,i.kt)("li",{parentName:"ul"},"El indice es una lista de archivos que se van a a\xf1adir en la pr\xf3xima confirmaci\xf3n (commit)."),(0,i.kt)("li",{parentName:"ul"},"Le dice a Git que desea incluir las actualizaciones de un archivo en particular en la pr\xf3xima confirmaci\xf3n. Sin embargo, git add no afecta al repositorio de ninguna manera significativa."),(0,i.kt)("li",{parentName:"ul"},'El "\xedndice" contiene una instant\xe1nea del contenido del \xe1rbol de trabajo, y es esta instant\xe1nea la que se toma como contenido de la siguiente confirmaci\xf3n. Por lo tanto, despu\xe9s de realizar cambios en el \xe1rbol de trabajo y antes de ejecutar el comando de confirmaci\xf3n, debe utilizar el ',(0,i.kt)("strong",{parentName:"li"},"comando add")," para agregar archivos nuevos o modificados al \xedndice."),(0,i.kt)("li",{parentName:"ul"},"Este comando se puede realizar varias veces antes de una confirmaci\xf3n. "),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git status")," se puede utilizar para obtener un resumen de qu\xe9 archivos tienen cambios ."),(0,i.kt)("li",{parentName:"ul"},"El  comando ",(0,i.kt)("strong",{parentName:"li"},"git add")," no agregar\xe1 archivos ignorados de forma predeterminada. Si alg\xfan archivo ignorado se especific\xf3 expl\xedcitamente en la l\xednea de comando, git add fallar\xe1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-add"},"Git add"))),(0,i.kt)("h2",{id:"git-commit"},"Git commit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Crea un registro de los "cambios especificados en el \xedndice" en el repositorio.'),(0,i.kt)("li",{parentName:"ul"},"Realiza una instant\xe1nea con los archivos que se encuentran en el \xedndice."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git commit")," guardar\xe1 todos los cambios que est\xe1n registrados en la zona de almacenamiento provisional (staging \xe1rea que en espa\xf1ol seria zona de montaje o \xe1rea de preparaci\xf3n), junto con una breve descripci\xf3n del usuario, en el repositorio local."),(0,i.kt)("li",{parentName:"ul"},'Las instant\xe1neas confirmadas pueden considerarse como versiones "seguras" de un proyecto: Git no las cambiar\xe1 nunca a no ser que se lo pidas expresamente.'),(0,i.kt)("li",{parentName:"ul"},"Puedes pensar en un commit como una captura de tu proyecto, donde se crea una nueva versi\xf3n de ese proyecto en el repositorio actual."),(0,i.kt)("li",{parentName:"ul"},"Crea una nueva confirmaci\xf3n que contenga el contenido del \xedndice y un mensaje de confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Una confirmaci\xf3n representa una versi\xf3n espec\xedfica del \xe1rbol de trabajo(proyecto)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-commit"},"git commit"))),(0,i.kt)("h2",{id:"git-push"},"Git push"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git push")," en Git se utiliza para enviar cambios locales a un repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"De esta manera, los commit locales se ponen a disposici\xf3n de otros colaboradores del proyecto, quienes pueden recuperarlos a trav\xe9s de una b\xfasqueda e incorporarlos a sus respectivos repositorios locales."),(0,i.kt)("li",{parentName:"ul"},"En el modo est\xe1ndar, ",(0,i.kt)("strong",{parentName:"li"},"git push")," envia solo los cambios nuevos, ya que Git sabe qu\xe9 commit ya est\xe1n presentes en el repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"Al ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git push")," sin especificar ning\xfana opcion, solo los nuevos commit se enviar\xe1n al repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"Sin embargo, es posible dar varios argumentos al comando para elegir exactamente qu\xe9 enviar al repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"El push de etiquetas a un repositorio remoto debe indicarse expl\xedcitamente a trav\xe9s del argumento ",(0,i.kt)("strong",{parentName:"li"},"--tags"),", que env\xeda todas las etiquetas nuevas presentes en el repositorio local al repositorio remoto:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git push \u2013-tags\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con el argumento ",(0,i.kt)("strong",{parentName:"li"},"--all")," se produce el upload de todos los ramas  presentes en el repositorio local hacia el repositorio remoto:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git push --all\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Obviamente, es posible indicar, si tienes varios repositorios remotos y varios branch, el branch espec\xedfico para enviar y el remote al cual enviarlo ejecutando el comando en la forma ",(0,i.kt)("strong",{parentName:"li"},"git push ","<","remoto> ","<","branch>"),"."),(0,i.kt)("li",{parentName:"ul"},"Por defecto, Git elige origin como remoto y tu rama actual como la rama a la que subir."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-push"},"git push"))),(0,i.kt)("h4",{id:"ejemplo-con-la-opci\xf3n---set-upstream"},"Ejemplo con la opci\xf3n --set-upstream"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--set-upstream")," en Git se utiliza al momento de empujar una rama local a un repositorio remoto por primera vez."),(0,i.kt)("li",{parentName:"ul"},"Su prop\xf3sito principal es establecer una relaci\xf3n de seguimiento (tracking) entre la rama local y la rama remota."),(0,i.kt)("li",{parentName:"ul"},"Esta relaci\xf3n de seguimiento permite que Git realice un seguimiento de la relaci\xf3n entre ambas ramas, facilitando operaciones como ",(0,i.kt)("strong",{parentName:"li"},"git pull")," y proporcionando informaci\xf3n sobre el estado de la rama local en comparaci\xf3n con la rama remota."),(0,i.kt)("li",{parentName:"ul"},"Cuando utilizas ",(0,i.kt)("strong",{parentName:"li"},"--set-upstream")," al hacer un ",(0,i.kt)("strong",{parentName:"li"},"git push"),", est\xe1s configurando la rama local para que haga un seguimiento de la rama remota. Esto significa que en el futuro, cuando realices operaciones como ",(0,i.kt)("strong",{parentName:"li"},"git pull")," o ",(0,i.kt)("strong",{parentName:"li"},"git status"),", Git entender\xe1 autom\xe1ticamente con qu\xe9 rama remota debe sincronizarse."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, si est\xe1s en una rama local llamada mi_rama y quieres empujarla al repositorio remoto llamado origin, puedes usar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git push --set-upstream origin mi_rama\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Despu\xe9s de ejecutar este comando, podr\xe1s usar git pull sin argumentos en mi_rama para obtener autom\xe1ticamente los cambios de la rama remota. La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--set-upstream")," tambi\xe9n configura la rama local para que, al realizar futuros ",(0,i.kt)("strong",{parentName:"li"},"git push")," y ",(0,i.kt)("strong",{parentName:"li"},"git pull"),", sepa autom\xe1ticamente a qu\xe9 rama remota y rama local debe referirse.")),(0,i.kt)("h4",{id:"diferencia-con-git-branch"},"Diferencia con git branch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para hacer lo anterior, podemos ejecutar el siguiente comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git branch --set-upstream-to origin/main\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este comando se utiliza cuando ya tienes una rama local y deseas establecer la relaci\xf3n de seguimiento con una rama remota (origin/main). Es \xfatil cuando ya has empujado la rama local al repositorio remoto y deseas configurar o cambiar la rama de seguimiento."),(0,i.kt)("li",{parentName:"ul"},"Esto significa que en el futuro, cuando est\xe9s en la rama local, puedes usar ",(0,i.kt)("strong",{parentName:"li"},"git pull")," o ",(0,i.kt)("strong",{parentName:"li"},"git push")," sin especificar la rama remota, ya que la relaci\xf3n de seguimiento se ha establecido."),(0,i.kt)("li",{parentName:"ul"},"La rama local no se especifica en el comando. La rama local es impl\xedcitamente la rama en la que te encuentras cuando ejecutas el comando."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, si est\xe1s actualmente en la rama main y deseas configurarla para hacer un seguimiento de la rama remota origin/main, puedes ejecutar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git branch --set-upstream-to origin/main\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este comando establece la relaci\xf3n de seguimiento para la rama local actual (main) hacia la rama remota especificada (origin/main). En este contexto, no necesitas especificar expl\xedcitamente el nombre de la rama local porque el comando se ejecuta desde esa rama."),(0,i.kt)("li",{parentName:"ul"},"En resumen, ambos comandos se utilizan para establecer relaciones de seguimiento entre ramas locales y remotas, pero se aplican en contextos ligeramente diferentes: uno al realizar un git push inicial y el otro al configurar o cambiar la rama de seguimiento despu\xe9s de haber enviado la rama al repositorio remoto.")),(0,i.kt)("h2",{id:"git-fetch-y-pull"},"Git fetch y pull"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Git pull y fetch son dos comandos que regularmente son usados por los usuarios de Git."),(0,i.kt)("li",{parentName:"ul"},"Por el bien del contexto, vale la pena recordar que probablemente trabajemos en un repositorio clon. \xbfQu\xe9 es un clon? Es simplemente un duplicado de otro repositorio. Es b\xe1sicamente el tener tu propia copia del c\xf3digo fuente de otra persona."),(0,i.kt)("li",{parentName:"ul"},"Con eso, dicho, para mantener tu clon actualizado con cualquier cambio que se haya aplicado al original, necesitaras traerlos a tu clon."),(0,i.kt)("li",{parentName:"ul"},"Ah\xed es donde fetch y pull  entran."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git fetch")," es el comando que dice a su local git que recupere la informaci\xf3n de metadatos m\xe1s reciente del original (pero no realiza ninguna transferencia de archivo. Es m\xe1s como simplemente verificar si hay alg\xfan cambio disponible)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git pull")," por otro lado, hace eso y trae una copia de esos cambios al repositorio local."),(0,i.kt)("li",{parentName:"ul"},"Tanto pull como fetch se utilizan para mantener el repositorio actualizado con los cambios que haya habido. No siempre, pero en muchos casos hay m\xe1s de una persona trabajando en un repositorio, por lo que cuando una persona hace cambios en un repositorio remoto con un ",(0,i.kt)("strong",{parentName:"li"},"git push"),", nuestro repositorio local estar\xe1 desactualizado y tendremos que traernos los cambios que se hayan hecho."),(0,i.kt)("li",{parentName:"ul"},"Veamos un ejemplo de diferencias entre git fetch y git pull en el que entran en juego 3 partes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Repositorio remoto: ser\xeda el que se almacena en GitHub."),(0,i.kt)("li",{parentName:"ul"},"Repositorio local: es una copia del repositorio remoto que se almacena en tu ordenador o en un servidor, por ejemplo."),(0,i.kt)("li",{parentName:"ul"},"Espacio de trabajo: los archivos con los que trabajas directamente en Visual Studio Code, PyCharm o con cualquier editor de c\xf3digo.\n",(0,i.kt)("img",{parentName:"li",src:"https://geekytheory.com/content/images/size/w1000/2021/11/git-fetch-vs-git-pull-diferencias.png",alt:"Diferencias"}))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git fetch")," es el comando que hace que tu repositorio Git local se actualice con la \xfaltima informaci\xf3n que hay en el repositorio remoto, pero no hace ninguna transferencia de archivos a tu espacio de trabajo local (el c\xf3digo que ves en tu editor por ejemplo). Podr\xeda decirse que sirve para comprobar si hay alg\xfan cambio y traerlo a tu repositorio local."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git pull")," es el comando que comprueba si hay cambios en el repositorio remoto y, en caso de que los haya, se trae esos archivos a tu repositorio local y actualiza tu espacio de trabajo (tu IDE, tus archivos)."),(0,i.kt)("li",{parentName:"ul"},"Simplificando mucho la explicaci\xf3n, git pull hace un git fetch seguido de un git merge.")))),(0,i.kt)("h4",{id:"fetch"},"Fetch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El prop\xf3sito de ",(0,i.kt)("strong",{parentName:"li"},"git fetch")," es descargar commit, ramas y etiquetas desde un repositorio remoto al repositorio local. Los nuevos contenidos recuperados a trav\xe9s de ",(0,i.kt)("strong",{parentName:"li"},"git fetch")," deber\xedan aplicarse expl\xedcitamente al \xe1rbol de trabajo(proyecto), lo que hace que la ejecuci\xf3n de este comando sea una operaci\xf3n segura para recuperar nuevos commit, sin tener que aplicarlos necesariamente a su trabajo en curso."),(0,i.kt)("li",{parentName:"ul"},'Supongamos que ayer clonamos un repositorio remoto que solo ten\xeda la rama principal y esa rama conten\xeda tres commit. Por lo tanto, mi copia local sabe que est\xe1 "conectada" al repositorio remoto indicado como origen y mi \xe1rbol de trabajo (proyecto) ha extra\xeddo el \xfaltimo commit de la \xfanica rama presente, conectando la rama local principal con la rama correspondiente con el mismo nombre en origen.'),(0,i.kt)("li",{parentName:"ul"},"Y Otro colaborados ha agregado algunos commit en main y ha creado un nuevo branch."),(0,i.kt)("li",{parentName:"ul"},"Entonces ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git branch -vv\ngit fetch\ngit status\nOn branch main\nYour branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.\n(use \"git pull\" to update your local branch)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los nuevos commit y la nueva rama ahora tambi\xe9n est\xe1n disponibles en el repositorio local, pero no se han aplicado. Esto se debe a que, aunque todos los commit, tanto locales como remotas, ahora est\xe1n presentes en el repositorio local, Git mantiene los commit de los branch locales separados de los branch remotos.\n",(0,i.kt)("img",{parentName:"li",src:"https://lh6.googleusercontent.com/l9_1YJWaDKk_XEFc_TDq1cbsJXzwYbUpvjE39YhusFh5wETFA1UQOkwqTnLOZGqmqajOn532u8FvZBgTI5L7sVpLmsYwLtl6P51QCVDFRG3UMKBbNkhZIpV4I2zrBonLWlaZRVQS7dGbE8hiEpFXgDz1wK4TNFhz",alt:"Historial de commit fetch"})),(0,i.kt)("li",{parentName:"ul"},"Ser\xe1 posible ver cuales commit han sido a\xf1adidos a origin/master a trav\xe9s ",(0,i.kt)("strong",{parentName:"li"},"git log")," y aplicar nuevos commit al propio branch(rama) local a trav\xe9s de ",(0,i.kt)("strong",{parentName:"li"},"git merge"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git log --oneline main..origin/main\ngit merge origin/main\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git log"),": Muestra el historial de commits."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"--oneline"),": Muestra cada commit en una sola l\xednea, lo que facilita la lectura del historial."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"main..origin/main"),': Esto es una expresi\xf3n de rango. En este contexto, significa "todos los commits que est\xe1n en la rama origin/main pero no en la rama local main".'),(0,i.kt)("li",{parentName:"ul"},"Entonces, el comando ",(0,i.kt)("strong",{parentName:"li"},"git log --oneline main..origin/main")," te dar\xe1 una lista de los commits en la rama remota origin/main que a\xfan no han sido incorporados a la rama local main. Esto puede ser \xfatil para revisar los cambios que han ocurrido en el repositorio remoto antes de fusionarlos en tu rama local.")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://lh5.googleusercontent.com/P0o4_df4lJtQGkHFdGMV8U6IYmIrLeZylG6ZeeeEoi9N_gGFJDBAn5Nt6GNmilW82jTh_W37XXccOJS0y22i8OVu_nZ6lWQ9TG3bDWIChlAHO03UAfNR8Wz60r5oKpHN_21VmYELACSV8codYyEGz-qIHn--baJo",alt:"Historial de commit fetch 2"})),(0,i.kt)("h4",{id:"pull"},"Pull"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git pull")," en Git es, en realidad, una combinaci\xf3n de otros dos comandos. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git pull")," recupera (",(0,i.kt)("strong",{parentName:"li"},"git fetch"),") las nuevas confirmaciones y las fusiona (",(0,i.kt)("strong",{parentName:"li"},"git merge"),") en tu rama local."),(0,i.kt)("li",{parentName:"ul"},"Por defecto hace dos cosas:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Actualiza la rama de trabajo actual."),(0,i.kt)("li",{parentName:"ol"},"Actualiza las referencias de rama remota para todas las dem\xe1s ramas."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git pull")," es un comando combinado, que equivale a ",(0,i.kt)("strong",{parentName:"li"},"git fetch")," + ",(0,i.kt)("strong",{parentName:"li"},"git merge"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Git fetch"),": Por s\xed mismo, ",(0,i.kt)("strong",{parentName:"li"},"git fetch")," actualiza todas las referencias de rama remota en tu repositorio local. En realidad, no se reflejan cambios en ninguna de las ramas de trabajo locales."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Git merge"),": Sin ning\xfan argumento, ",(0,i.kt)("strong",{parentName:"li"},"git merge")," fusionar\xe1 la referencia de rama remota con la rama de trabajo local."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Git pull"),":  ",(0,i.kt)("strong",{parentName:"li"},"git fetch")," actualiza las referencias de ramas remotas. ",(0,i.kt)("strong",{parentName:"li"},"git merge")," actualiza la rama actual con la referencia de rama remota correspondiente. Utilizando ",(0,i.kt)("strong",{parentName:"li"},"git pull"),", obtienes ambas partes. Pero, esto significa que si te mueves a la rama feature y ejecutas ",(0,i.kt)("strong",{parentName:"li"},"git pull"),", cuando te muevas a master, cualquier nueva actualizaci\xf3n no estar\xe1 incluida. Cuando te muevas a otra rama que pudiera tener nuevos cambios, siempre es buena idea ejecutar  ",(0,i.kt)("strong",{parentName:"li"},"git pull"),"."),(0,i.kt)("li",{parentName:"ul"},"En la primera fase de la operaci\xf3n, ",(0,i.kt)("strong",{parentName:"li"},"git pull")," realizar\xe1 una b\xfasqueda de git limitada solo a la rama en la que estamos ubicado. Una vez que se haya descargado el contenido, ",(0,i.kt)("strong",{parentName:"li"},"git pull")," ingresar\xe1 a un flujo de reconciliaci\xf3n de commit que puede seguir dos m\xe9todos con efectos muy diferentes."),(0,i.kt)("li",{parentName:"ul"},"Entend\xe1moslo mejor con un ejemplo:"),(0,i.kt)("li",{parentName:"ul"},"Supongamos que hemos clonado un  repositorio remoto cuando el \xfaltimo commit en su rama  main era el indicado como \u201cB\u201d. Hemos hecho modificaciones y hemos guardado en local los commit \u201cC\u201d, \u201cD\u201d y \u201cE\u201d. Mientras tanto, alguien m\xe1s ha creado y enviado al repositorio remoto otros commit, \u201cF\u201d, \u201cG\u201d y \u201cH\u201d\n",(0,i.kt)("img",{parentName:"li",src:"https://lh6.googleusercontent.com/20C6f6AbdTa9mzogrLIQxiioQF3GGX54-esT4zatd4wZIvF30Q6Gzi0waxauDsaZBuMbE7GCubFSyhvplC0r5avnbeDngscmq56La1K8ssEV2hezfytevLjFIXCLU0G2N8D4Mi4r-wWqAFdiHwCGscP1kyiRnw9G",alt:"Historial de confirmaciones pull"})),(0,i.kt)("li",{parentName:"ul"},'En esta situaci\xf3n, teniendo en cuenta que el repositorio remoto es el que alberga la historia "oficial" del proyecto, tendremos que recuperar los nuevos commits remotos e integrarlos con los locales. No obstante, tambi\xe9n tendremos que indicar la estrategia preferida con la que hacerlo.'),(0,i.kt)("li",{parentName:"ul"},"Git, de hecho, ofrece dos formas distintas para tratar con ramas divergentes, con rebase o con fusi\xf3n.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En versiones recientes de Git, ",(0,i.kt)("strong",{parentName:"li"},"git pull")," en ramas divergentes falla a menos que especifique la estrategia deseada. Puede hacer esto a trav\xe9s de argumentos(opciones) de comando, pero tambi\xe9n se puede especificar la estrategia predeterminada a trav\xe9s de git config.")))),(0,i.kt)("h4",{id:"pull-con-rebase"},"Pull con rebase"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://lh4.googleusercontent.com/cW2ZEYgjG55kqwF80i4xZEgjekAvMGX1P7d7sUkJK3-3DOlIZKTN-bI6K28PAf-LsDqjGWtMQRLyhpx-dBeWoT4RybCLI6mInM14mblZq8E_eY96Jm43MGvQxTD81LMl7d_vQjH-ib3bKXVSftz6HlMcQkDQ4t35",alt:"Pull Con rebase"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El pull con rebase es el m\xe9todo que, en cierto sentido, respeta el contenido del repositorio remoto como "oficial" y considera los commits en el repositorio local como commits a aplicar sobre el historial actualizado del repositorio.'),(0,i.kt)("li",{parentName:"ul"},"Ejecutando ",(0,i.kt)("strong",{parentName:"li"},"git pull --rebase")," sucede lo siguiente:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Se reservan(quitan) los commit locales (C-D-E) a\xf1adidos  desde el punto de partida c\xf3mun(el ultimo commit que tienen en comun las dos ramas)."),(0,i.kt)("li",{parentName:"ul"},"Se ejecuta el fetch que recupera los nuevos commit desde el branch main del repositorio remoto origin."),(0,i.kt)("li",{parentName:"ul"},"Los nuevos commit remotos  se aplican a la \u201ccopia\u201d local de origin/main y se actualiza el branch(rama) local main y  el \xe1rbol de trabajo."),(0,i.kt)("li",{parentName:"ul"},"Los commit locales C-D-E se \u201creaplican\u201d, creando entonces nuevos commit C\u2019-D\u2019-E\u2019."))),(0,i.kt)("li",{parentName:"ul"},"Cuando se utiliza ",(0,i.kt)("strong",{parentName:"li"},"git pull --rebase"),', en lugar de fusionar los cambios remotos con la rama actual, Git reorganiza o reaplica los cambios locales encima de los cambios remotos. Esto significa que los commits locales se "rebasan" sobre los commits remotos.'),(0,i.kt)("li",{parentName:"ul"},"Esto reorganiza tu historial de commits local para que parezca que tus cambios locales se hicieron despu\xe9s de los cambios remotos, aunque en realidad, se est\xe1n aplicando de nuevo.")),(0,i.kt)("h4",{id:"pull-con-merge"},"Pull con merge"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://lh6.googleusercontent.com/ovZFopxpMhPDZdYeHmIgeLTff7SQ4t3weJLX20h895us7z58Nc3pbro_4no0KoM66VA5ZDsCcSFax6ZUaXd_74fqYoOAvja1rnPmMPyPlvcauw-zVqRtxcszg1GnvSgM8gKXt4rOtWJpSywGOTSpkuam0ulqQCns",alt:"Pull Con merge"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El otro m\xe9todo es el de pull with merge que, en la situaci\xf3n descrita, da "precedencia" al repositorio local sobre el remoto, o al menos en la situaci\xf3n descrita podr\xeda crear una historia aparentemente inconsistente.'),(0,i.kt)("li",{parentName:"ul"},"Al ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git pull --no-rebase")," de hecho, ocurre lo siguiente:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Se ejecuta el fetch que recupera los nuevos commit del branch main del  repositorio remoto origin."),(0,i.kt)("li",{parentName:"ul"},"Se  consiguen los commit F-G-H recuperados del  repositorio remoto y se crea un commit especial de \u201cmerge\u201d  que fusiona los dos cambios en el branch local."),(0,i.kt)("li",{parentName:"ul"},"Se pide al usuario guardar tal commit."))),(0,i.kt)("li",{parentName:"ul"},'Al final del pull con merge, aunque estamos en una situaci\xf3n que desde el punto de vista de Git ya no es "divergente",  la historia del proyecto es menos comprensible y lineal.'),(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--no-rebase")," se utiliza para indicarle a Git que no realice autom\xe1ticamente un rebase despu\xe9s de realizar el fetch. En lugar de eso, se realizar\xe1 un merge para combinar los cambios locales y remotos."),(0,i.kt)("li",{parentName:"ul"},"En resumen, ",(0,i.kt)("strong",{parentName:"li"},"git pull --no-rebase")," realiza un fetch desde el repositorio remoto y luego fusiona los cambios locales con los cambios remotos mediante un merge, evitando el rebase autom\xe1tico.")),(0,i.kt)("h2",{id:"git-checkout"},"Git checkout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Sabemos que Git almacena una serie de snapshot de un proyecto llamados commit, cada commit tiene su propio identificador y apunta al commit anterior, para poder reconstruir todo el historial. Tambi\xe9n sabemos que Git te permite tener una o m\xe1s "l\xedneas de tiempo", llamadas branch(ramas), que eventualmente se ramifican a partir de una commit com\xfan.'),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git checkout"),' en Git permite decidir qu\xe9 extraer en el \xe1rbol de trabajo local, ya sea un branch, una etiqueta u otra referencia v\xe1lida, como un commit, por ejemplo. De esta forma, es posible recuperar un snapshot espec\xedfico del proyecto en el \xe1rbol de trabajo local, "retrocediendo en el tiempo" hasta el momento en que se guard\xf3 esa snapshot.'),(0,i.kt)("li",{parentName:"ul"},"En el momento en el que se efect\xfaa el ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," de un  commit espec\xedfico o tag, Git muestra un aviso que al principio podr\xeda asustar."),(0,i.kt)("li",{parentName:"ul"},"Dado que HEAD apunta directamente a un commit (el que especificamos con el comando checkout), Git advierte que el \xe1rbol de trabajo local est\xe1 en un estado detached. Por lo tanto, cualquier commit posterior no se agregar\xe1 al Branch actual. El mensaje indica c\xf3mo, si es necesario, crear un nuevo branch o volver al branch inicial usando el comando ",(0,i.kt)("strong",{parentName:"li"},"git switch"),"."),(0,i.kt)("li",{parentName:"ul"},"Sin embargo, es posible usar el comando ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," nuevamente para volver al branch inicial:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout nombre-rama\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si hubi\xe9ramos creado commit mientras estamos en el estado detached Git eliminar\xe1  estos commit."),(0,i.kt)("li",{parentName:"ul"},"Resumiendo, podemos decir entonces que ",(0,i.kt)("strong",{parentName:"li"},"git checkout"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sirve principalmente para especificar que queremos \u201ccargar\u201d en nuestro \xe1rbol de trabajo local."),(0,i.kt)("li",{parentName:"ul"},"Normalmente, se usa para indicar el branch que queremos \u201ccargar\u201d en el  \xe1rbol de trabajo local: ",(0,i.kt)("strong",{parentName:"li"},"git checkout ","<","NOMBRE_BRANCH>"),"."),(0,i.kt)("li",{parentName:"ul"},"Se puede utilizar para indicar un  commit espec\xedfico, a trav\xe9s de su id o un tag, para \u201ccargar\u201d en el \xe1rbol de trabajo local: ",(0,i.kt)("strong",{parentName:"li"},"git checkout ","<","COMMIT_O_TAG>"),"."))),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," cambia entre ramas o restaura los archivos del \xe1rbol de trabajo (working tree). Hay varias opciones diferentes para este comando que no se tratar\xe1n aqu\xed, pero puedes echar un vistazo a todas ellas en la documentaci\xf3n de Git.")),(0,i.kt)("h4",{id:"commit-espec\xedfico"},"Commit espec\xedfico"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para realizar un checkout a un commit espec\xedfico, ejecuta el comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout id-del-commit-espec\xedfico\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"podemos obtener el identificador (id) del commit espec\xedfico ejecutando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git log\n")),(0,i.kt)("h4",{id:"rama-existente"},"Rama existente"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para cambiar de rama (esta debe existir), ejecuta el comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout NOMBRE-DE-LA-RAMA\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Por lo general, Git no te dejar\xe1 realizar checkout a otra rama a menos que tu directorio de trabajo est\xe9 limpio, porque perder\xedas cualquier cambio hecho en el  directorio de trabajo al que no le has hecho commit. Tienes tres opciones para manejar tus cambios: 1) tirarlos a la basura, 2) realizarles un commit, 3) realizarles un stash.")))),(0,i.kt)("h4",{id:"rama-nueva"},"Rama nueva"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para crear y cambiar a una rama nueva con un solo comando, puedes usar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -b NOMBRE-DE-LA-RAMA-NUEVA\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Esto te cambiar\xe1 autom\xe1ticamente a la rama nueva.")))),(0,i.kt)("h4",{id:"rama-nueva-o-reiniciar-una-rama-a-un-punto-de-partida"},"Rama nueva o Reiniciar una rama a un punto de partida"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El siguiente comando es similar al de cambiar a una rama nueva, pero utiliza la bandera -B (f\xedjese en la B may\xfascula) y una opcion PUNTO-DE-PARTIDA:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -B NOMBRE-DE-LA-RAMA PUNTO-DE-PARTIDA\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Si la rama NOMBRE-DE-LA-RAMA no existe, Git la crear\xe1 y la iniciar\xe1 en PUNTO-DE-PARTIDA. Si la rama NOMBRE-DE-LA-RAMA ya existe, entonces Git restablece la rama a PUNTO-DE-PARTIDA. Esto equivale a ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git branch con -f"),"."),(0,i.kt)("li",{parentName:"ul"},"PUNTO-DE-PARTIDA : Especifica el punto de partida para la nueva rama. Puede ser un commit, una rama existente o un nombre de etiqueta. La nueva rama se crear\xe1 a partir de este punto.")))),(0,i.kt)("h4",{id:"forzar-un-checkout"},"Forzar un checkout"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puedes pasar la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-f")," o ",(0,i.kt)("strong",{parentName:"li"},"--force")," con el comando ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," para forzar a Git a cambiar de rama, incluso si tienes cambios fuera de la zona de montaje (\xedndice). B\xe1sicamente, se puede usar para tirar los cambios locales."),(0,i.kt)("li",{parentName:"ul"},"Cuando ejecutes el siguiente comando, Git ignorar\xe1 las entradas no fusionadas:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -f NOMBRE-DE-LA-RAMA\n# Alternativa\ngit checkout --force NOMBRE-DE-LA-RAMA\n\n")),(0,i.kt)("h4",{id:"deshacer-los-cambios-en-tu-directorio-de-trabajo"},"Deshacer los cambios en tu Directorio de trabajo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puedes usar el comando ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," para deshacer los cambios que has hecho en un archivo de tu directorio y trabajo. Esto revertir\xe1 el archivo a la versi\xf3n en HEAD (al ultimo commit):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -- NOMBRE-DEL-ARCHIVO\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Entonces, en resumen, revierte los cambios locales no confirmados en el archivo especificado, deshaciendo las modificaciones y volviendo al estado del \xfaltimo commit. Ten en cuenta que este comando descartar\xe1 los cambios sin posibilidad de recuperaci\xf3n, as\xed que \xfasalo con precauci\xf3n. Si has realizado cambios que ya est\xe1n confirmados, deber\xedas considerar hacer un nuevo commit para revertirlos en lugar de usar este comando.")))),(0,i.kt)("h4",{id:"documentaci\xf3n"},(0,i.kt)("a",{parentName:"h4",href:"https://git-scm.com/docs/git-checkout"},"Documentaci\xf3n.")),(0,i.kt)("h2",{id:"git-rebase-y-merge"},"Git rebase y merge"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los dos se utilizan para lo mismo, para integrar cambios de otra rama a la principal.")),(0,i.kt)("h4",{id:"ejemplo"},"Ejemplo"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creamos una carpeta y la iniciamos con ",(0,i.kt)("strong",{parentName:"li"},"git init"),"."),(0,i.kt)("li",{parentName:"ol"},"Creamos un archivo de texto llamado file.txt y hacemos una confirmaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add .\ngit commit -m \u201cfirst commit\u201d\ngit log\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Vamos a crear una nueva rama llamada linea1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout -b linea1\n")),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Editamos el archivo de texto:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"Linea de texo numero 1...\n")),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"Hacemos un commit en la rama nueva:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git commit -a -m \u201ca\xf1adida la l\xednea 1 del archivo\u201d\ngit log -p\n\n")),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"Volvemos a la rama master y creamos otra rama llamada linea2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b linea2\n\n")),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},"Editamos el archivo de texto:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"[Espacio en blanco]\nLinea numero 2....\n")),(0,i.kt)("ol",{start:8},(0,i.kt)("li",{parentName:"ol"},"Hacemos un commit en la rama nueva:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git commit -a -m \u201ca\xf1adida la l\xednea 2 del archivo\u201d\ngit log -p\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Como vemos, con el siguiente comando tenemos tres ramas, la master con un archivo de texto vac\xedo y en las otras dos se desarrollaron diferentes \u201ctareas\u201d:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git branch\n")),(0,i.kt)("ol",{start:9},(0,i.kt)("li",{parentName:"ol"},"Nos volvemos a la rama master y creamos la rama master2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b  master2\n\n")),(0,i.kt)("ol",{start:10},(0,i.kt)("li",{parentName:"ol"},"En esta nueva rama insertaremos los cambios con un merge , entonces ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git merge linea1\ngit merge linea2\n")),(0,i.kt)("ol",{start:11},(0,i.kt)("li",{parentName:"ol"},"Hay un conflicto al ejecutar el segundo comando, as\xed que ejecutamos ",(0,i.kt)("strong",{parentName:"li"},"git status"),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Se nos informa que las dos ramas (linea1 y linea2) modificaron el mismo archivo.")),(0,i.kt)("ol",{start:12},(0,i.kt)("li",{parentName:"ol"},"Solucionamos el conflicto mediante un IDE o borrando las l\xedneas de formato especiales que se generaron para que queden los dos cambios, quedando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"Linea de texo numero 1...\n[Espacio en blanco]\nLinea numero 2....\n")),(0,i.kt)("ol",{start:13},(0,i.kt)("li",{parentName:"ol"},"Hacemos un commit:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit status (nos indica que podemos usar el comando git commit)\ngit commit \ngit log -p\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El orden de los commits es:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"first commit -- a\xf1adida la l\xednea 1 del archivo -- a\xf1adida la l\xednea 2 del archivo ---  Merge branch 'linea2' into master2."))),(0,i.kt)("li",{parentName:"ul"},"A lo ultimo entonces, se crea un commit que tiene la mezcla de los dos.")),(0,i.kt)("ol",{start:14},(0,i.kt)("li",{parentName:"ol"},"Volvemos a la rama master y creamos la rama master3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout master\ngit checkout -b master3\n\n")),(0,i.kt)("ol",{start:15},(0,i.kt)("li",{parentName:"ol"},"En esta nueva rama insertaremos los cambios con un rebase, entonces ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rebase linea1\ngit rebase linea2\n\n")),(0,i.kt)("ol",{start:16},(0,i.kt)("li",{parentName:"ol"},"Hay un conflicto al ejecutar el segundo comando, as\xed que ejecutamos ",(0,i.kt)("strong",{parentName:"li"},"git status"),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Se nos informa que las dos ramas (linea1 y linea2) modificaron el mismo archivo.")),(0,i.kt)("ol",{start:17},(0,i.kt)("li",{parentName:"ol"},"Solucionamos el conflicto mediante un IDE o borrando las l\xedneas de formato especiales que se generaron para que queden los dos cambios, quedando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"[Espacio en blanco]\nLinea numero 2....\nLinea de texo numero 1...\n\n")),(0,i.kt)("ol",{start:18},(0,i.kt)("li",{parentName:"ol"},"Hacemos un commit:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit status (nos indica que  podemos usar el comando git rebase --continue)\ngit rebase --continue\ngit log -p\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El orden de los commits es:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"first commit -- a\xf1adida la l\xednea 2 del archivo --  a\xf1adida la l\xednea 1 del archivo."))),(0,i.kt)("li",{parentName:"ul"},"No hay un commit de Merge.")),(0,i.kt)("h4",{id:"diferencia-de-los-commits"},"Diferencia de los commits:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ambos comienzan por first commit."),(0,i.kt)("li",{parentName:"ul"},"El segundo y tercer commit cambian:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"En el merge , se van a\xf1adiendo seg\xfan cada comando ",(0,i.kt)("strong",{parentName:"li"},"git merge"),"."),(0,i.kt)("li",{parentName:"ul"},"En rebase, el segundo commit es \u201ca\xf1adida la l\xednea 2 del archivo\u201d y el tercero es \u201ca\xf1adida la l\xednea 1 del archivo\u201d, \xf3sea tiene un orden invertido."))),(0,i.kt)("li",{parentName:"ul"},"El cuarto commit solo lo tiene merge.")),(0,i.kt)("h4",{id:"resumen"},"Resumen"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con Merge no podemos sabemos que cambios se hicieron en el commit Merge , por lo tanto no deja un historial claro de los cambios."),(0,i.kt)("li",{parentName:"ul"},"Con Rebase no tenemos un commit Merge pero se cambia el orden del historial , esto nos permite dejar un historial claro de los cambios.")),(0,i.kt)("h4",{id:"para-seguir-explicando-rebase"},"Para seguir explicando rebase"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ubicado en la rama que se uso el rebase, hacemos un reset:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset \u2013-hard HEAD~2\ngit log -p\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Estamos en el commit \u201cfirst commit\u201d.")))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Ejecutamos lo siguiente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rebase linea2\ngit rebase linea1\n\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Solucionamos los conflictos de la misma manera. Dejamos los dos cambios."),(0,i.kt)("li",{parentName:"ol"},"Ejecutamos lo siguiente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add file.txt\ngit rebase --continue\ngit log -p\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Entonces para ejemplificar:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Rama"),(0,i.kt)("th",{parentName:"tr",align:null},"Commit"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Master"),(0,i.kt)("td",{parentName:"tr",align:null},"1\u20132-3")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Dev1"),(0,i.kt)("td",{parentName:"tr",align:null},"1-2-3-4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Dev2"),(0,i.kt)("td",{parentName:"tr",align:null},"1-2-3-5")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Los tres, tienen los primeros tres commits."),(0,i.kt)("li",{parentName:"ul"},"Dev1 tiene el 4 commit y el Dev2 el 5 commit.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Funcionamiento:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Si hacemos un rebase desde master con dev2 (rebase dev2):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Como no hay ning\xfan conflicto, el commit 5 lo va a poner al final quedando: 1-2-3-5"))),(0,i.kt)("li",{parentName:"ul"},"Si hacemos un rebase desde master con dev1 (rebase dev1) luego del rebase anterior:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Como hay conflicto, el ultimo commit (5) lo va a poner en el final y el commit 4 lo va a insertar despu\xe9s del tres, quedando: 1-2-3-4-5"))),(0,i.kt)("li",{parentName:"ul"},"Por esto se hace primero los rebase de lo mas nuevo y luego lo m\xe1s viejo.")))),(0,i.kt)("h4",{id:"rebase"},"Rebase"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cuando tu commit , lo tienes que mezclar con otro commit , se crea un nuevo commit temporal (que luego se elimina)."),(0,i.kt)("li",{parentName:"ul"},"Rebase es una de las dos utilidades de Git dise\xf1adas para integrar cambios de una rama a otra. Rebasar es el proceso de combinar o mover una secuencia de confirmaciones sobre una nueva confirmaci\xf3n base. ",(0,i.kt)("strong",{parentName:"li"},"Git rebase")," es el proceso lineal de fusi\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Una rebase de Git cambia la base de la rama de una confirmaci\xf3n a otra, por lo que parece que han creado su rama a partir de una confirmaci\xf3n diferente. Internamente, Git crea una nueva confirmaci\xf3n y la aplica a la base especificada."),(0,i.kt)("li",{parentName:"ul"},"Aunque la rama parece la misma, est\xe1 compuesta de confirmaciones completamente nuevas. Cuando realizas una rebase de Git, est\xe1s, de hecho, reescribiendo el historial."),(0,i.kt)("li",{parentName:"ul"},"Supongamos que es un desarrollador que est\xe1 trabajando en una nueva funci\xf3n en una rama dedicada. Luego, otro miembro del equipo de desarrollo actualiza la rama principal con algunas confirmaciones nuevas. La situaci\xf3n se ve as\xed:\n",(0,i.kt)("img",{parentName:"li",src:"https://www.simplilearn.com/ice9/free_resources_article_thumb/Git_Rebase_1.PNG",alt:"Explicaci\xf3n rebase"})),(0,i.kt)("li",{parentName:"ul"},"Sin embargo, finalmente el equipo concluye que las nuevas confirmaciones del archivo principal son relevantes para la funci\xf3n en la que est\xe1 trabajando. Entonces, si desea incorporar las nuevas confirmaciones en su rama, puede realizar una fusi\xf3n o una rebase. "),(0,i.kt)("li",{parentName:"ul"},"Si realizamos un rebase, movemos toda la rama de funciones(feature), comenzando en la punta de la rama principal para que todas las nuevas confirmaciones sean ahora parte del todo."),(0,i.kt)("li",{parentName:"ul"},"Esta acci\xf3n reescribe el historial del proyecto realizando nuevas confirmaciones para cada una de las confirmaciones de la rama original. As\xed es como se ve la nueva sucursal(rama):\n",(0,i.kt)("img",{parentName:"li",src:"https://www.simplilearn.com/ice9/free_resources_article_thumb/Git_Rebase_3.PNG",alt:"Nueva rama despues del rebase "}))),(0,i.kt)("h4",{id:"no-rebases-la-historia-p\xfablica"},"No rebases la historia p\xfablica"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Nunca debes cambiar la base de las confirmaciones una vez que hayan sido enviadas a un repositorio p\xfablico. La rebase reemplazar\xeda las confirmaciones antiguas por otras nuevas y parecer\xeda que esa parte del historial de su proyecto desapareci\xf3 abruptamente.")),(0,i.kt)("h4",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Cuando realizas un rebase, Git toma una serie de confirmaciones, las "desenrolla" temporalmente, aplica las confirmaciones de otra rama sobre ellas y luego vuelve a aplicar las confirmaciones desenrolladas. Este proceso puede ayudar a mantener un historial de confirmaciones m\xe1s lineal y f\xe1cil de entender en comparaci\xf3n con las fusiones, que pueden generar una estructura de historial m\xe1s ramificada.'),(0,i.kt)("li",{parentName:"ul"},"Desglosemos esa explicaci\xf3n en pasos m\xe1s detallados:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Seleccionar el punto de partida com\xfan:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Imagina que tienes dos ramas en tu proyecto, por ejemplo, mi_rama y rama_objetivo. Antes de realizar un rebase, necesitas identificar el punto en el que ambas ramas divergieron. Este punto es com\xfanmente el \xfaltimo commit  que ambas ramas comparten . El "punto de partida com\xfan" se refiere al \xfaltimo commit compartido entre las dos ramas que est\xe1s intentando rebasar \xf3sea es el ultimo commit que tienen en com\xfan las dos ramas , a partir de ese commit, ambas ramas han evolucionado de manera independiente.'))),(0,i.kt)("li",{parentName:"ol"},'"Desenrollar" temporalmente las confirmaciones:',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'A partir de ese punto com\xfan, Git toma todas las confirmaciones que se hicieron en tu rama (mi_rama) desde el punto com\xfan hasta la punta de la rama. Estas confirmaciones se "desenrollan" temporalmente, es decir, se quitan de su ubicaci\xf3n actual en la rama.'))),(0,i.kt)("li",{parentName:"ol"},"Aplicar las confirmaciones de otra rama:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Luego, Git aplica las confirmaciones de la otra rama (rama_objetivo) sobre la rama actual. Esto significa que las confirmaciones de mi_rama se est\xe1n aplicando encima de las confirmaciones de rama_objetivo."))),(0,i.kt)("li",{parentName:"ol"},"Resolver conflictos (si es necesario):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Durante este proceso, si hay cambios conflictivos entre las confirmaciones de ambas ramas, Git detendr\xe1 el rebase y te pedir\xe1 que resuelvas esos conflictos. Esto podr\xeda implicar fusionar cambios manuales o elegir qu\xe9 versi\xf3n de un cambio conflicto conservar."))),(0,i.kt)("li",{parentName:"ol"},"Volver a aplicar las confirmaciones desenrolladas:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Despu\xe9s de resolver cualquier conflicto, Git toma las confirmaciones que se desenrollaron en el paso 2 y las vuelve a aplicar encima de las confirmaciones de la otra rama. Esto crea una nueva serie de confirmaciones que incluye los cambios de ambas ramas, pero de una manera m\xe1s lineal."))),(0,i.kt)("li",{parentName:"ol"},"Historial m\xe1s lineal:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El resultado final es un historial de confirmaciones m\xe1s lineal en comparaci\xf3n con una fusi\xf3n. Las confirmaciones de mi_rama ahora se encuentran despu\xe9s de las confirmaciones de rama_objetivo en lugar de tener una bifurcaci\xf3n adicional. Esto puede hacer que el historial sea m\xe1s f\xe1cil de entender, especialmente en proyectos con m\xfaltiples colaboradores."))))),(0,i.kt)("li",{parentName:"ul"},"Entonces siguiendo el ejemplo de la explicaci\xf3n podemos hacer el siguiente grafico que representan el historial de confirmaciones en dos ramas:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Nombre Rama"),(0,i.kt)("th",{parentName:"tr",align:null},"Historial de Commit"),(0,i.kt)("th",{parentName:"tr",align:null},"Observaci\xf3n"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Mi_Rama"),(0,i.kt)("td",{parentName:"tr",align:null},"A \u2013 B -- C"),(0,i.kt)("td",{parentName:"tr",align:null},"Seria la \u201crama principal\u201d , tiene tres commit.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Rama_Objetivo"),(0,i.kt)("td",{parentName:"tr",align:null},"B \u2013 D -- E"),(0,i.kt)("td",{parentName:"tr",align:null},"La Rama_Objetivo se cre\xf3 en el commit \u201cB\u201d y a partir de ah\xed se empezaron a crear nuevos commits independientes a la rama principal.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este caso, el punto de partida es el commit B ya que, a partir de ah\xed, ambas han evolucionado de manera independiente."),(0,i.kt)("li",{parentName:"ul"},"Si deseas rebasar mi_rama sobre rama_objetivo, Git tomar\xe1 las confirmaciones desde el commit B (no lo incluye) hasta la punta de mi_rama (la confirmaci\xf3n C , la incluye) y las aplicar\xe1 despu\xe9s de todas las confirmaciones de rama_objetivo (las nuevas , \xf3sea no incluye el punto de partida)."),(0,i.kt)("li",{parentName:"ul"},"Para hacerlo ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout mi_rama  (Para confirmar que estamos en la rama correcta)\ngit pull origin mi_rama (Para asegurarse que tu rama est\xe1 actualizada)\ngit log (Para identificar el punto de partida com\xfan (identificador) , en este caso es el commit B)\ngit rebase rama_objetivo (Para iniciar el rebase)\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si hay conflictos, los resolvemos y ejecutamos el siguiente comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rebase --continue\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Una vez que se completa el rebase, puedes actualizar la rama remota con tus cambios. Puedes necesitar forzar la actualizaci\xf3n si ya has compartido la rama:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git push origin mi_rama \u2013-force\n")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Recuerda que la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--force")," se utiliza aqu\xed porque has reescrito la historia de mi_rama y necesitas forzar la actualizaci\xf3n en el repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"Es importante realizar este tipo de operaciones con precauci\xf3n, especialmente en ramas compartidas, ya que reescribir el historial puede causar problemas a otros colaboradores que est\xe9n trabajando en la misma rama.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Despu\xe9s del rebase, el historial de confirmaciones podr\xeda verse asi:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Nombre Rama"),(0,i.kt)("th",{parentName:"tr",align:null},"Historial de Commit"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"mi_rama"),(0,i.kt)("td",{parentName:"tr",align:null},"A-B-D-E-C")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Donde C es una nueva confirmaci\xf3n que incluye los cambios de C, pero ahora aplicados sobre la punta de rama_objetivo. Este proceso crea un historial de confirmaciones m\xe1s lineal, pero recuerda que al hacerlo, est\xe1s cambiando la historia de mi_rama, y si compartes esta rama con otros colaboradores, puede causar conflictos si no se hace correctamente. Por lo tanto, es recomendable usar rebase con precauci\xf3n, especialmente en ramas compartidas."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"},"M\xe1s informaci\xf3n."))),(0,i.kt)("h4",{id:"merge"},"Merge"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cuando tu commit , lo tienes que mezclar con otro commit , se crea un nuevo commit que es la mezcla de los dos."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git merge")," permite tomar las l\xedneas(ramas) independientes de desarrollo creadas por ",(0,i.kt)("strong",{parentName:"li"},"git branch")," e integrarlas en una sola rama."),(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que la rama actual se actualizar\xe1 para reflejar la fusi\xf3n, pero la rama de destino no se ver\xe1 afectada en absoluto. Una vez m\xe1s, esto significa que ",(0,i.kt)("strong",{parentName:"li"},"git merge")," se suele utilizar junto con ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," para seleccionar la rama actual y ",(0,i.kt)("strong",{parentName:"li"},"git branch -d")," para eliminar la rama de destino obsoleta."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git merge")," se utiliza para combinar dos ramas. En estos casos, ",(0,i.kt)("strong",{parentName:"li"},"git merge")," toma dos punteros de confirmaci\xf3n, normalmente los extremos de la rama, y encuentra una confirmaci\xf3n base com\xfan entre ellos. "),(0,i.kt)("li",{parentName:"ul"},'Una vez que Git encuentra una confirmaci\xf3n base en com\xfan, crea una "confirmaci\xf3n de fusi\xf3n" nueva que combina los cambios de ambas ramas.'),(0,i.kt)("li",{parentName:"ul"},"Supongamos que tenemos una rama de funci\xf3n nueva que se basa en la rama main. Ahora, queremos fusionar esa rama de funci\xf3n con la rama main:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:7afd8460-b7bf-4c42-b997-4f5cf24f21e8/01%20Branch-2%20kopiera.png?cdnVersion=1316",alt:"RamaMerge"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al invocar este comando, la rama de funci\xf3n especificada se fusionar\xe1 con la rama actual, la cual asumiremos que es la main. Git determinar\xe1 el algoritmo de fusi\xf3n autom\xe1ticamente:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:c6db91c1-1343-4d45-8c93-bdba910b9506/02%20Branch-1%20kopiera.png?cdnVersion=1316",alt:"RamaMerge2"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al crear una confirmaci\xf3n de fusi\xf3n, Git tratar\xe1 de fusionar autom\xe1ticamente los historiales independientes. Sin embargo, si encuentra datos que se han cambiado en ambos historiales, no podr\xe1 combinarlos de ese modo. En ese caso, se crea un conflicto de control de versiones y Git solicitar\xe1 la intervenci\xf3n del usuario para poder continuar.")),(0,i.kt)("h4",{id:"fusi\xf3n-de-avance-r\xe1pido"},"Fusi\xf3n de avance r\xe1pido"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puede que se produzca una fusi\xf3n con avance r\xe1pido cuando hay un proceso lineal desde el extremo de la rama actual hasta la rama de destino. En lugar de fusionar \u201crealmente\u201d las ramas, lo \xfanico que tiene que hacer Git para integrar los historiales es mover el extremo de la rama actual al extremo de la rama de destino (es decir, realizar un \u201cavance r\xe1pido\u201d). De este modo, combina de manera eficaz los historiales, ya que todas las confirmaciones alcanzables desde la rama de destino est\xe1n ahora disponibles a trav\xe9s de la rama actual."),(0,i.kt)("li",{parentName:"ul"},"Por ejemplo, una fusi\xf3n con avance r\xe1pido de una rama de funci\xf3n en una main se ver\xeda de la siguiente manera:\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:d90f2536-7951-4e5e-ab79-f45a502fb4c8/03-04%20Fast%20forward%20merge.svg?cdnVersion=1316",alt:"Fusi\xf3n Rapida merge"}))),(0,i.kt)("h4",{id:"fusi\xf3n-de-3-v\xedas"},"Fusi\xf3n de 3 v\xedas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sin embargo, no es posible una fusi\xf3n con avance r\xe1pido si las ramas han divergido. Cuando no hay un proceso lineal hacia la rama de destino, Git no tiene m\xe1s opci\xf3n que combinarlas mediante una fusi\xf3n de 3 v\xedas. "),(0,i.kt)("li",{parentName:"ul"},"Las fusiones de 3 v\xedas utilizan una confirmaci\xf3n espec\xedfica para unir dos historiales. Esta fusi\xf3n recibe su nombre del hecho de que Git utiliza tres confirmaciones para generar la confirmaci\xf3n de fusi\xf3n: los dos extremos de la rama y su predecesor com\xfan:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:91aece4a-8fa0-4fc3-bae9-69d51932f104/05-06%20Fast%20forward%20merge.svg?cdnVersion=1316",alt:"Fusi\xf3n de 3 v\xedas merge"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A muchos desarrolladores les gusta utilizar las fusiones con avance r\xe1pido (facilitadas a trav\xe9s del comando rebase) para funciones peque\xf1as o correcciones de errores, mientras que se reservan las fusiones de tres v\xedas para la integraci\xf3n de funciones con una ejecuci\xf3n de mayor duraci\xf3n. En este \xfaltimo caso, la confirmaci\xf3n de fusi\xf3n resultante sirve como una uni\xf3n simb\xf3lica de las dos ramas."),(0,i.kt)("li",{parentName:"ul"},"La opcion ",(0,i.kt)("strong",{parentName:"li"},"\u2013no-ff")," siempre genera una confirmaci\xf3n de fusi\xf3n , incluso si se trata de una fusi\xf3n de avance r\xe1pido."),(0,i.kt)("li",{parentName:"ul"},'Si ocurre alg\xfan conflicto , el comando git status muestra qu\xe9 archivos se deben resolver. Los conflictos se marcan con los caracteres: "<<<<<<<, =======, y >>>> >>>".'),(0,i.kt)("li",{parentName:"ul"},"Una vez identificadas las secciones conflictivas, puedes entrar y arreglar la fusi\xf3n a tu gusto. Cuando est\xe9s listo para terminar la fusi\xf3n, lo \xfanico que tienes que hacer es ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git add")," en los archivos conflictivos para indicar a Git que se han resuelto. Seguidamente, ejecutas un ",(0,i.kt)("strong",{parentName:"li"},"git commit")," normal para generar la confirmaci\xf3n de fusi\xf3n. El proceso es exactamente el mismo que el de la confirmaci\xf3n de una instant\xe1nea normal, lo que significa que es f\xe1cil para los desarrolladores habituales gestionar sus propias fusiones."),(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que los conflictos de fusi\xf3n solo se producir\xe1n en el caso de una fusi\xf3n de 3 v\xedas. Los cambios conflictivos en una fusi\xf3n de avance r\xe1pido no son posibles.")),(0,i.kt)("h2",{id:"git-switch-y-restore"},"Git switch y restore"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"Git checkout"))," es uno de esos comandos de git que dependiendo del contexto en el que se utilice realiza una u otra cosa. Un todo terreno, que en muchos casos quiz\xe1s pueda confundir a usuarios con pocos conocimientos sobre git."),(0,i.kt)("li",{parentName:"ul"},"Estos dos comandos realizan funciones de ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," pero, el nombre de este comando quiz\xe1s lo hace un poco m\xe1s intuitivo.")),(0,i.kt)("h4",{id:"git-restore"},"Git restore"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El ",(0,i.kt)("strong",{parentName:"li"},"git restore")," es una nueva opci\xf3n cuando estamos trabajando y necesitamos restaurar alg\xfan archivo o el proyecto por completo."),(0,i.kt)("li",{parentName:"ul"},"Con ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," podemos hacer lo mismo, pero ",(0,i.kt)("strong",{parentName:"li"},"git restore")," es especificamente para trabajar con esta parte de restauraci\xf3n de archivos o proyectos."),(0,i.kt)("li",{parentName:"ul"},"Este comando restaura (como induce a pensar el nombre del comando) el estado de un archivo a una revisi\xf3n espec\xedfica de git. De manera predeterminada lo hace al estado de la rama actual."),(0,i.kt)("li",{parentName:"ul"},"Tambi\xe9n se pueden restaurar a un commit diferente pas\xe1ndole el commit con la opci\xf3n \u2013source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git restore archivo1.txt --source f544960\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Con esto al archivo1.txt lo restauraremos al el estado que ten\xeda en el commit f544960")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-restore"},"M\xe1s informaci\xf3n"))),(0,i.kt)("h4",{id:"git-switch"},"Git switch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El ",(0,i.kt)("strong",{parentName:"li"},"git switch")," viene como una alternativa cuando estamos trabajando con ramas. Con ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," podemos crear nuevas  ramas y tambi\xe9n alternar entre ellas, y con git switch podemos hacer lo mismo."),(0,i.kt)("li",{parentName:"ul"},"Sirve para cambiar entre ramas y poder crearlas si no existen."),(0,i.kt)("li",{parentName:"ul"},"En nuestro proyecto necesitamos crear una nueva rama con el nombre nueva-branch en nuestro proyecto, podr\xedamos usar el siguiente comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git switch -c nueva-branch\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Con la opcion ",(0,i.kt)("strong",{parentName:"li"},"-c")," (crear) git crear\xe1 la nueva rama y cambiar\xe1 a ella. ")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para cambiar a la nueva rama:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git switch nuevo-branch\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El switch tambi\xe9n nos proporciona un atajo muy interesante cuando necesitamos seleccionar la rama master, simplemente podemos usar un signo menos (-) en lugar del nombre de la rama:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git switch -\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este comando cambia a la rama anterior seleccionada, si solo hemos seleccionado dos, podremos cambiar de una a otra con este comando, sin necesidad de escribir el nombre.")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Si no le pasamos la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-c")," switch cambiar\xe1 a la rama especificada si est\xe1 creada. ")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://git-scm.com/docs/git-switch"},"M\xe1s informaci\xf3n."))),(0,i.kt)("h2",{id:"git-reflog"},"git reflog"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Realiza un seguimiento de todo lo que has hecho localmente:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Realiza un seguimiento del historial de confirmaciones."),(0,i.kt)("li",{parentName:"ul"},"Si has hecho un  hard reset."),(0,i.kt)("li",{parentName:"ul"},"Realiza un seguimiento de ",(0,i.kt)("strong",{parentName:"li"},"git commit --amend")," tambi\xe9n."),(0,i.kt)("li",{parentName:"ul"},"etc."))),(0,i.kt)("li",{parentName:"ul"},"El reflog es estrictamente local y no forma parte del repositorio."),(0,i.kt)("li",{parentName:"ul"},"Git utiliza la herramienta ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," para realizar un seguimiento detallado de los cambios realizados en las referencias de ramas, incluyendo cambios en el puntero HEAD, que indica la posici\xf3n actual en el historial de confirmaciones. Le permite volver a cualquier confirmaci\xf3n, incluso si ninguna rama o etiqueta hace referencia a ella. Tras la reescritura de la historia, el reflog contiene informaci\xf3n sobre el estado anterior de las ramas y permite volver a ese estado si es necesario. "),(0,i.kt)("li",{parentName:"ul"},"Desglosemos la afirmaci\xf3n:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Seguimiento de cambios en referencias de ramas: Cuando realizas operaciones como confirmaciones, fusiones, cambios de rama, entre otras, Git actualiza sus referencias internas para reflejar estos cambios. ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," proporciona un historial detallado de estos cambios en las referencias del repositorio, mostrando informaci\xf3n como las marcas de tiempo y descripciones breves de cada cambio."),(0,i.kt)("li",{parentName:"ul"},"Volver a cualquier confirmaci\xf3n: El reflog almacena informaci\xf3n sobre cada cambio realizado en el repositorio, incluso si ninguna rama o etiqueta hace referencia directa a esa confirmaci\xf3n. Esto significa que puedes usar ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," para encontrar el hash de confirmaci\xf3n espec\xedfico al que deseas volver y restaurar tu repositorio a ese estado anterior."),(0,i.kt)("li",{parentName:"ul"},"Reescritura de la historia: Algunas operaciones en Git, como rebase o reset, pueden reescribir la historia del repositorio al cambiar las confirmaciones existentes. Despu\xe9s de realizar estas operaciones, la informaci\xf3n original a\xfan est\xe1 disponible en el reflog. Esto es \xfatil en situaciones donde necesitas recuperar informaci\xf3n que fue reescrita."),(0,i.kt)("li",{parentName:"ul"},"Reflog despu\xe9s de reescritura de la historia: Despu\xe9s de la reescritura de la historia, el reflog se convierte en una herramienta valiosa. Contiene informaci\xf3n sobre el estado anterior de las ramas y otras referencias, lo que te permite volver a ese estado si es necesario."),(0,i.kt)("li",{parentName:"ul"},"En resumen, ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," es una herramienta poderosa para rastrear cambios, especialmente despu\xe9s de operaciones que puedan reescribir la historia. Esto proporciona una capa adicional de seguridad al permitirte recuperar estados anteriores del repositorio, incluso cuando las referencias normales ya no apuntan a esos estados.")))),(0,i.kt)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este comando  te mostrar\xe1 una lista de los cambios en las referencias locales y te permitir\xe1 identificar puntos de control antiguos a los que podr\xedas querer volver:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reflog\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," tiene varias utilidades importantes en el contexto de Git. Aqu\xed hay algunas de las principales:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Recuperaci\xf3n de estados anteriores:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Permite volver a cualquier estado anterior del repositorio, incluso despu\xe9s de operaciones que reescriben la historia como rebase, reset, o amend."),(0,i.kt)("li",{parentName:"ul"},"Puedes usar ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," para encontrar el hash de confirmaci\xf3n al que deseas volver y luego crear una nueva rama o hacer un checkout directo a ese estado."))),(0,i.kt)("li",{parentName:"ol"},"Identificaci\xf3n de cambios recientes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Proporciona una lista detallada de los cambios recientes en las referencias del repositorio, incluyendo movimientos de ramas, cambios en HEAD y otras operaciones importantes."),(0,i.kt)("li",{parentName:"ul"},"Facilita la identificaci\xf3n de cu\xe1ndo y c\xf3mo se realizaron ciertos cambios en el repositorio."))),(0,i.kt)("li",{parentName:"ol"},"Recuperaci\xf3n despu\xe9s de accidentes:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"En caso de accidentes o errores, ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," puede ser \xfatil para identificar y recuperar estados anteriores sin depender completamente de las ramas o etiquetas."))),(0,i.kt)("li",{parentName:"ol"},"Seguimiento de operaciones complejas:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ayuda a realizar un seguimiento de operaciones m\xe1s complejas y menos comunes que reescriben la historia del repositorio. Esto incluye acciones como cambios forzados, rebase interactivo, y otras operaciones que pueden alterar la historia de forma significativa."))),(0,i.kt)("li",{parentName:"ol"},"Depuraci\xf3n y diagn\xf3stico:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Puede ser utilizado como una herramienta de diagn\xf3stico para entender mejor c\xf3mo ha evolucionado la historia del proyecto."),(0,i.kt)("li",{parentName:"ul"},"Facilita la identificaci\xf3n de problemas y la depuraci\xf3n al proporcionar un registro detallado de las operaciones realizadas."))),(0,i.kt)("li",{parentName:"ol"},"Exploraci\xf3n del historial:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Brinda una visi\xf3n m\xe1s detallada y granular del historial del repositorio en comparaci\xf3n con otros comandos de visualizaci\xf3n de historial como ",(0,i.kt)("strong",{parentName:"li"},"git log"),".")))))),(0,i.kt)("h4",{id:"git-reflog-vs-git-log"},"Git reflog vs git log"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reflog")," y ",(0,i.kt)("strong",{parentName:"li"},"git log")," son comandos de Git que ofrecen informaci\xf3n sobre el historial del repositorio, pero tienen prop\xf3sitos y resultados diferentes. Aqu\xed est\xe1n las principales diferencias entre ellos:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Enfoque en Historia Local vs. Historia Remota:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git log")," se utiliza para ver el historial de confirmaciones del repositorio. Proporciona una vista m\xe1s completa de la historia, mostrando todas las confirmaciones en todas las ramas."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reflog")," se centra en el historial local de las referencias, incluyendo movimientos de ramas, cambios en HEAD y otras operaciones. Est\xe1 m\xe1s orientado a cambios locales y acciones espec\xedficas en lugar de proporcionar una vista global de la historia del repositorio."))),(0,i.kt)("li",{parentName:"ol"},"Visi\xf3n de la Historia Completa vs. Detalles Locales:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git log")," muestra una vista completa y detallada del historial de confirmaciones con informaci\xf3n como los autores, fechas y mensajes de confirmaci\xf3n. Es \xfatil para comprender la evoluci\xf3n general del proyecto."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reflog")," muestra detalles espec\xedficos sobre los cambios en las referencias locales, como las transiciones de ramas y cambios en HEAD. Es m\xe1s \xfatil para entender cambios locales recientes y para la recuperaci\xf3n despu\xe9s de operaciones que reescriben la historia."))),(0,i.kt)("li",{parentName:"ol"},"Reversi\xf3n y Recuperaci\xf3n:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git log")," es principalmente una herramienta de visualizaci\xf3n y no proporciona una forma directa de revertir o recuperar cambios."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reflog")," es m\xe1s \xfatil para revertir o recuperar estados anteriores del repositorio, especialmente despu\xe9s de operaciones que reescriben la historia, ya que almacena informaci\xf3n detallada sobre los cambios en las referencias locales."))),(0,i.kt)("li",{parentName:"ol"},"Acceso a Confirmaciones Eliminadas:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git log")," muestra solo las confirmaciones a las que apuntan las ramas y etiquetas actuales, y puede omitir confirmaciones eliminadas o no referenciadas directamente."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reflog")," conserva informaci\xf3n sobre todas las confirmaciones, incluso aquellas que no est\xe1n referenciadas por ninguna rama o etiqueta, lo que permite acceder a estados anteriores incluso despu\xe9s de cambios significativos."))))),(0,i.kt)("li",{parentName:"ul"},"En resumen, mientras que ",(0,i.kt)("strong",{parentName:"li"},"git log")," es una herramienta de visualizaci\xf3n integral para explorar la historia completa del repositorio, ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," se centra en los cambios locales en las referencias y proporciona una forma de revertir o recuperar estados espec\xedficos, especialmente despu\xe9s de operaciones que reescriben la historia. Ambos son \xfatiles en diferentes contextos y para diferentes prop\xf3sitos.")),(0,i.kt)("h2",{id:"git-reset"},"Git reset"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es el comando para viajar en el tiempo (commits)."),(0,i.kt)("li",{parentName:"ul"},"Pod\xe9s perder los commits seg\xfan al tiempo al que vayas."),(0,i.kt)("li",{parentName:"ul"},"Este comando sirve cuando no has subido tu commit a Github o a otro repositorio remoto.")),(0,i.kt)("h4",{id:"estado-de-un-proyecto"},"Estado de un proyecto"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Un proyecto Git tiene las siguientes tres secciones principales:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Directorio Git"),(0,i.kt)("li",{parentName:"ol"},"Directorio de trabajo (o \xe1rbol de trabajo)"),(0,i.kt)("li",{parentName:"ol"},'Zona de "staging"'))),(0,i.kt)("li",{parentName:"ul"},"El directorio Git (ubicado en RUTA-DE-TU-PROYECTO/.git/) es donde Git almacena todo lo que necesita para hacer un seguimiento preciso del proyecto. Esto incluye metadatos y una base de datos de objetos que incluye versiones comprimidas de los archivos del proyecto."),(0,i.kt)("li",{parentName:"ul"},"El directorio de trabajo es donde un usuario realiza cambios locales en un proyecto. El directorio de trabajo descarga los archivos del proyecto de la base de datos de objetos del directorio Git y los coloca en la m\xe1quina local del usuario."),(0,i.kt)("li",{parentName:"ul"},'La zona de "staging" es un archivo (tambi\xe9n llamado "index", "stage" o "cache") que almacena informaci\xf3n sobre lo que ir\xe1 en tu pr\xf3ximo commit. Un commit es cuando le dices a Git que guarde estos cambios staged. Git toma una instant\xe1nea de los archivos tal y como est\xe1n y almacena permanentemente esa instant\xe1nea en el directorio Git.')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'Directorio tambi\xe9n se conoce como repositorio o en forma abreviada repo. El repo en la m\xe1quina local del usuario se llama "Repo local" mientras que el repo en el servidor git se llama "Repo remoto".')))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Con tres secciones, hay tres estados principales, en los que puede estar un archivo en un momento dado: modificado, commited, o staged. T\xfa modificas un archivo cada vez que se hacen cambios en el directorio de trabajo. Luego es staged cuando lo mueves al zona de "staging". Finalmente, es committed despu\xe9s de un commit.'),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git reset")," te permite RESTABLECER tu estado actual a un estado espec\xedfico. Puedes restablecer el estado de archivos espec\xedficos, as\xed como el de toda una rama. Esto es \xfatil si a\xfan no has subido tu commit a GitHub o a otro repositorio remoto."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git reset")," es una herramienta compleja y vers\xe1til para deshacer cambios. Se invoca principalmente de tres formas distintas, que se corresponden con los argumentos de l\xedneas de comandos --soft, --mixed y --hard. Cada uno de los tres argumentos se corresponde con los tres mecanismos de gesti\xf3n de estados internos de Git: el \xe1rbol de confirmaciones (HEAD), el \xedndice y el directorio de trabajo.")),(0,i.kt)("h4",{id:"git-reset-y-los-tres-\xe1rboles-de-git"},"Git reset y los tres \xe1rboles de git"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para entender correctamente c\xf3mo utilizar ",(0,i.kt)("strong",{parentName:"li"},"git reset"),', primero tenemos que entender los sistemas de gesti\xf3n de estados internos de Git. A veces, a estos mecanismos se les llama los "tres \xe1rboles" de Git.'),(0,i.kt)("li",{parentName:"ul"},"No son estrictamente estructuras de datos tradicionales en forma de \xe1rbol. Sin embargo, son estructuras de datos de nodos y basadas en punteros que Git utiliza para monitorizar un cronograma de ediciones."),(0,i.kt)("li",{parentName:"ul"},"Para empezar, crearemos un nuevo repositorio con los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'mkdir git-reset\ncd git-reset\ngit init\ntouch reset_lifecycle_file\ngit add reset_lifecycle_file\ngit commit -m "initial commit"\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El c\xf3digo de ejemplo anterior crea un nuevo repositorio de Git con un \xfanico archivo vac\xedo: reset_lifecycle_file. En este punto, el repositorio de ejemplo tiene una \xfanica confirmaci\xf3n.")))),(0,i.kt)("h4",{id:"directorio-de-trabajo"},"Directorio de trabajo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El primer \xe1rbol que examinaremos es "el directorio de trabajo". Este \xe1rbol est\xe1 sincronizado con el sistema de archivos local y representa los cambios inmediatos que se realizan en el contenido de los archivos y los directorios.'),(0,i.kt)("li",{parentName:"ul"},"Ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"echo 'hello git reset' > reset_lifecycle_file\n git status \n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'En nuestro repositorio de ejemplo, modificamos y a\xf1adimos contenido a reset_lifecycle_file. Al invocar git status, se muestra que Git est\xe1 al corriente de los cambios en el archivo. En ese momento estos cambios forman parte del primer \xe1rbol: "el directorio de trabajo". ',(0,i.kt)("strong",{parentName:"li"},"git status"),' puede utilizarse para mostrar los cambios en el directorio de trabajo. Se mostrar\xe1n en rojo con el prefijo "modified".')))),(0,i.kt)("h4",{id:"indice-del-entorno-de-ensayo"},"Indice del entorno de ensayo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El siguiente es el \xe1rbol del "\xedndice del entorno de ensayo". Este \xe1rbol monitoriza los cambios en el directorio de trabajo, de los archivos que se han agregado con ',(0,i.kt)("strong",{parentName:"li"},"git add"),", para que se almacenen en la siguiente confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Este \xe1rbol es un complejo mecanismo de almacenamiento en cach\xe9 interno. Por lo general, Git intenta ocultar al usuario los pormenores de la implementaci\xf3n del \xedndice del entorno de ensayo."),(0,i.kt)("li",{parentName:"ul"},"Para ver con exactitud el estado del \xedndice del entorno de ensayo, debemos utilizar un comando de Git menos conocido: ",(0,i.kt)("strong",{parentName:"li"},"git ls-files"),". El comando ",(0,i.kt)("strong",{parentName:"li"},"git ls-files")," es, b\xe1sicamente, una utilidad de depuraci\xf3n que sirve para inspeccionar el estado del \xe1rbol del \xedndice del entorno de ensayo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git ls-files -s\n# Nos aparece algo asi:\n100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0       reset_lifecycle_file\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Aqu\xed hemos ejecutado ",(0,i.kt)("strong",{parentName:"li"},"git ls-files")," con la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-s")," o ",(0,i.kt)("strong",{parentName:"li"},"--stage"),". Sin la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-s"),", el resultado de ",(0,i.kt)("strong",{parentName:"li"},"git ls-files")," es simplemente una lista de nombres de archivos y rutas que forman parte del \xedndice en ese momento. "),(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-s")," muestra metadatos adicionales de los archivos del \xedndice del entorno de ensayo. Estos metadatos son los bits de modo, el nombre de objeto y el n\xfamero de entorno del contenido preparado. A nosotros nos interesa el nombre de objeto, el segundo valor (e69de29bb2d1d6434b8b29ae775ad8c2e48c5391). Se trata de un hash SHA-1 de objeto de Git est\xe1ndar. Es un hash del contenido de los archivos. El historial de confirmaciones almacena sus propios SHA de objeto para identificar los punteros de confirmaciones y de referencias, y el \xedndice del entorno de ensayo tiene sus propios SHA de objeto para monitorizar versiones de archivos en el \xedndice.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A continuaci\xf3n, pasaremos el archivo reset_lifecycle_file modificado al \xedndice del entorno de ensayo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add reset_lifecycle_file \ngit status \n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Aqu\xed hemos invocado ",(0,i.kt)("strong",{parentName:"li"},"git add reset_lifecycle_file")," que a\xf1ade el archivo al \xedndice del entorno de ensayo. Al invocar ",(0,i.kt)("strong",{parentName:"li"},"git status"),', ahora aparece reset_lifecycle_file en verde debajo de "Changes to be committed". Conviene resaltar que ',(0,i.kt)("strong",{parentName:"li"},"git status")," no es una representaci\xf3n verdadera del \xedndice del entorno de ensayo. El resultado del comando ",(0,i.kt)("strong",{parentName:"li"},"git status")," muestra los cambios entre el historial de confirmaciones y el \xedndice del entorno de ensayo.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Llegados a este punto, vamos a examinar el contenido del \xedndice del entorno de ensayo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git ls-files -s\n# Nos mostraria algo asi:\n100644 5b59584dd332ace68d63fd49c9bc59371ff9a86a 0       reset_lifecycle_file\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Podemos ver que el SHA de objeto de reset_lifecycle_file se ha actualizado.")))),(0,i.kt)("h4",{id:"historial-de-confirmaciones"},"Historial de confirmaciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El \xfaltimo \xe1rbol es el historial de confirmaciones. El comando ",(0,i.kt)("strong",{parentName:"li"},"git commit")," a\xf1ade cambios a una instant\xe1nea permanente que reside en el historial de confirmaciones. Esta instant\xe1nea tambi\xe9n incluye el estado que ten\xeda el \xedndice del entorno de ensayo en el momento de efectuar la confirmaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"Git commit -m \u201cupdate content of reset_lifecycle_file\u201d\nGit status\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'Aqu\xed hemos creado una nueva confirmaci\xf3n con el mensaje "update content of resetlifecyclefile". El conjunto de cambios se ha a\xf1adido al historial de confirmaciones. Al invocar ',(0,i.kt)("strong",{parentName:"li"},"git status")," en este momento, se muestra que no hay cambios pendientes en ninguno de los \xe1rboles. Al ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git log")," se mostrar\xe1 el historial de confirmaciones. ")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora que hemos seguido la trayectoria de este conjunto de cambios por los tres \xe1rboles, podemos empezar a utilizar ",(0,i.kt)("strong",{parentName:"li"},"git reset"),".")),(0,i.kt)("h4",{id:"funcionamiento"},"Funcionamiento"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A nivel superficial, ",(0,i.kt)("strong",{parentName:"li"},"git reset")," tiene un comportamiento parecido a git checkout. Mientras que ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," solo opera en el puntero de referencia HEAD, ",(0,i.kt)("strong",{parentName:"li"},"git reset")," mover\xe1 el puntero de referencia HEAD y el puntero de referencia de la rama actual. Para demostrar mejor este comportamiento, vamos a analizar el siguiente ejemplo:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:8d616ece-8cee-4fde-bdee-4b280a0a8334/01%20git-sequence-transparent%20kopiera.png?cdnVersion=1328",alt:"Funcionamiento git reset"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Este ejemplo demuestra una secuencia de confirmaciones en la rama main. La referencia HEAD y la referencia de la rama main en estos momentos apuntan a la confirmaci\xf3n d. Ahora vamos a ejecutar y a comparar tanto ",(0,i.kt)("strong",{parentName:"li"},"git checkout b")," como ",(0,i.kt)("strong",{parentName:"li"},"git reset b"),".")),(0,i.kt)("h4",{id:"git-checkout-b"},"Git checkout b"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:f45c4a34-8968-4c81-83cf-d55ebf01a447/02%20git-checkout-transparent%20kopiera.png?cdnVersion=1328",alt:"Funcionamiento git reset con checkout"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con ",(0,i.kt)("strong",{parentName:"li"},"git checkout"),', la referencia main sigue apuntando a d. La referencia HEAD se ha movido y ahora apunta a la confirmaci\xf3n b. Ahora el repositorio se encuentra en un estado de "HEAD desasociado".')),(0,i.kt)("h4",{id:"git-reset-b"},"Git reset b"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:bdf5fda3-4aac-4170-ba35-58f7a66ea3c4/03%20git-reset-transparent%20kopiera.png?cdnVersion=1328",alt:"Funcionamiento git reset con reset"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En comparaci\xf3n, ",(0,i.kt)("strong",{parentName:"li"},"git reset")," mueve tanto las referencias de HEAD como la de la rama a la confirmaci\xf3n especificada."),(0,i.kt)("li",{parentName:"ul"},"Adem\xe1s de actualizar los punteros de referencia de las confirmaciones, ",(0,i.kt)("strong",{parentName:"li"},"git reset")," modificar\xe1 el estado de los tres \xe1rboles. La modificaci\xf3n del puntero de referencia sucede siempre y es una actualizaci\xf3n del tercer \xe1rbol, el \xe1rbol de confirmaciones. Los argumentos de las l\xedneas de comandos ",(0,i.kt)("strong",{parentName:"li"},"--soft"),", ",(0,i.kt)("strong",{parentName:"li"},"--mixed")," y ",(0,i.kt)("strong",{parentName:"li"},"--hard")," indican c\xf3mo modificar los \xe1rboles del \xedndice del entorno de ensayo y del directorio de trabajo.")),(0,i.kt)("h4",{id:"opciones-principales"},"Opciones principales"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La invocaci\xf3n predeterminada de ",(0,i.kt)("strong",{parentName:"li"},"git reset")," tiene argumentos impl\xedcitos de ",(0,i.kt)("strong",{parentName:"li"},"--mixed")," y HEAD. Esto significa que ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git reset")," equivale a ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git reset --mixed HEAD"),". De esta forma, HEAD es la confirmaci\xf3n especificada. En vez de HEAD, se puede usar cualquier hash de confirmaci\xf3n SHA-1 de Git.\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:7fb4b5f7-a2cd-4cb7-9a32-456202499922/03%20(8).svg?cdnVersion=1328",alt:"Git reset opciones principales"}))),(0,i.kt)("h4",{id:"--hard"},"--hard"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Esta es la opci\xf3n m\xe1s directa, PELIGROSA y habitual. Cuando se pasa ",(0,i.kt)("strong",{parentName:"li"},"--hard"),", los punteros de referencia del historial de confirmaciones se actualizan para corresponder a la confirmaci\xf3n especificada."),(0,i.kt)("li",{parentName:"ul"},"A continuaci\xf3n, el \xedndice del entorno de ensayo y el directorio de trabajo se restablecen para reflejar la confirmaci\xf3n especificada. "),(0,i.kt)("li",{parentName:"ul"},"Todos los cambios del \xedndice del entorno de ensayo y del directorio de trabajo se restablecen para reflejar el estado del \xe1rbol de confirmaciones. Esto significa que se perder\xe1 cualquier trabajo pendiente que haya quedado en el \xedndice del entorno de ensayo y en el directorio de trabajo."),(0,i.kt)("li",{parentName:"ul"},"Para demostrarlo, continuemos con el repositorio de ejemplo de los tres \xe1rboles que hemos visto antes. En primer lugar, hagamos unas cuantas modificaciones en el repositorio. Ejecuta los siguientes comandos en el repositorio de ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"echo 'new file content' > new_file\ngit add new_file\necho 'changed content' >> reset_lifecycle_file\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Estos comandos han creado un nuevo archivo llamado new_file y luego lo agrega al repositorio. Adem\xe1s, se modificar\xe1 el contenido de reset_lifecycle_file. Ahora que se han aplicado estos cambios, examinemos el estado del repositorio usando ",(0,i.kt)("strong",{parentName:"li"},"git status"),".")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora ejecutamos ",(0,i.kt)("strong",{parentName:"li"},"git add reset_lifecycle_fil"),"e y luego ",(0,i.kt)("strong",{parentName:"li"},"git status"),"."),(0,i.kt)("li",{parentName:"ul"},'Ahora aparece reset_lifecycle_file en verde debajo de "Changes to be committed".'),(0,i.kt)("li",{parentName:"ul"},"Conviene resaltar que ",(0,i.kt)("strong",{parentName:"li"},"git status")," no es una representaci\xf3n verdadera del \xedndice del entorno de ensayo. El resultado del comando ",(0,i.kt)("strong",{parentName:"li"},"git status")," muestra los cambios entre el historial de confirmaciones y el \xedndice del entorno de ensayo."),(0,i.kt)("li",{parentName:"ul"},"Llegados a este punto, vamos a examinar el contenido del \xedndice del entorno de ensayo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git ls-files -s\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Podemos ver que new_file se ha a\xf1adido al \xedndice. Hemos efectuado modificaciones en reset_lifecycle_file, pero el SHA del \xedndice del entorno de ensayo (5b59584dd332ace68d63fd49c9bc59371ff9a86a) sigue siendo el mismo. Este es un comportamiento previsto, ya que no se ha usado ",(0,i.kt)("strong",{parentName:"li"},"git add")," para aplicar estos cambios en el \xedndice del entorno de ensayo. Estos cambios existen en el directorio de trabajo.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora vamos a ejecutar un comando ",(0,i.kt)("strong",{parentName:"li"},"git reset --hard")," y a examinar el nuevo estado del repositorio:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset --hard\ngit status\ngit ls-files -s\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Git muestra el resultado indicando que HEAD apunta a la \xfaltima confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"A continuaci\xf3n, comprobamos el estado del repositorio con ",(0,i.kt)("strong",{parentName:"li"},"git status"),". Git indica que no hay cambios pendientes."),(0,i.kt)("li",{parentName:"ul"},"Examinamos tambi\xe9n el estado del \xedndice del entorno de ensayo y vemos que se ha restablecido a un punto anterior a que se a\xf1adiera new_file."),(0,i.kt)("li",{parentName:"ul"},"Nuestras modificaciones en reset_lifecycle_file y la adici\xf3n de new_file se han destruido. Esta p\xe9rdida de datos no se puede deshacer. Es esencial que tomemos buena nota de ello.")))),(0,i.kt)("h4",{id:"--mixed"},"--mixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Esta es la opci\xf3n predeterminada."),(0,i.kt)("li",{parentName:"ul"},"Se actualizan los punteros de referencia. "),(0,i.kt)("li",{parentName:"ul"},"El \xedndice del entorno de ensayo se restablece al estado de la confirmaci\xf3n especificada."),(0,i.kt)("li",{parentName:"ul"},"Todos los cambios que se hayan deshecho en el \xedndice del entorno de ensayo se mueven al directorio de trabajo. Vamos a continuar:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"echo 'new file content' > new_file\ngit add new_file\necho 'append content' >> reset_lifecycle_file\ngit add reset_lifecycle_file\ngit status\ngit ls-files -s\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En el ejemplo anterior, hemos hecho unas cuantas modificaciones en el repositorio. De nuevo, hemos a\xf1adido un new_file y modificado el contenido de reset_lifecycle_file. A continuaci\xf3n, estos cambios se aplican al \xedndice del entorno de ensayo con ",(0,i.kt)("strong",{parentName:"li"},"git add"),". ")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con el repositorio en este estado, ejecutaremos ahora el restablecimiento:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset --mixed\ngit status\ngit ls-files -s\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'Aqu\xed hemos ejecutado un "mixed reset". Para que quede claro, ',(0,i.kt)("strong",{parentName:"li"},"--mixed")," es el modo predeterminado y surte el mismo efecto que ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git reset"),". Al examinar el resultado de ",(0,i.kt)("strong",{parentName:"li"},"git status")," y ",(0,i.kt)("strong",{parentName:"li"},"git ls-files"),", se ve que el \xedndice del entorno de ensayo se ha restablecido a un estado en el que reset_lifecycle_file es el \xfanico archivo del \xedndice. El SHA de objeto de reset_lifecycle_file se ha restablecido a la versi\xf3n anterior."),(0,i.kt)("li",{parentName:"ul"},"Lo importante que debemos destacar aqu\xed es que ",(0,i.kt)("strong",{parentName:"li"},"git status")," nos muestra que hay modificaciones en reset_lifecycle_file y que hay un archivo sin seguimiento: new_file."),(0,i.kt)("li",{parentName:"ul"},"Se ha restablecido el \xedndice del entorno de ensayo y se han movido los cambios pendientes al directorio de trabajo. Solo tienes que compararlo con el caso del ",(0,i.kt)("strong",{parentName:"li"},"--hard reset"),", en el que se restablecieron tanto el \xedndice del entorno de ensayo como el directorio de trabajo, lo que hizo que se perdieran estas actualizaciones.")))),(0,i.kt)("h4",{id:"--soft"},"--soft"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cuando se pasa el argumento ",(0,i.kt)("strong",{parentName:"li"},"--soft"),", se actualizan los punteros de referencia y el restablecimiento se detiene ah\xed."),(0,i.kt)("li",{parentName:"ul"},"El \xedndice del entorno de ensayo y el directorio de trabajo permanecen intactos. Puede ser dif\xedcil demostrar claramente este comportamiento. Vamos a continuar con nuestro repositorio demo y a prepararlo para un soft reset:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git add reset_lifecycle_file \ngit ls-files -s \ngit status \n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Aqu\xed hemos utilizado otra vez ",(0,i.kt)("strong",{parentName:"li"},"git add")," para pasar el reset_lifecycle_file modificado al \xedndice del entorno de ensayo. Confirmamos que el \xedndice se ha actualizado con el resultado de ",(0,i.kt)("strong",{parentName:"li"},"git ls-files"),". El resultado de ",(0,i.kt)("strong",{parentName:"li"},"git status"),' ahora muestra "Changes to be committed" en verde. El new_file de nuestros ejemplos anteriores est\xe1 flotando por el directorio de trabajo como un archivo sin seguimiento. Vamos a ejecutar r\xe1pidamente ',(0,i.kt)("strong",{parentName:"li"},"rm new_file")," para eliminar el archivo, puesto que no lo necesitaremos para los siguientes ejemplos.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con el repositorio en este estado, ejecutaremos ahora un restablecimiento parcial (soft reset):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset --soft\ngit status\ngit ls-files -s\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'Hemos ejecutado un "soft reset". Al examinar el estado del repositorio con ',(0,i.kt)("strong",{parentName:"li"},"git status")," y ",(0,i.kt)("strong",{parentName:"li"},"git ls-files"),", se muestra que no ha cambiado nada."),(0,i.kt)("li",{parentName:"ul"},"Un soft reset solo restablecer\xe1 el historial de confirmaciones. De manera predeterminada, git reset se invoca con HEAD como la confirmaci\xf3n objetivo. Como nuestro historial de confirmaciones ya se encontraba en HEAD y restablecemos impl\xedcitamente a HEAD, no ha ocurrido nada en realidad.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para entender y utilizar mejor ",(0,i.kt)("strong",{parentName:"li"},"--soft"),", necesitamos una confirmaci\xf3n objetivo que no sea HEAD. Tenemos a reset_lifecycle_file en espera en el \xedndice del entorno de ensayo. Vamos a crear una nueva confirmaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'git commit -m "prepend content to reset_lifecycle_file"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este punto, nuestro repositorio deber\xeda tener tres confirmaciones. Retrocederemos en el tiempo hasta la primera de ellas. Para ello, necesitaremos el ID de la primera confirmaci\xf3n. Se puede saber viendo el resultado de ",(0,i.kt)("strong",{parentName:"li"},"git log"),"."),(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que los ID del historial de confirmaciones ser\xe1n \xfanicos en cada sistema. Un ID de confirmaci\xf3n se ve algo como 780411da3b47117270c0e3a8d5dcfd11d28d04a4. Buscamos el ID que corresponda a la confirmaci\xf3n inicial y la utilizaremos como objetivo de nuestro soft reset."),(0,i.kt)("li",{parentName:"ul"},"Antes de retroceder en el tiempo, vamos a comprobar primero el estado actual del repositorio:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"}," git status && git ls-files -s\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Teniendo esto en cuenta la informaci\xf3n que nos brinda, vamos a ejecutar un soft reset a nuestra primera confirmaci\xf3n.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset --soft id\ngit status && git ls-files -s\n\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'El c\xf3digo anterior ejecuta un "soft reset" y tambi\xe9n invoca el comando combinado ',(0,i.kt)("strong",{parentName:"li"},"git status")," y ",(0,i.kt)("strong",{parentName:"li"},"git ls-files"),", que muestra el resultado del estado del repositorio. "),(0,i.kt)("li",{parentName:"ul"},"Podemos examinar el resultado del estado del repositorio y sacar algunas observaciones interesantes. En primer lugar, ",(0,i.kt)("strong",{parentName:"li"},"git status")," indica que hay modificaciones en reset_lifecycle_file y las resalta para indicar que son cambios preparados para la siguiente confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"En segundo lugar, la informaci\xf3n de ",(0,i.kt)("strong",{parentName:"li"},"git ls-files")," indica que el \xedndice del entorno de ensayo no ha cambiado y conserva el SHA que ten\xedamos antes."),(0,i.kt)("li",{parentName:"ul"},"Para explicar mejor lo que ha ocurrido en este restablecimiento, vamos a examinar el ",(0,i.kt)("strong",{parentName:"li"},"git log"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"El resultado del registro ahora muestra que hay una \xfanica confirmaci\xf3n en el historial de confirmaciones. Esto ayuda a ilustrar claramente qu\xe9 ha hecho ",(0,i.kt)("strong",{parentName:"li"},"--soft"),"."),(0,i.kt)("li",{parentName:"ul"},"Como sucede en todas las invocaciones de ",(0,i.kt)("strong",{parentName:"li"},"git reset"),", lo primero que hace el restablecimiento es restablecer el \xe1rbol de confirmaciones. Los dos ejemplos anteriores con ",(0,i.kt)("strong",{parentName:"li"},"--hard")," y ",(0,i.kt)("strong",{parentName:"li"},"--mixed")," han apuntado a HEAD y no han hecho que el \xe1rbol de confirmaciones retroceda en el tiempo. Durante un soft reset, esto es lo \xfanico que sucede.")))))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Entonces, podr\xedamos preguntarnos por qu\xe9 ",(0,i.kt)("strong",{parentName:"li"},"git status")," indica que hay archivos modificados. ",(0,i.kt)("strong",{parentName:"li"},"--soft")," no toca el \xedndice del entorno de ensayo, por lo que las actualizaciones de este nos han acompa\xf1ado en el tiempo a lo largo del historial de confirmaciones. Podemos confirmarlo con el resultado de ",(0,i.kt)("strong",{parentName:"li"},"git ls-files -s"),", que muestra que no ha cambiado el SHA de reset_lifecycle_file. Como recordatorio, ",(0,i.kt)("strong",{parentName:"li"},"git status"),' no muestra el estado de "los tres \xe1rboles", sino que, en esencia, muestra una comparaci\xf3n entre ellos. En este caso, muestra que el \xedndice del entorno de ensayo va por delante de los cambios del historial de confirmaciones como si ya los hubi\xe9ramos preparado.')),(0,i.kt)("h4",{id:"unstage-un-archivo"},"Unstage un archivo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Si has movido un archivo la zona de "staging" con ',(0,i.kt)("strong",{parentName:"li"},"git add"),", pero ya no quieres que forme parte del commit, puedes usar ",(0,i.kt)("strong",{parentName:"li"},"git reset")," para unstage ese archivo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset HEAD ARCHIVO-A-UNSTAGE\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'Los cambios que has hecho seguir\xe1n estando en el archivo, este comando solo remueve el archivo de tu zona de "staging".')))),(0,i.kt)("h4",{id:"eliminaci\xf3n-de-las-confirmaciones-locales"},"Eliminaci\xf3n de las confirmaciones locales"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El siguiente ejemplo muestra un caso pr\xe1ctico m\xe1s avanzado. Demuestra qu\xe9 sucede cuando has estado trabajando en un nuevo experimento durante un tiempo, pero decides descartarlo por completo tras confirmar unas cuantas instant\xe1neas.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Creamos un archivo llamado app.js y le a\xf1adimos algo de c\xf3digo (a tu imaginaci\xf3n)."),(0,i.kt)("li",{parentName:"ol"},"Ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'git add app.js\ngit commit -m "Start developing a crazy feature"\n\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Editamos el archivo app.js (a tu imaginaci\xf3n)."),(0,i.kt)("li",{parentName:"ol"},"Ejecutamos los siguientes comandos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'git commit -a -m "Continue my crazy feature"\ngit log \ngit reset --hard HEAD~2\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git reset HEAD~2")," retrocede la rama actual dos confirmaciones, con lo que se elimina de forma eficaz las dos instant\xe1neas que acabamos de crear a partir del historial del proyecto. Recuerda que este tipo de restablecimiento solo debe utilizarse en las confirmaciones no publicadas. No hagas nunca la operaci\xf3n anterior si ya has enviado tus confirmaciones a un repositorio compartido.")))),(0,i.kt)("h4",{id:"restablecer-una-rama-a-un-commit-anterior"},"Restablecer una rama a un commit anterior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El siguiente comando restablece el HEAD de tu rama actual al COMMIT dado. B\xe1sicamente rebobina el estado de su rama:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset MODO COMMIT\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si omites el MODE, el valor predeterminado es ",(0,i.kt)("strong",{parentName:"li"},"--mixed"),"."),(0,i.kt)("li",{parentName:"ul"},"Las opciones para MODE son:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"--soft"),': no restablece el \xedndice o el \xe1rbol de trabajo. Cambia todos los archivos a "Cambios a ser commited".  '),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"--mixed"),": restablece el \xedndice, pero no el \xe1rbol de trabajo e informa de lo que no se ha actualizado."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"--hard"),": restablece el \xedndice y el \xe1rbol de trabajo. Cualquier cambio en los archivos rastreados en el \xe1rbol de trabajo desde el commit son descartados.")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Opcion --keep y --merge")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n -",(0,i.kt)("strong",{parentName:"li"},"-keep")," en git reset mantiene los cambios en el directorio de trabajo y en el \xe1rea de preparaci\xf3n, lo que permite que el usuario realice m\xe1s cambios antes de volver a agregarlos."),(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--merge")," en git reset se utiliza para mantener los cambios en el directorio de trabajo y en el \xe1rea de preparaci\xf3n, pero tambi\xe9n para fusionar autom\xe1ticamente los cambios del commit especificado en el commit actual. Esto se logra al agregar autom\xe1ticamente los cambios del commit especificado al \xe1rea de preparaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"En el caso de ",(0,i.kt)("strong",{parentName:"li"},"--keep"),", los cambios en el commit no se modifican ni se fusionan con el commit actual."),(0,i.kt)("li",{parentName:"ul"},"Por otro lado, en el caso de ",(0,i.kt)("strong",{parentName:"li"},"--merge"),", los cambios en el commit se fusionan autom\xe1ticamente con el commit actual, lo que puede resultar en conflictos de fusi\xf3n si hay cambios conflictivos entre los dos commits."),(0,i.kt)("li",{parentName:"ul"},"En resumen, si desea mantener los cambios en el commit sin modificarlos ni fusionarlos con el commit actual, utilice ",(0,i.kt)("strong",{parentName:"li"},"--keep"),". Por otro lado, si desea mantener los cambios en el commit y fusionarlos autom\xe1ticamente con el commit actual, utilice ",(0,i.kt)("strong",{parentName:"li"},"--merge"),"."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git reset --merge")," se utiliza espec\xedficamente cuando necesitas deshacer una fusi\xf3n que ha resultado en conflictos. Antes de realizar una fusi\xf3n, Git asegura que el archivo en el \xe1rbol de trabajo relacionado con la fusi\xf3n no tenga cambios locales (esto lo logra verificando que no exista ninguna diferencia entre los archivos en el directorio de trabajo y el \xedndice), y que el resultado de la fusi\xf3n se refleje en el \xe1rbol de trabajo."),(0,i.kt)("li",{parentName:"ul"},"Cuando ejecutas ",(0,i.kt)("strong",{parentName:"li"},"git reset --merge"),', Git revisa si hay diferencias entre el \xedndice y el objetivo de la fusi\xf3n (el "objetivo de la fusi\xf3n" se refiere al commit al cual se est\xe1 intentando fusionar, Por ejemplo, si est\xe1s en la rama main y ejecutas ',(0,i.kt)("strong",{parentName:"li"},"git merge feature"),', el ultimo commit de la rama feature es el "objetivo de la fusi\xf3n"), as\xed como entre el \xedndice y el \xe1rbol de trabajo. Si se encuentran diferencias en ambos casos, significa que no est\xe1s restableciendo desde un estado despu\xe9s de una fusi\xf3n conflictiva. En este escenario, la opci\xf3n ',(0,i.kt)("strong",{parentName:"li"},"--merge")," no est\xe1 permitida, ya que no tiene sentido intentar deshacer una fusi\xf3n conflictiva cuando no est\xe1s en ese estado espec\xedfico de fusi\xf3n."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reset --keep"),' se utiliza para eliminar confirmaciones recientes en la rama actual mientras se conservan los cambios en el \xe1rbol de trabajo. No est\xe1 permitido si hay conflictos entre los cambios en la confirmaci\xf3n que se quiere eliminar y los cambios en el \xe1rbol de trabajo que se desean conservar, si hay diferencias entre el \xe1rbol de trabajo y el commit al cual se quiere regresar, o si hay entradas no fusionadas ("entradas no fusionadas" se refiere a situaciones en las que hay conflictos sin resolver durante una operaci\xf3n de fusi\xf3n, las "entradas no fusionadas" son esencialmente esos conflictos pendientes de resoluci\xf3n).')))),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Ten mucho cuidado usando la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--hard")," con ",(0,i.kt)("strong",{parentName:"li"},"git reset"),', ya que restablece tu commit, zona de "staging" y tu directorio de trabajo. Si esta opci\xf3n no se utiliza correctamente, se puede acabar perdiendo el c\xf3digo escrito.')))),(0,i.kt)("h4",{id:"diferencias-con-git-revert"},"Diferencias con Git revert"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si ",(0,i.kt)("strong",{parentName:"li"},"git rever"),'t es una forma "segura" de deshacer los cambios, podr\xedamos considerar ',(0,i.kt)("strong",{parentName:"li"},"git reset")," como el m\xe9todo peligroso."),(0,i.kt)("li",{parentName:"ul"},"Corremos el riesgo real de perder trabajo con ",(0,i.kt)("strong",{parentName:"li"},"git reset"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git reset"),' nunca eliminar\xe1 una confirmaci\xf3n. Sin embargo, las confirmaciones pueden quedarse "hu\xe9rfanas", es decir, sin una ruta directa desde una referencia(un commit) para acceder a ellas. Normalmente estas confirmaciones hu\xe9rfanas pueden localizarse y restaurarse utilizando ',(0,i.kt)("strong",{parentName:"li"},"git reflog"),". Git eliminar\xe1 para siempre las confirmaciones hu\xe9rfanas tras ejecutar el recolector de basura interno."),(0,i.kt)("li",{parentName:"ul"},"De manera predeterminada, Git est\xe1 configurado para ejecutar el recolector de basura cada 30 d\xedas."),(0,i.kt)("li",{parentName:"ul"},"Los otros dos \xe1rboles, el \xedndice del entorno de ensayo y el directorio de trabajo, no son tan permanentes como las confirmaciones."),(0,i.kt)("li",{parentName:"ul"},"Reset es uno de los \xfanicos comandos de Git que puede hacerte perder el trabajo realizado."),(0,i.kt)("li",{parentName:"ul"},"Mientras que revert se ha dise\xf1ado para deshacer de forma segura una confirmaci\xf3n p\xfablica, ",(0,i.kt)("strong",{parentName:"li"},"git reset")," se ha dise\xf1ado para deshacer los cambios locales en el \xedndice del entorno de ensayo y el directorio de trabajo."),(0,i.kt)("li",{parentName:"ul"},"El restablecimiento elimina por completo un conjunto de cambios, mientras que la reversi\xf3n conserva el conjunto de cambios original y utiliza una nueva confirmaci\xf3n para aplicar la acci\xf3n de deshacer.")),(0,i.kt)("h4",{id:"no-restablezcas-el-historial-p\xfablico"},"No restablezcas el historial p\xfablico"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No deber\xedas utilizar nunca ",(0,i.kt)("strong",{parentName:"li"},"git reset"),"  si cualquier instant\xe1nea posterior a se ha enviado a un repositorio p\xfablico. Despu\xe9s de publicar una confirmaci\xf3n, tienes que dar por sentado que el resto de los desarrolladores dependen de ella."),(0,i.kt)("li",{parentName:"ul"},"Eliminar una confirmaci\xf3n que otros miembros del equipo han seguido desarrollando supone un problema grave para la colaboraci\xf3n. Cuando intenten sincronizarse con tu repositorio, parecer\xe1 que un pedazo del historial del proyecto ha desaparecido repentinamente. "),(0,i.kt)("li",{parentName:"ul"},"Lo importante es que te asegures de que est\xe1s utilizando ",(0,i.kt)("strong",{parentName:"li"},"git reset")," en un experimento local que sali\xf3 mal, no en cambios publicados. Si tienes que arreglar una confirmaci\xf3n p\xfablica, el comando ",(0,i.kt)("strong",{parentName:"li"},"git revert")," se ha dise\xf1ado espec\xedficamente para este fin.")),(0,i.kt)("h4",{id:"error"},"Error"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si haces un git reset y luego intentas hacer un push con lo que hiciste te tira un error (failed to push some refs to)."),(0,i.kt)("li",{parentName:"ul"},"Esto sucede porque en el tiempo que estas (commit) no contiene/no existen los mismos commits que est\xe1n en la nube (github). Para comprobar esto compara los commit de github con los locales (",(0,i.kt)("strong",{parentName:"li"},"git log \u2013-oneline"),")."),(0,i.kt)("li",{parentName:"ul"},"Para solucionar este problema, debemos restaurar a la \xfaltima versi\xf3n remota:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git pull origin nombrerama\n")),(0,i.kt)("h4",{id:"documentaci\xf3n-1"},(0,i.kt)("a",{parentName:"h4",href:"https://git-scm.com/docs/git-reset"},"Documentaci\xf3n")),(0,i.kt)("h2",{id:"git-revert"},"git revert"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deshace los cambios creando un commit completamente nuevo, todo esto sin alterar el historial de commits."),(0,i.kt)("li",{parentName:"ul"},"Elimina un commit y hace otro commit."),(0,i.kt)("li",{parentName:"ul"},"Teniendo en cuentas el ",(0,i.kt)("a",{parentName:"li",href:"#estado-de-un-proyecto"},"estado de un proyecto")," y los ",(0,i.kt)("a",{parentName:"li",href:"#git-reset-y-los-tres-%C3%A1rboles-de-git"},"tres \xe1rboles de git"),", con ",(0,i.kt)("strong",{parentName:"li"},"git revert")," podemos deshacer un commit anterior."),(0,i.kt)("li",{parentName:"ul"},"Si ya has subido tu commit a un repositorio remoto, se recomienda que no uses ",(0,i.kt)("strong",{parentName:"li"},"git reset"),", ya que reescribe el historial de commits. Esto puede hacer que trabajar en un repositorio con otros desarrolladores y mantener un historial consistente de commits sea muy dif\xedcil."),(0,i.kt)("li",{parentName:"ul"},"En su lugar es mejor usar ",(0,i.kt)("strong",{parentName:"li"},"git revert"),", que deshace los cambios realizados por un commit anterior creando un commit completamente nuevo, todo esto sin alterar el historial de commits."),(0,i.kt)("li",{parentName:"ul"},"El comando  ",(0,i.kt)("strong",{parentName:"li"},"git revert"),' puede considerarse un comando de tipo "deshacer", sin embargo, no es una operaci\xf3n de deshacer tradicional. En lugar de eliminar la confirmaci\xf3n del historial del proyecto, descubre c\xf3mo invertir los cambios introducidos por la confirmaci\xf3n y agrega una nueva confirmaci\xf3n con el contenido inverso resultante. Esto evita que Git pierda el historial, lo cual es importante para la integridad de su historial de revisiones y para una colaboraci\xf3n confiable.'),(0,i.kt)("li",{parentName:"ul"},"La reversi\xf3n debe usarse cuando desee aplicar lo inverso de una confirmaci\xf3n del historial de su proyecto. Esto puede ser \xfatil, por ejemplo, si est\xe1 rastreando un error y descubre que fue introducido por una \xfanica confirmaci\xf3n. En lugar de ingresar manualmente, arreglarlo y enviar una nueva instant\xe1nea, puede usar ",(0,i.kt)("strong",{parentName:"li"},"git revert")," para hacer todo esto autom\xe1ticamente.")),(0,i.kt)("h4",{id:"c\xf3mo-funciona"},"C\xf3mo funciona"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git revert")," se utiliza para deshacer cambios en el historial de confirmaciones de un repositorio. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git revert")," no mueve los punteros de referencia HEAD a esta confirmaci\xf3n como lo hace ",(0,i.kt)("strong",{parentName:"li"},"git checkout")," o ",(0,i.kt)("strong",{parentName:"li"},"git reset"),"."),(0,i.kt)("li",{parentName:"ul"},'Una operaci\xf3n de reversi\xf3n tomar\xe1 la confirmaci\xf3n especificada, invertir\xe1 los cambios de esa confirmaci\xf3n y crear\xe1 una nueva "reversi\xf3n de confirmaci\xf3n".'),(0,i.kt)("li",{parentName:"ul"},"Luego, los punteros de referencia se actualizan para apuntar al nuevo compromiso de reversi\xf3n, convirti\xe9ndolo en la punta de la rama."),(0,i.kt)("li",{parentName:"ul"},"Para demostrarlo, creemos un repositorio de ejemplo usando los ejemplos de l\xednea de comando a continuaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'mkdir git_revert\ncd git_revert\ngit init .\ntouch demo_file\ngit add demo_file\ngit commit -m "initial commit"\necho "initial content" >> demo_file\ngit commit -a -m "add new content to demo file"\necho "prepended line content" >> demo_file\ngit commit -a -m "prepend content to demo file"\ngit log \u2013-oneline\n\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Aqu\xed hemos inicializado un repositorio en un directorio reci\xe9n creado llamado git_revert. Hemos realizado 3 confirmaciones en el repositorio en las que agregamos un archivo demo_file y modificamos su contenido dos veces. Al final del procedimiento de configuraci\xf3n del repositorio, invocamos el comando para mostrar el historial de confirmaciones, mostrando un total de 3 confirmaciones.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Con el repositorio en este estado, estamos listos para iniciar un ",(0,i.kt)("strong",{parentName:"li"},"git revert"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git revert HEAD\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Git revert espera que se haya pasado una referencia de confirmaci\xf3n y no se ejecutar\xe1 sin una."),(0,i.kt)("li",{parentName:"ul"},"En este caso pasamos la referencia HEAD , esto revertir\xe1 la ultima confirmaci\xf3n. Acordate que una referencia de confirmaci\xf3n puede ser la ID de un commit.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"De manera similar a una fusi\xf3n, una reversi\xf3n crear\xe1 una nueva confirmaci\xf3n que abrir\xe1 el editor del sistema configurado solicitando un nuevo mensaje de confirmaci\xf3n. Una vez que se haya ingresado y guardado un mensaje de confirmaci\xf3n, Git reanudar\xe1 la operaci\xf3n. Ahora podemos examinar el estado del repositorio con ",(0,i.kt)("strong",{parentName:"li"},"git log --oneline"),"."),(0,i.kt)("li",{parentName:"ul"},"Tenga en cuenta que la tercera confirmaci\xf3n todav\xeda est\xe1 en el historial del proyecto despu\xe9s de la reversi\xf3n. En lugar de eliminarlo, ",(0,i.kt)("strong",{parentName:"li"},"git revert")," agreg\xf3 una nueva confirmaci\xf3n para deshacer sus cambios. Como resultado, las confirmaciones segunda y cuarta representan exactamente la misma base de c\xf3digo y la tercera confirmaci\xf3n todav\xeda est\xe1 en nuestro historial en caso de que queramos volver a ella en el futuro.")),(0,i.kt)("h4",{id:"algunas-opciones"},"Algunas opciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Esta es una opci\xf3n predeterminada y no es necesario especificarla. Esta opci\xf3n abrir\xe1 el editor del sistema configurado y le solicitar\xe1 que edite el mensaje de confirmaci\xf3n antes de confirmar la reversi\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"-e\n--edit\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Esta es la inversa de la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-e"),". La reversi\xf3n no abrir\xe1 el editor:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"-n\n--no-commit\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pasar esta opci\xf3n evitar\xe1 que ",(0,i.kt)("strong",{parentName:"li"},"git revert")," cree una nueva confirmaci\xf3n que invierta la confirmaci\xf3n que especificamos. En lugar de crear la nueva confirmaci\xf3n, esta opci\xf3n agregar\xe1 los cambios inversos al \xedndice de preparaci\xf3n y al directorio de trabajo. Estos son los otros \xe1rboles que utiliza Git para gestionar el estado del repositorio. ")),(0,i.kt)("h4",{id:"reset-vs-revert"},"Reset vs Revert"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Es importante comprender que git revert deshace una \xfanica confirmaci\xf3n; no "revierte" al estado anterior de un proyecto al eliminar todas las confirmaciones posteriores. En Git, esto en realidad se llama reinicio, no reversi\xf3n.'),(0,i.kt)("li",{parentName:"ul"},'Revert tiene dos ventajas importantes sobre reset. Primero, no cambia el historial del proyecto, lo que lo convierte en una operaci\xf3n "segura" para confirmaciones que ya se han publicado en un repositorio compartido. '),(0,i.kt)("li",{parentName:"ul"},"En segundo lugar, ",(0,i.kt)("strong",{parentName:"li"},"git revert")," puede apuntar a una confirmaci\xf3n individual en un punto arbitrario del historial, mientras que ",(0,i.kt)("strong",{parentName:"li"},"git reset")," solo puede trabajar hacia atr\xe1s desde la confirmaci\xf3n actual. Por ejemplo, si quisiera deshacer una confirmaci\xf3n anterior con ",(0,i.kt)("strong",{parentName:"li"},"git reset"),", tendr\xeda que eliminar todas las confirmaciones que ocurrieron despu\xe9s de la confirmaci\xf3n que especificamos y luego volver a confirmar todas las confirmaciones posteriores. No hace falta decir que esta no es una soluci\xf3n elegante para deshacer. ")),(0,i.kt)("h4",{id:"resumen-1"},"Resumen"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git revert")," es una operaci\xf3n de deshacer que avanza hacia adelante y que ofrece un m\xe9todo seguro para deshacer cambios. En lugar de eliminar o dejar hu\xe9rfanas confirmaciones en el historial de confirmaciones, una reversi\xf3n crear\xe1 una nueva confirmaci\xf3n que invierte los cambios especificados. ",(0,i.kt)("strong",{parentName:"li"},"Git revert")," es una alternativa m\xe1s segura que ",(0,i.kt)("strong",{parentName:"li"},"git reset")," en lo que respecta a perder el trabajo. ")),(0,i.kt)("h4",{id:"documentaci\xf3n-2"},(0,i.kt)("a",{parentName:"h4",href:"https://git-scm.com/docs/git-revert"},"Documentaci\xf3n")),(0,i.kt)("h2",{id:"git-stash"},"Git stash"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git stash")," guarda temporalmente los cambios que has realizado en tu copia de trabajo local para que puedas trabajar en otra cosa, y luego regresar y volver a aplicarlos m\xe1s adelante."),(0,i.kt)("li",{parentName:"ul"},"El almacenamiento oculto es \xfatil si necesitas cambiar r\xe1pidamente de contexto y trabajar en otra cosa, pero est\xe1s a mitad de camino de un cambio de c\xf3digo y no est\xe1s listo para comprometerte.")),(0,i.kt)("h4",{id:"esconde-tu-trabajo"},"Esconde tu trabajo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git stash")," toma los cambios no confirmados (tanto preparados como no preparados), los guarda para su uso posterior y luego los revierte(elimina) de su copia de trabajo. "),(0,i.kt)("li",{parentName:"ul"},"Una vez ejecutes el comando, eres libre de realizar cambios, crear nuevas confirmaciones, cambiar de rama y realizar cualquier otra operaci\xf3n de Git; luego puedes regresar y volver a aplicar tu alijo (contiene los cambios que guardamos con el comando stash como un conjunto) cuando est\xe9s listo."),(0,i.kt)("li",{parentName:"ul"},"Tenga en cuenta que el alijo es local en su repositorio de Git; los alijos no se transfieren al servidor.")),(0,i.kt)("h4",{id:"reaplicando-sus-cambios-ocultos"},"Reaplicando sus cambios ocultos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puede volver a aplicar los cambios previamente guardados con el comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash pop\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Al abrir su alijo se eliminan los cambios del mismo y se los vuelve a aplicar a su copia de trabajo.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Alternativamente, puedes volver a aplicar los cambios a tu copia de trabajo y guardarlos en tu alijo con el comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash apply\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Esto es \xfatil si desea aplicar los mismos cambios ocultos a varias ramas.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora que conoce los conceptos b\xe1sicos del almacenamiento oculto, hay una advertencia que ",(0,i.kt)("strong",{parentName:"li"},"git stash")," debe tener en cuenta: de forma predeterminada, Git no almacenar\xe1 los cambios realizados en archivos ignorados o sin seguimiento.")),(0,i.kt)("h4",{id:"ocultar-archivos-ignorados-o-sin-seguimiento"},"Ocultar archivos ignorados o sin seguimiento"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"De forma predeterminada, la ejecuci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"git stash")," guardar\xe1:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cambios que se han agregado a su \xedndice."),(0,i.kt)("li",{parentName:"ul"},"Cambios realizados en archivos  rastreados por Git (cambios no preparados, cambios que se realizaron en archivos que se agregaron con el comando ",(0,i.kt)("strong",{parentName:"li"},"git add")," previamente)."))),(0,i.kt)("li",{parentName:"ul"},"Pero no esconder\xe1:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Archivos nuevos en su copia de trabajo que a\xfan no se han preparado."),(0,i.kt)("li",{parentName:"ul"},"Archivos que han sido ignorados."))),(0,i.kt)("li",{parentName:"ul"},"Entonces para que lo almacene, lo debemos a\xf1adir con ",(0,i.kt)("strong",{parentName:"li"},"git add"),"."),(0,i.kt)("li",{parentName:"ul"},"Agregar la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-u")," (o ",(0,i.kt)("strong",{parentName:"li"},"--include-untracked"),") le indica ",(0,i.kt)("strong",{parentName:"li"},"git stash")," que tambi\xe9n guarde sus archivos sin seguimiento:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash -u\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puede incluir cambios en archivos ignorados tambi\xe9n pasando la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-a")," (o ",(0,i.kt)("strong",{parentName:"li"},"\u2013all git stash"),")")),(0,i.kt)("h4",{id:"administrar-m\xfaltiples-alijos"},"Administrar m\xfaltiples alijos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No est\xe1s limitado a un solo alijo. Puede ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git stash")," varias veces para crear varios alijos y luego usar ",(0,i.kt)("strong",{parentName:"li"},"git stash list")," para verlos. "),(0,i.kt)("li",{parentName:"ul"},'De forma predeterminada, los alijos se identifican simplemente como un "WIP" (trabajo en progreso) en la parte superior de la rama y confirmaci\xf3n desde la que cre\xf3 el alijo. Despu\xe9s de un tiempo, puede resultar dif\xedcil recordar que contiene cada alijo:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"}," git stash list\nstash@{0}: WIP on main: 5002d47 our new homepage\nstash@{1}: WIP on main: 5002d47 our new homepage\nstash@{2}: WIP on main: 5002d47 our new homepage\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para proporcionar un poco m\xe1s de contexto, es una buena pr\xe1ctica anotar tus alijos con una descripci\xf3n, usando: ",(0,i.kt)("strong",{parentName:"li"},'git stash save "message"'),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'git stash save "add style to our site"\ngit stash list\nstash@{0}: On main: add style to our site\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"De forma predeterminada, ",(0,i.kt)("strong",{parentName:"li"},"git stash pop"),"  volver\xe1 a aplicar el alijo creado m\xe1s recientemente: stash@{0}."),(0,i.kt)("li",{parentName:"ul"},"Puedes elegir qu\xe9 alijo volver a aplicar pasando su identificador como \xfaltimo argumento, por ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash pop stash@{2}\n")),(0,i.kt)("h4",{id:"ver-diferencias-de-alijo"},"Ver diferencias de alijo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Puedes ver un resumen de un alijo con ",(0,i.kt)("strong",{parentName:"li"},"git stash show"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"}," git stash show\n index.html | 1 +\n style.css | 3 +++\n 2 files changed, 4 insertions(+)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"O pase la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-p")," o ",(0,i.kt)("strong",{parentName:"li"},"\u2013-patch")," para ver un  resumen completo (usando diff) de un alijo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'$ git stash show -p\ndiff --git a/style.css b/style.css\nnew file mode 100644\nindex 0000000..d92368b\n--- /dev/null\n+++ b/style.css\n@@ -0,0 +1,3 @@\n+* {\n+  text-decoration: blink;\n+}\ndiff --git a/index.html b/index.html\nindex 9daeafb..ebdcbd2 100644\n--- a/index.html\n+++ b/index.html\n@@ -1 +1,2 @@\n+<link rel="stylesheet" href="style.css"/>\n\n')),(0,i.kt)("h4",{id:"alijos-parciales"},"Alijos parciales"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tambi\xe9n puede optar por guardar un solo archivo, una colecci\xf3n de archivos o cambios individuales dentro de los archivos. Si pasa la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-p")," (o ",(0,i.kt)("strong",{parentName:"li"},"\u2013-patch"),") a ",(0,i.kt)("strong",{parentName:"li"},"git stash"),' , recorrer\xe1 cada "fragmento" modificado en su copia de trabajo y le preguntar\xe1 si desea guardarlo:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash -p\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Presionando \u201c?\u201d podemos obtener una lista completa de comandos hunk para ver si guardamos o no algun cambio."),(0,i.kt)("li",{parentName:"ul"},'No existe un comando expl\xedcito de "abortar", pero presionar CTRL-C (SIGINT) cancelar\xe1 el proceso de almacenamiento.')),(0,i.kt)("h4",{id:"creando-una-rama-a-partir-de-tu-alijo"},"Creando una rama a partir de tu alijo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si los cambios en su rama difieren de los cambios en su alijo, puede tener conflictos al abrir o aplicar su alijo. En su lugar, puede utilizar ",(0,i.kt)("strong",{parentName:"li"},"git stash branch")," para crear una nueva rama para aplicar los cambios ocultos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash branch add-stylesheet stash@{1}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este crea una rama llamada add-stylesheet  y le a\xf1ade los cambios del alijo.")))),(0,i.kt)("h4",{id:"limpiando-tu-alijo"},"Limpiando tu alijo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si decides que ya no necesitas un alijo en particular, puedes eliminarlo con ",(0,i.kt)("strong",{parentName:"li"},"git stash drop"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash drop stash@{1}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"O puedes eliminar todos tus alijos con:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git stash clear\n")),(0,i.kt)("h4",{id:"c\xf3mo-funciona-git-stash"},"C\xf3mo funciona git stash"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los alijos en realidad est\xe1n codificados en su repositorio como objetos de confirmaci\xf3n. La referencia especial en .git/refs/stash apunta a su alijo creado m\xe1s recientemente, y el reflog de la referencia hace referencia a los alijos creados anteriormente por stash."),(0,i.kt)("li",{parentName:"ul"},'Es por eso que te refieres a los escondites como stash@{n}: porque  en realidad te refieres a  la entrada n\xfamero "n"  de reflog (representa una lista con todos los alijos creados) de la referencia stash. Dado que un alijo es solo una confirmaci\xf3n, puedes inspeccionarlo con : ',(0,i.kt)("strong",{parentName:"li"},"git log"),"."),(0,i.kt)("li",{parentName:"ul"},"Dependiendo de lo que hayas guardado, una sola operaci\xf3n  git stash crea dos o tres nuevas confirmaciones:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"stash@{0}, una nueva confirmaci\xf3n para almacenar los archivos rastreados que estaban en su copia de trabajo cuando ejecut\xf3 ",(0,i.kt)("strong",{parentName:"li"},"git stash"),"."),(0,i.kt)("li",{parentName:"ul"},"stash@{0} El primer padre, el  commit preexistente que estaba en HEAD cuando ejecutaste ",(0,i.kt)("strong",{parentName:"li"},"git stash"),"."),(0,i.kt)("li",{parentName:"ul"},"stash@{0} El segundo padre, una nueva confirmaci\xf3n que representa el \xedndice cuando ejecut\xf3 ",(0,i.kt)("strong",{parentName:"li"},"git stash"),"."),(0,i.kt)("li",{parentName:"ul"},"stash@{0} El tercer padre, una nueva confirmaci\xf3n que representa archivos sin seguimiento que estaban en su copia de trabajo cuando ejecut\xf3 ",(0,i.kt)("strong",{parentName:"li"},"git stash"),". Este tercer padre solo se crea si:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Su copia de trabajo en realidad conten\xeda archivos sin seguimiento; y\nusted especific\xf3 la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--include-untracked")," o ",(0,i.kt)("strong",{parentName:"li"},"\u2013all")," cuando invoc\xf3 ",(0,i.kt)("strong",{parentName:"li"},"git stash"),"."))))),(0,i.kt)("li",{parentName:"ul"},"C\xf3mo ",(0,i.kt)("strong",{parentName:"li"},"git stash")," codifica su \xe1rbol de trabajo e \xedndice como confirmaciones:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Antes del almacenamiento oculto, su \xe1rbol de trabajo puede contener cambios en archivos rastreados, archivos no rastreados y archivos ignorados. Algunos de estos cambios tambi\xe9n pueden estar guardados en el \xedndice:\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:3a2ede93-1f2d-45ae-9e0b-167cc0362f37/03.svg?cdnVersion=1328",alt:"Diagrama git stash"})))),(0,i.kt)("li",{parentName:"ul"},"La invocaci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"git stash")," codifica cualquier cambio en los archivos rastreados como dos nuevas confirmaciones en su repositorio: una para cambios no preparados y otra para cambios preparados en el \xedndice. La referencia especial refs/stash se actualiza para se\xf1alarlos:\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:35edaf68-e8b1-484e-b5f0-292c532f048a/04.svg?cdnVersion=1328",alt:"Diagrama git stash 2 "})),(0,i.kt)("li",{parentName:"ul"},"El uso de la opci\xf3n  ",(0,i.kt)("strong",{parentName:"li"},"--include-untracked")," tambi\xe9n codifica cualquier cambio en archivos sin seguimiento como una confirmaci\xf3n adicional:\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:f7dd5493-a98d-449e-ae37-146d6270ccf7/05.svg?cdnVersion=1328",alt:"Diagrama git stash 3 "})),(0,i.kt)("li",{parentName:"ul"},"El uso de la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--all")," incluye cambios en los archivos ignorados junto con cambios en los archivos sin seguimiento en la misma confirmaci\xf3n:\n",(0,i.kt)("img",{parentName:"li",src:"https://wac-cdn.atlassian.com/dam/jcr:446fad60-0ff5-4383-8177-a5fc2813364d/06.svg?cdnVersion=1328",alt:"Diagrama git stash 4 "})),(0,i.kt)("li",{parentName:"ul"},"Cuando ejecuta ",(0,i.kt)("strong",{parentName:"li"},"git stash pop"),", los cambios de las confirmaciones anteriores se utilizan para actualizar su copia de trabajo y su \xedndice. Tenga en cuenta que las confirmaciones extra\xeddas no se eliminan inmediatamente, pero se convierten en candidatas para una futura recolecci\xf3n de basura.")),(0,i.kt)("h4",{id:"documentaci\xf3n-3"},(0,i.kt)("a",{parentName:"h4",href:"https://git-scm.com/docs/git-stash"},"Documentaci\xf3n")),(0,i.kt)("h2",{id:"git-diff"},"git diff"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git diff")," es un comando multiusos de Git que, cuando se ejecuta, lleva a cabo una funci\xf3n para establecer las diferencias entre dos or\xedgenes de datos de Git. "),(0,i.kt)("li",{parentName:"ul"},"Dichos or\xedgenes de datos pueden ser confirmaciones, ramas y archivos, entre otras posibilidades. "),(0,i.kt)("li",{parentName:"ul"},"La comparaci\xf3n con diff es una funci\xf3n mediante la cual se toman dos conjuntos de datos de entrada y se muestran los cambios/diferencias entre estos. "),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff")," suele utilizarse junto con ",(0,i.kt)("strong",{parentName:"li"},"git status")," y ",(0,i.kt)("strong",{parentName:"li"},"git log")," para analizar el estado actual de un repositorio de Git.")),(0,i.kt)("h4",{id:"leer-diferencias-resultados"},"Leer diferencias: resultados"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los siguientes ejemplos se ejecutar\xe1n en un solo repositorio, que se crea con los comandos indicados a continuaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'mkdir diff_test_repo\ncd diff_test_repo\ntouch diff_test.txt\necho "this is a git diff test example" > diff_test.txt\ngit init .\ngit add diff_test.txt\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si ejecutamos ",(0,i.kt)("strong",{parentName:"li"},"git diff")," llegado a este punto, no habr\xe1 ning\xfan resultado. Este es el comportamiento previsto, ya que no hay ning\xfan cambio en el repositorio que permita mostrar diferencias. Cuando se haya creado el repositorio y hayamos a\xf1adido el archivo diff_test.txt, podremos cambiar el contenido del archivo para empezar a experimentar con el resultado de la diferencia:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'echo "this is a diff example" > diff_test.txt\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si ejecutas este comando, cambiar\xe1s el contenido del archivo diff_test.txt. Cuando se haya modificado, podremos ver una diferencia y analizar el resultado. Ahora, al ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git diff"),", se producir\xe1 el resultado siguiente:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'diff --git a/diff_test.txt b/diff_test.txt\nindex 409ef4b..91f7b12 100644\n--- a/diff_test.txt\n+++ b/diff_test.txt\n@@ -1 +1 @@\n-"this is a git diff test example"\n+"this is a diff example"\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pasemos ahora a examinar un desglose m\xe1s detallado del resultado de la diferencia.")),(0,i.kt)("h4",{id:"introducci\xf3n-a-la-comparaci\xf3n"},"Introducci\xf3n a la comparaci\xf3n"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"diff --git a/diff_test.txt b/diff_test.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En esta l\xednea se muestran las fuentes de entrada de la comparaci\xf3n. Podemos observar que se ha utilizado a/diff_test.txt y b/diff_test.txt en la comparaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},'Lo primero que vemos es que al fichero viejo le denomina "a" y al fichero nuevo "b".')),(0,i.kt)("h4",{id:"metadatos"},"Metadatos"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"index 409ef4b..91f7b12 100644\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En esta l\xednea se muestran unos cuantos metadatos internos de Git. Lo m\xe1s probable es que no necesites esta informaci\xf3n. Los n\xfameros de este resultado  corresponden con los identificadores hash de la versi\xf3n del objeto de Git.")),(0,i.kt)("h4",{id:"marcadores-de-los-cambios"},"Marcadores de los cambios"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"--- a/diff_test.txt\n+++ b/diff_test.txt\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Lo siguiente que nos dice es que los simbolos de "\u2013" estan ligados al fichero viejo y los simbolos de "+" estan ligados al fichero nuevo.'),(0,i.kt)("li",{parentName:"ul"},'Estas l\xedneas conforman una leyenda que asigna s\xedmbolos a cada origen de entrada de la comparaci\xf3n. En este caso, los cambios de a/diff_test.txt se marcan con un "---" y, los de b/diff_test.txt, con el s\xedmbolo "+++".')),(0,i.kt)("h4",{id:"fragmento-de-la-diferencia"},"Fragmento de la diferencia"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El producto/resultado  de la diferencia es una lista de "fragmentos" de la diferencia. '),(0,i.kt)("li",{parentName:"ul"},"Una diferencia solo muestra las secciones del archivo con cambios. En el ejemplo en cuesti\xf3n, solo hay un fragmento porque estamos trabajando con un caso sencillo. Los fragmentos poseen su propia sem\xe1ntica:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'@@ -1 +1 @@\n-"this is a git diff test example"\n+"this is a diff example"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'La primera l\xednea es el encabezado del fragmento. Cada fragmento comienza con un encabezado delimitado por s\xedmbolos @@. El contenido de dicho encabezado es un resumen de los cambios efectuados en el archivo. En nuestro ejemplo simplificado pone "-1 +1", lo que significa que ha habido cambios en la primera l\xednea. En una diferencia m\xe1s realista, se podr\xeda ver un encabezado como el siguiente:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"@@ -34,6 +34,8 @@\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este ejemplo de encabezado, lo que pone es que se han extra\xeddo 6 l\xedneas a contar desde la l\xednea n\xfamero 34. Adem\xe1s, se han a\xf1adido 8 l\xedneas a partir de la l\xednea n\xfamero 34."),(0,i.kt)("li",{parentName:"ul"},'El resto del contenido del fragmento muestra los cambios recientes. Todas las l\xedneas cambiadas comienzan por un s\xedmbolo + o -, que sirve para indicar de qu\xe9 versi\xf3n de archivo  proceden (se obtienen) los cambios. Como ya hemos comentado antes, - indica cambios en a/diff_test.txt, mientras que "+" indica cambios en b/diff_test.txt.')),(0,i.kt)("h4",{id:"resaltar-cambios"},"Resaltar cambios"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff --color-words\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff")," tambi\xe9n tiene un modo especial para resaltar los cambios con un nivel de detalle muy superior: ",(0,i.kt)("strong",{parentName:"li"},"\u2010\u2010color-words"),". Este modo tokeniza las l\xedneas a\xf1adidas y eliminadas y muestra las comparaciones:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'diff --git a/diff_test.txt b/diff_test.txt\nindex 409ef4b..91f7b12 100644\n--- a/diff_test.txt\n+++ b/diff_test.txt\n@@ -1 +1 @@\n"this is agit difftest example"\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ahora, el resultado muestra solo las palabras  que se han cambiado y eliminado mediante colores.")),(0,i.kt)("h4",{id:"otra-forma"},"Otra forma"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff-highlight\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Si clonas un repositorio, ver\xe1s un subdirectorio llamado "contrib", que contiene una serie de herramientas relacionadas con Git, as\xed como otras interesantes cositas que todav\xeda no se han promovido al n\xfacleo de Git. Una de ellas es un script en Perl llamado "diff-highlight". Diff-highlight empareja l\xedneas coincidentes del resultado de la diferenciaci\xf3n y resalta los cambios:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff | /your/local/path/to/git-core/contrib/diff-highlight/diff-highlight\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El comando est\xe1 utilizando ",(0,i.kt)("strong",{parentName:"li"},"git diff")," para obtener las diferencias y luego redirige esa salida al script diff-highlight ubicado en la ruta especificada. El prop\xf3sito de usar ",(0,i.kt)("strong",{parentName:"li"},"diff-highlight")," es mejorar la visualizaci\xf3n de las diferencias resaltando las l\xedneas modificadas, a\xf1adidas o eliminadas para facilitar la lectura de los cambios.")))),(0,i.kt)("h4",{id:"diferenciaci\xf3n-de-archivos-binarios"},"Diferenciaci\xf3n de archivos binarios"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git diff")," tambi\xe9n se puede ejecutar con archivos binarios. Por desgracia, el resultado predeterminado no resulta demasiado \xfatil."),(0,i.kt)("li",{parentName:"ul"},"Git tiene una funci\xf3n que te permite especificar un comando de shell para transformar el contenido de tus archivos binarios en texto antes de ejecutar el comando diff, pero para ello hay que hacer unos peque\xf1os ajustes. En primer lugar, tienes que especificar un filtro de textconv que exponga c\xf3mo convertir en texto un tipo concreto de archivo binario. "),(0,i.kt)("li",{parentName:"ul"},'Usaremos una sencilla utilidad llamada "pdftohtml" (disponible a trav\xe9s de Homebrew) para convertir unos PDF en HTML legible para humanos. Puedes configurar esto para un solo repositorio editando el archivo .git/config o bien globalmente editando ~ /.gitconfig:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},'[diff "pdfconv"]\ntextconv=pdftohtml -stdout\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Acto seguido, lo \xfanico que tienes que hacer es asociar al menos un patr\xf3n de archivos a nuestro filtro pdfconv, para lo cual puedes crear un archivo .gitattributes en la ra\xedz del repositorio:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"*.pdf diff=pdfconv\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Una vez configurado, ",(0,i.kt)("strong",{parentName:"li"},"git diff"),' ejecutar\xe1 primero el archivo binario mediante el script de conversor configurado y producir\xe1 la comparaci\xf3n del resultado del conversor. Esta misma t\xe9cnica se puede aplicar para obtener diferencias \xfatiles de todo tipo de archivos binarios como, por ejemplo, archivos .zip o .jar. Por ejemplo: si utilizas unzip -l (o semejante) en vez de "pdf2html", te mostrar\xe1 las rutas que se han a\xf1adido o eliminado. Por otro lado, se puede utilizar "exiv2" para mostrar cambios en los metadatos como, por ejemplo, documentos de dimensiones de im\xe1genes. Asimismo, existen herramientas de conversi\xf3n para transformar archivos .odf, .doc y otros formatos de documento a texto sin formato. ')),(0,i.kt)("h4",{id:"comparar-archivos"},"Comparar archivos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En el comando ",(0,i.kt)("strong",{parentName:"li"},"git diff")," se puede utilizar una opci\xf3n de ruta de archivo expl\xedcita. Cuando se utiliza una ruta de archivo en ",(0,i.kt)("strong",{parentName:"li"},"git diff"),", la operaci\xf3n de comparaci\xf3n limitar\xe1 su alcance al archivo especificado. Los siguientes ejemplos ilustran este uso:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff HEAD ./path/to/file\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff HEAD ./path/to/file")," muestra las diferencias entre la versi\xf3n actual del archivo en tu directorio de trabajo y la \xfaltima confirmaci\xf3n en la rama actual (HEAD). Esto incluir\xe1 los cambios que a\xfan no se han preparado (staged) en el \xedndice.\nEn este ejemplo, el alcance se restringe a ./path/to/file y, al invocar el comando, este comparar\xe1 los cambios concretos efectuados en el directorio de trabajo con respecto al \xedndice, y mostrar\xe1 los cambios que todav\xeda no se han preparado."),(0,i.kt)("li",{parentName:"ul"},"En t\xe9rminos m\xe1s detallados:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Si hay cambios en el archivo en tu directorio de trabajo que a\xfan no se han preparado (no han sido a\xf1adidos al \xedndice), esos cambios se mostrar\xe1n en la salida de ",(0,i.kt)("strong",{parentName:"li"},"git diff"),"."),(0,i.kt)("li",{parentName:"ul"},"Si has preparado cambios (usando ",(0,i.kt)("strong",{parentName:"li"},"git add"),") pero a\xfan no has confirmado (usando ",(0,i.kt)("strong",{parentName:"li"},"git commit"),"), esos cambios tambi\xe9n se mostrar\xe1n en la salida de ",(0,i.kt)("strong",{parentName:"li"},"git diff"),". En este caso, se mostrar\xe1n las diferencias entre el \xfaltimo commit (HEAD) y el contenido preparado en el \xedndice."))),(0,i.kt)("li",{parentName:"ul"},"De forma predeterminada, ",(0,i.kt)("strong",{parentName:"li"},"git diff")," ejecutar\xe1 la comparaci\xf3n con respecto a HEAD. Si se omite HEAD en el ejemplo anterior, ",(0,i.kt)("strong",{parentName:"li"},"git diff ./path/to/file")," surtir\xe1 el mismo efecto."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff --cached ./path/to/file")," muestra las diferencias entre el archivo especificado en el \xedndice (staging area) y la \xfaltima confirmaci\xf3n en la rama actual (HEAD). Este comando compara los cambios que ya han sido preparados para el pr\xf3ximo commit:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff --cached ./path/to/file\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al invocar ",(0,i.kt)("strong",{parentName:"li"},"git diff")," con la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--cached"),", el comando comparar\xe1 los cambios preparados con el repositorio local. La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--cached")," equivale a ",(0,i.kt)("strong",{parentName:"li"},"--staged"),".")),(0,i.kt)("h4",{id:"comparar-todos-los-cambios"},"Comparar todos los cambios"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al invocar ",(0,i.kt)("strong",{parentName:"li"},"git diff")," sin ninguna ruta de archivo, se comparar\xe1n los cambios efectuados en todo el proyecto. "),(0,i.kt)("li",{parentName:"ul"},"De forma predeterminada, ",(0,i.kt)("strong",{parentName:"li"},"git diff")," te mostrar\xe1 todos los cambios sin confirmar desde la \xfaltima confirmaci\xf3n.")),(0,i.kt)("h4",{id:"comparar-archivos-entre-dos-confirmaciones-distintas"},"Comparar archivos entre dos confirmaciones distintas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En el comando ",(0,i.kt)("strong",{parentName:"li"},"git diff")," se pueden utilizar referencias de Git de confirmaciones para mostrar las diferencias. Por ejemplo, algunas de estas referencias son HEAD, etiquetas y nombres de ramas. En Git, todas las confirmaciones tienen su correspondiente ID y, para obtenerlo, puedes ejecutar ",(0,i.kt)("strong",{parentName:"li"},"git log"),". Tambi\xe9n puedes utilizar este ID de confirmaci\xf3n en ",(0,i.kt)("strong",{parentName:"li"},"git diff"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"}," git diff 957fbc92b123030c389bf8b4b874522bdf2db72c ce489262a1ee34340440e55a0b99ea6918e19e7a\n")),(0,i.kt)("h4",{id:"comparar-ramas"},"Comparar ramas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Las ramas se comparan igual que el resto de  referencias en ",(0,i.kt)("strong",{parentName:"li"},"git diff"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff branch1..other-feature-branch\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff branch1..other-feature-branch"),' en Git muestra las diferencias entre los puntos finales de las dos ramas especificadas, es decir, entre la punta (commit m\xe1s reciente) de branch1 y la punta de other-feature-branch. La notaci\xf3n ".." se utiliza para especificar el rango de commits entre ambas ramas.'),(0,i.kt)("li",{parentName:"ul"},"Es importante tener en cuenta que este comando compara los contenidos de los archivos en los commits finales de cada rama, no  cada commit dentro de ese rango."),(0,i.kt)("li",{parentName:"ul"},"Este ejemplo introduce el punto como operador. Los dos puntos de este ejemplo indican la diferencia de los extremos de ambas ramas. Si se omiten estos puntos y se utiliza un espacio entre las ramas, el efecto que se produce es el mismo. "),(0,i.kt)("li",{parentName:"ul"},"La notaci\xf3n de dos puntos sirve para mostrar las diferencias entre dos referencias de git. Estas referencias pueden ser commits, ramas, etiquetas u otros identificadores que apunten a un punto espec\xedfico en la historia del repositorio.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Adem\xe1s, est\xe1 el operador de tres puntos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff branch1...other-feature-branch\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'La notaci\xf3n de los tres puntos (...) en Git se utiliza para mostrar las diferencias entre dos ramas espec\xedficas, pero con un enfoque diferente al de los dos puntos (..). Mientras que ".." muestra las diferencias entre los extremos de dos referencias y excluye los commits comunes, "..." incluye los commits comunes en la comparaci\xf3n.'),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git diff branch1...other-feature-branch")," en Git muestra las diferencias entre dos ramas espec\xedficas, incluyendo los commits que est\xe1n en ambas ramas y excluyendo los commits que son exclusivos de cada rama."),(0,i.kt)("li",{parentName:"ul"},"La notaci\xf3n de tres puntos (...) incluye el ancestro com\xfan de ambas ramas en la comparaci\xf3n. En otras palabras, se compara  el \xfaltimo ancestro com\xfan  con los extremos de las dos ramas.")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),'Ejemplo con el operador  "..."')),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Supongamos que tienes las siguientes ramas:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Rama branch1 :  A -- B -- C \u2013 D"),(0,i.kt)("li",{parentName:"ul"},"Rama other-feature-branch:    B -- E -- F \u2013 G"))),(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, el commit B es el ancestro com\xfan m\xe1s reciente de ambas ramas. Ahora, si ejecutas:")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff branch1...other-feature-branch\n")),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"La salida mostrar\xe1 las diferencias entre el commit B (ancestro com\xfan) y los commits finales de ambas ramas (D en branch1 y G en other-feature-branch). Esto excluye los commits A, C, E, y F, ya que est\xe1n en una rama pero no en ambas. "),(0,i.kt)("li",{parentName:"ul"},"Este ejemplo es bastante simple, pero ilustra c\xf3mo la notaci\xf3n de tres puntos enfoca la comparaci\xf3n en los cambios realizados entre el ancestro com\xfan y los extremos de las ramas en cuesti\xf3n.")))),(0,i.kt)("h4",{id:"comparar-archivos-de-dos-ramas"},"Comparar archivos de dos ramas"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Para comparar un archivo concreto entre ramas, hay que utilizar en el comando la ruta del archivo como tercer argumento de ",(0,i.kt)("strong",{parentName:"li"},"git diff"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff main new_branch ./diff_test.txt\n")),(0,i.kt)("h4",{id:"documentaci\xf3n-4"},(0,i.kt)("a",{parentName:"h4",href:"https://git-scm.com/docs/git-diff"},"Documentaci\xf3n")),(0,i.kt)("h2",{id:"git-rm"},"git rm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Una pregunta habitual al empezar a trabajar con Git es "\xbfC\xf3mo le indico a Git que deje de hacer el seguimiento de un archivo (o varios archivos)?". El comando ',(0,i.kt)("strong",{parentName:"li"},"git rm")," se usa para eliminar archivos de un repositorio de Git. Se puede considerar que es lo contrario a lo que hace el comando ",(0,i.kt)("strong",{parentName:"li"},"git add"),"."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git rm")," se puede usar para eliminar archivos sueltos o un conjunto de ellos. La funci\xf3n principal de ",(0,i.kt)("strong",{parentName:"li"},"git rm")," es eliminar los archivos del \xedndice de Git. Adem\xe1s, ",(0,i.kt)("strong",{parentName:"li"},"git rm")," se puede usar para eliminar archivos tanto del \xedndice del entorno de ensayo como del directorio de trabajo. No existe la opci\xf3n de eliminar un archivo solo del directorio de trabajo. Los archivos sobre los que se est\xe1 trabajando deben ser id\xe9nticos a los archivos del HEAD actual. Si existe alguna discrepancia entre la versi\xf3n del HEAD de un archivo y el \xedndice del entorno de ensayo o la versi\xf3n del \xe1rbol de trabajo, Git impedir\xe1 que se eliminen los archivos. Se trata de un mecanismo de seguridad para evitar la eliminaci\xf3n de cambios en progreso."),(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que ",(0,i.kt)("strong",{parentName:"li"},"git rm")," no elimina ramas.")),(0,i.kt)("h4",{id:"uso"},"Uso"),(0,i.kt)("h4",{id:"especificar-archivos"},"Especificar archivos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tenes que especificar los archivos que se van a eliminar. Puede ser un archivo individual , una lista de archivos separados por un espacio en blanco o un patron global de archivos con caracteres comod\xedn (~./directory/*)."),(0,i.kt)("li",{parentName:"ul"},"Eliminar un archivo individual:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rm archivo.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Eliminar una lista de archivos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rm archivo1.txt archivo2.txt archivo3.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Eliminar archivos usando un patr\xf3n global con caracteres comod\xedn:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rm ~/directory/*\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n del patr\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"~: Representa el directorio de inicio del usuario."),(0,i.kt)("li",{parentName:"ul"},'/directory/: Representa el directorio llamado "directory" dentro del directorio de inicio.'),(0,i.kt)("li",{parentName:"ul"},"*",(0,i.kt)("em",{parentName:"li"},": Es un car\xe1cter comod\xedn que coincide con cualquier cadena de caracteres, por lo que "),' al final indica que se est\xe1n seleccionando todos los archivos en el directorio "directory".')))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Recuerda que despu\xe9s de usar ",(0,i.kt)("strong",{parentName:"li"},"git rm"),", tambi\xe9n debes hacer un commit para aplicar los cambios al repositorio.")))),(0,i.kt)("h4",{id:"otros-patrones"},"Otros patrones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Los patrones globales de archivos con caracteres comod\xedn se usan en los diferentes directorios. Es importante usar con precauci\xf3n estos patrones. Analiza los siguientes ejemplos: directory/",(0,i.kt)("em",{parentName:"li"}," y directory"),". En el primer ejemplo, se eliminar\xe1n todos los archivos secundarios de directory/; mientras que, en el segundo, todos los directorios del mismo nivel, como directory1, directory2 y directory_whatever, lo cual puede dar lugar a un resultado inesperado.")),(0,i.kt)("h4",{id:"opcion--f-o---force"},"Opcion -f o --force"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-f")," se usa para invalidar la comprobaci\xf3n de seguridad que Git realiza para garantizar que los archivos en HEAD coinciden con el contenido actual del \xedndice del entorno de ensayo y del directorio de trabajo.")),(0,i.kt)("h4",{id:"opcion--n-o--dry-run"},"Opcion -n o \u2013-dry-run"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'La opci\xf3n "dry run" es una protecci\xf3n que ejecutar\xe1 el comando ',(0,i.kt)("strong",{parentName:"li"},"git rm"),", pero que no elimina realmente los archivos. En realidad, mostrar\xe1 como resultado los archivos que habr\xeda eliminado.")),(0,i.kt)("h4",{id:"opcion--r"},"Opcion -r"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"-r"),' es la abreviatura de "recursive". Al trabajar en modo recursivo, ',(0,i.kt)("strong",{parentName:"li"},"git rm")," eliminar\xe1 el directorio de destino y todo el contenido de dicho directorio.")),(0,i.kt)("h4",{id:"--"},"--"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La opci\xf3n de separador sirve para distinguir de forma expl\xedcita entre una lista de nombres de archivo y los argumentos que se van a transmitir a ",(0,i.kt)("strong",{parentName:"li"},"git rm"),". Esto resulta \xfatil si algunos de los nombres de archivo tienen una sintaxis igual que otras opciones.")),(0,i.kt)("h4",{id:"opcion--cached"},"Opcion \u2013-cached"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'La opci\xf3n "cached" especifica que la eliminaci\xf3n solo debe realizarse en el \xedndice de entorno de ensayo. Los archivos del directorio de trabajo quedar\xe1n aparte.')),(0,i.kt)("h4",{id:"opcion---ignore-unmatch"},"Opcion --ignore-unmatch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Esto hace que el comando d\xe9 como resultado un estado de sigterm 0 aunque no haya archivos coincidentes. Este es un c\xf3digo de estado de nivel Unix. El c\xf3digo 0 indica una invocaci\xf3n correcta del comando. La opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--ignore-unmatch")," puede resultar \xfatil cuando se usa ",(0,i.kt)("strong",{parentName:"li"},"git rm")," dentro de un script de shell mayor que deba fallar de forma elegante.")),(0,i.kt)("h4",{id:"opcion--q-o--quiet"},"Opcion -q o \u2013-quiet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'La opci\xf3n "quiet" oculta el resultado del comando ',(0,i.kt)("strong",{parentName:"li"},"git rm"),". El comando suele dar como resultado una l\xednea para cada archivo eliminado.")),(0,i.kt)("h4",{id:"como-deshacer-el-comando-git-rm"},"Como deshacer el comando git rm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La ejecuci\xf3n del comando ",(0,i.kt)("strong",{parentName:"li"},"git rm"),' no es una actualizaci\xf3n permanente. El comando actualizar\xe1 el \xedndice del entorno de ensayo y el directorio de trabajo. Estos cambios no se almacenar\xe1n hasta que se cree una nueva confirmaci\xf3n y los cambios se a\xf1adan al historial de confirmaciones. Esto implica que los cambios se pueden "deshacer" mediante los comandos habituales de Git.'),(0,i.kt)("li",{parentName:"ul"},'Con la opci\xf3n "reset" se revertir\xe1n el \xedndice del entorno de ensayo y el directorio de trabajo actual (si utiliza la opcion ',(0,i.kt)("strong",{parentName:"li"},"--hard"),") a la confirmaci\xf3n HEAD. De este modo, se anular\xe1 el comando ",(0,i.kt)("strong",{parentName:"li"},"git rm"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git reset HEAD\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'El uso de la opci\xf3n "checkout" tendr\xe1 el mismo efecto y restaurar\xe1 la \xfaltima versi\xf3n del archivo de HEAD:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git checkout .\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En caso de que se haya ejecutado ",(0,i.kt)("strong",{parentName:"li"},"git rm")," y se haya creado una nueva confirmaci\xf3n que conserve la eliminaci\xf3n, se puede usar ",(0,i.kt)("strong",{parentName:"li"},"git reflog")," para encontrar una referencia que sea anterior a la ejecuci\xf3n de ",(0,i.kt)("strong",{parentName:"li"},"git rm"),". ")))),(0,i.kt)("h4",{id:"aclaraciones"},"Aclaraciones"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git rm")," solo act\xfaa en la rama actual. La eliminaci\xf3n solo se aplica al directorio de trabajo y al entorno de ensayo(\xedndice). La eliminaci\xf3n del archivo no se almacena en el historial de repositorios hasta que se cree una nueva confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"Un repositorio de Git reconocer\xe1 cu\xe1ndo se ha ejecutado un comando rm de shell habitual en un archivo en seguimiento. Se actualizar\xe1 el directorio de trabajo para reflejar la eliminaci\xf3n. Por el contrario, el \xedndice del entorno de ensayo no se actualizar\xe1. Habr\xe1 que ejecutar un comando ",(0,i.kt)("strong",{parentName:"li"},"git add")," adicional en las rutas del archivo eliminado para a\xf1adir los cambios al \xedndice del entorno de ensayo. El comando ",(0,i.kt)("strong",{parentName:"li"},"git rm")," act\xfaa como acceso r\xe1pido en el que se actualizar\xe1 el directorio de trabajo y el \xedndice del entorno de ensayo con la eliminaci\xf3n.")),(0,i.kt)("h4",{id:"ejemplos"},"Ejemplos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"En este ejemplo se usa un patr\xf3n global de archivos con caracteres comod\xedn para eliminar todos los archivos *.txt que pertenecen al directorio Documentation y a cualquiera de sus subdirectorios:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rm Documentation/\\*.txt\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Ten en cuenta que el asterisco (*) se escapa con barras oblicuas en este ejemplo. Se trata de una protecci\xf3n que evita que el shell expanda el car\xe1cter comod\xedn. Este car\xe1cter comod\xedn expande los nombres de rutas de los archivos y subdirectorios dentro del directorio Documentation/."),(0,i.kt)("li",{parentName:"ul"},"Cuando escribes un comando en la l\xednea de comandos y usas un asterisco sin escapar, el shell intentar\xe1 expandir ese asterisco con una lista de archivos coincidentes antes de ejecutar el comando. Escapar el asterisco con una barra oblicua evita que el shell realice esta expansi\xf3n y permite que el comando utilice el asterisco como un car\xe1cter literal."),(0,i.kt)("li",{parentName:"ul"},'En resumen, al escribir "Documentation/*.txt", se est\xe1 indicando al sistema que busque archivos con extensi\xf3n ".txt" dentro del directorio "Documentation", pero se est\xe1 escapando el asterisco para evitar que el shell expanda autom\xe1ticamente ese asterisco antes de ejecutar el comando. Esto es \xfatil cuando quieres realizar operaciones en archivos que contienen caracteres comod\xedn en sus nombres.')))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'En este ejemplo se usa la opci\xf3n "force" y se dirige a todos los archivos git-*.sh. Esta opci\xf3n elimina de forma expl\xedcita los archivos que coinciden con el patr\xf3n tanto del directorio de trabajo como del \xedndice del entorno de ensayo:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git rm -f git-*.sh\n")),(0,i.kt)("h4",{id:"como-eliminar-archivos-que-ya-no-est\xe1n-en-el-sistema-de-archivos"},"Como eliminar archivos que ya no est\xe1n en el sistema de archivos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git rm")," es en realidad un comando de conveniencia que combina el comando rm de shell est\xe1ndar y ",(0,i.kt)("strong",{parentName:"li"},"git add")," para eliminar un archivo del directorio de trabajo y promover dicha eliminaci\xf3n al \xedndice del entorno de ensayo. "),(0,i.kt)("li",{parentName:"ul"},"Si tienes la intenci\xf3n de registrar todos los archivos eliminados de forma expl\xedcita dentro de la siguiente confirmaci\xf3n, ",(0,i.kt)("strong",{parentName:"li"},"git commit -a")," a\xf1adir\xe1 todos los eventos de eliminaci\xf3n al \xedndice del entorno de ensayo a modo de preparaci\xf3n para la siguiente confirmaci\xf3n."),(0,i.kt)("li",{parentName:"ul"},"No obstante, si quieres eliminar de forma permanente los archivos que han sido eliminados con rm de shell, usa el siguiente comando:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git diff --name-only --diff-filter=D -z | xargs -0 git rm \u2013-cached\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Este comando generar\xe1 una lista de archivos eliminados del directorio de trabajo y canalizar\xe1 la lista a ",(0,i.kt)("strong",{parentName:"li"},"git rm --cached"),", por lo que se actualizar\xe1 el \xedndice del entorno de ensayo.")))),(0,i.kt)("h2",{id:"git-clone"},"git clone"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Se utiliza para apuntar a un repositorio existente y crear un clon o una copia de un repositorio (remoto o local).")),(0,i.kt)("h4",{id:"copia-de-desarrollo"},"Copia de desarrollo"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si un proyecto ya se ha configurado en un repositorio central, el comando es la forma m\xe1s com\xfan para que los usuarios obtengan una copia y puedan trabajar en el proyecto."),(0,i.kt)("li",{parentName:"ul"},"Al igual que ",(0,i.kt)("strong",{parentName:"li"},"git init")," , es una operaci\xf3n \xfanica (solo se ejecuta una vez)."),(0,i.kt)("li",{parentName:"ul"},"Una vez que un desarrollador ha obtenido una copia de trabajo, todas las operaciones de control de versiones y colaboraciones se gestionan a trav\xe9s de su repositorio local.")),(0,i.kt)("h4",{id:"colaboraci\xf3n-entre-repositorios"},"Colaboraci\xf3n entre repositorios"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Es importante comprender que la idea de Git de una \u201ccopia de trabajo\u201d es muy diferente de la copia de trabajo que se obtiene al extraer el c\xf3digo de un repositorio SVN. A diferencia de SVN, Git no hace distinci\xf3n entre la copia de trabajo y el repositorio central: todos son completos."),(0,i.kt)("li",{parentName:"ul"},"Esto hace que colaborar con Git sea fundamentalmente diferente que con SVN. Mientras que SVN depende de la relaci\xf3n entre el repositorio central y la copia de trabajo, el modelo de colaboraci\xf3n de Git se basa en la interacci\xf3n entre repositorios. En lugar de registrar una copia de trabajo en el repositorio central de SVN, usted puede empujar(push) o jalar(pull) confirmaciones de un repositorio a otro.")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:5d68ce55-59a7-4840-a896-eb2014a9f17b/02.svg?cdnVersion=1328",alt:"Explicaci\xf3n de git clone"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Por supuesto, no hay nada que le impida darles un significado especial a ciertos repositorios de Git. Por ejemplo, simplemente designando un repositorio de Git como repositorio "central", es posible replicar un flujo de trabajo centralizado utilizando Git. El punto es que esto se logra a trav\xe9s de convenciones en lugar de estar integrado en el propio VCS.')),(0,i.kt)("h4",{id:"uso-1"},"Uso"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"git clone")," se utiliza principalmente para indicar un repositorio existente y hacer un clon o una copia de ese repositorio en un nuevo directorio, en otra ubicaci\xf3n. "),(0,i.kt)("li",{parentName:"ul"},"El repositorio original puede estar ubicado en el sistema de archivos local o en protocolos compatibles accesibles en una m\xe1quina remota. "),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git clone")," copia un repositorio Git existente. Esto es algo as\xed como el checkout de SVN, excepto que la \u201ccopia de trabajo\u201d es un repositorio Git completo: tiene su propio historial, administra sus propios archivos y es un entorno completamente aislado del repositorio original."),(0,i.kt)("li",{parentName:"ul"},'Para su comodidad, la clonaci\xf3n crea autom\xe1ticamente una conexi\xf3n remota llamada "origen" que apunta al repositorio original. Esto hace que sea muy f\xe1cil interactuar con un repositorio central.'),(0,i.kt)("li",{parentName:"ul"},"Esta conexi\xf3n autom\xe1tica se establece mediante la creaci\xf3n de referencias de Git a los encabezados de las ramas remotas refs/remotes/origin y mediante la inicializaci\xf3n de las variables de configuraci\xf3n remote.origin.url y remote.origin.fetch"),(0,i.kt)("li",{parentName:"ul"},"El siguiente ejemplo demuestra c\xf3mo obtener una copia local de un repositorio central almacenado en un servidor accesible usando el nombre de usuario SSH john:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone ssh://john@example.com/path/to/my-project.git \ncd my-project \n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"El primer comando inicializa un nuevo repositorio Git en la carpeta my-project de su m\xe1quina local y lo llena con el contenido del repositorio central. Luego, puede ingresar al proyecto y comenzar a editar archivos, confirmar instant\xe1neas e interactuar con otros repositorios. Tenga en cuenta tambi\xe9n que la extensi\xf3n .git se omite en el repositorio clonado. Esto refleja el estado no desnudo de la copia local."),(0,i.kt)("li",{parentName:"ul"},"Por defecto el comando ",(0,i.kt)("strong",{parentName:"li"},"git clone")," crea un directorio nuevo con el nombre del proyecto en el directorio actual desde donde se ejecuta el comando.")))),(0,i.kt)("h4",{id:"clonaci\xf3n-a-una-carpeta-especifica"},"Clonaci\xf3n a una carpeta especifica"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clone el repositorio ubicado en ","<","repo\uff1e en la carpeta llamada ","<","directory\uff1e en la m\xe1quina local:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone <repo> <directory>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Si no se especifica ","<","directory>, se clona el repositorio en la ubicaci\xf3n actual.")),(0,i.kt)("h4",{id:"clonar-una-etiqueta-espec\xedfica"},"Clonar una etiqueta espec\xedfica"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clona el repositorio ubicado en ","<","repo\uff1e pero solo clona la referencia para ","<","tag\uff1e:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone --branch <tag> <repo>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al especificar la etiqueta con ",(0,i.kt)("strong",{parentName:"li"},"--branch"),", est\xe1s indicando que deseas clonar el estado del repositorio en ese punto espec\xedfico de la historia."),(0,i.kt)("li",{parentName:"ul"},"En resumen, el comando ",(0,i.kt)("strong",{parentName:"li"},"git clone --branch ","<","tag> ","<","repo>")," clona un repositorio de Git, pero en lugar de clonar la rama principal (normalmente master), clona la versi\xf3n del repositorio correspondiente a la etiqueta especificada. Esto puede ser \xfatil cuando deseas trabajar con una versi\xf3n espec\xedfica de un proyecto que ha sido marcada con una etiqueta."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone --branch v1.0 https://ejemplo.com/mi-usuario/mi-proyecto.git\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},'--branch v1.0 indica que deseas clonar la versi\xf3n asociada con la etiqueta "v1.0".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://ejemplo.com/mi-usuario/mi-proyecto.git"},"https://ejemplo.com/mi-usuario/mi-proyecto.git")," es la URL del repositorio."),(0,i.kt)("li",{parentName:"ul"},'Esto clonar\xe1 el repositorio "mi-proyecto" desde el servidor remoto especificado, pero en lugar de clonar la rama principal, clonar\xe1 la versi\xf3n marcada como "v1.0". Despu\xe9s de ejecutar este comando, tendr\xe1s una copia local del repositorio en tu m\xe1quina con el c\xf3digo correspondiente a la versi\xf3n "v1.0".')))),(0,i.kt)("h4",{id:"clon-superficial"},"Clon superficial"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clona el repositorio ubicado en \uff1crepo\uff1ey clona solo el historial de confirmaciones especificado por la opci\xf3n  ",(0,i.kt)("strong",{parentName:"li"},"--depth=1"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone --depth=1 <repo>\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"En este ejemplo, se realiza una clonaci\xf3n ","<","repo\uff1ey solo se incluye la confirmaci\xf3n m\xe1s reciente en el nuevo repositorio clonado."),(0,i.kt)("li",{parentName:"ul"},"Puedes usar la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--depth")," junto con el n\xfamero deseado de commits que deseas obtener/incluir en la copia."),(0,i.kt)("li",{parentName:"ul"},"La clonaci\xf3n superficial es m\xe1s \xfatil cuando se trabaja con repositorios que tienen un historial de confirmaciones extenso. Un historial de confirmaciones extenso puede causar problemas de escala, como l\xedmites de uso de espacio en disco y largos tiempos de espera al clonar. Un clon Shallow puede ayudar a aliviar estos problemas de escala.")))),(0,i.kt)("h4",{id:"opciones-de-configuraci\xf3n"},"Opciones de configuraci\xf3n"),(0,i.kt)("h4",{id:"--branch"},"--branch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El argumento ",(0,i.kt)("strong",{parentName:"li"},"--branch")," le permite especificar una rama espec\xedfica para clonar en lugar de la rama a la que apunta HEAD en el remoto, generalmente la rama principal. Adem\xe1s, puedes pasar una etiqueta en lugar de una rama para obtener el mismo efecto."),(0,i.kt)("li",{parentName:"ul"},"Ejemplo:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone --branch feature-nueva https://github.com/tu-usuario/mi-proyecto.git\n")),(0,i.kt)("h4",{id:"--bare"},"--bare"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Se utiliza para crear un clon \u201cbare\u201d de un repositorio git."),(0,i.kt)("li",{parentName:"ul"},"Un repositorio bare no contiene una copia de trabajo (los archivos del proyecto que puedes editar y trabajar) , pero si contiene los datos del sistema de control de versiones de git como la base de datos y la informaci\xf3n de referencia."),(0,i.kt)("li",{parentName:"ul"},"Esto significa que se configurar\xe1 un repositorio con el historial del proyecto del que se puede enviar y extraer, pero que no se puede editar directamente. "),(0,i.kt)("li",{parentName:"ul"},"Adem\xe1s, no se configurar\xe1n ramas remotas. As\xed se utiliza para crear un repositorio alojado que los desarrolladores no editar\xe1n directamente.")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"Bare significa \u201cdesnudo\u201d y suele referirse a un repositorio vacio.")))),(0,i.kt)("h4",{id:"--mirror"},"--mirror"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Al pasar ",(0,i.kt)("strong",{parentName:"li"},"\u2013-mirror")," , tambi\xe9n se le pasa ",(0,i.kt)("strong",{parentName:"li"},"\u2013-bare")," expl\xedcitamente. Esto significa que el comportamiento de ",(0,i.kt)("strong",{parentName:"li"},"\u2013-bare")," es heredado por ",(0,i.kt)("strong",{parentName:"li"},"\u2013-mirror")," . Lo que da como resultado un repositorio simple sin archivos de trabajo editables."),(0,i.kt)("li",{parentName:"ul"},"Se utiliza para crear un clon espejo del repositorio."),(0,i.kt)("li",{parentName:"ul"},"Un clon espejo no solo contiene la informaci\xf3n del sistema de control de versiones como en un clon bare, sino que tambi\xe9n refleja todas las referencias y objetos del repositorio original, incluyendo las referencias remotas y las referencias de seguimiento de todas las ramas."),(0,i.kt)("li",{parentName:"ul"},"Cuando clonas un repositorio con la opci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"--mirror"),', se configura autom\xe1ticamente un remoto llamado "origin" que apunta al repositorio original. Esto significa que puedes usar comandos como ',(0,i.kt)("strong",{parentName:"li"},"git fetch origin")," , ",(0,i.kt)("strong",{parentName:"li"},"git push \u2013-mirror")," en el clon espejo para mantenerlo completamente sincronizado con el repositorio original."),(0,i.kt)("li",{parentName:"ul"},"El comando ",(0,i.kt)("strong",{parentName:"li"},"git push \u2013-mirror")," actualizar\xe1 todas las referencias del repositorio remoto para que coincidan exactamente con el estado del repositorio local. Ten en cuenta que este comando puede ser potencialmente destructivo, ya que sobrescribir\xe1 todas las referencias en el repositorio remoto con las del repositorio local."),(0,i.kt)("li",{parentName:"ul"},"Diferencia con ",(0,i.kt)("strong",{parentName:"li"},"\u2013-bare"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Un clon ",(0,i.kt)("strong",{parentName:"li"},"--bare")," solo tiene la informaci\xf3n del sistema de control de versiones (historial, ramas, etiquetas, etc.), pero no incluye referencias remotas o seguimiento de ramas espec\xedficas."),(0,i.kt)("li",{parentName:"ul"},"Un clon ",(0,i.kt)("strong",{parentName:"li"},"--mirror")," es una especie de clon ",(0,i.kt)("strong",{parentName:"li"},"--bare"),", pero incluye todas las referencias y objetos, haciendo que sea m\xe1s adecuado para duplicar completamente un repositorio, incluso con todas las ramas remotas y otras referencias."),(0,i.kt)("li",{parentName:"ul"},"La diferencia pr\xe1ctica entre ",(0,i.kt)("strong",{parentName:"li"},"--bare")," y ",(0,i.kt)("strong",{parentName:"li"},"--mirror")," radica en el prop\xf3sito de uso. Un clon ",(0,i.kt)("strong",{parentName:"li"},"--bare")," es adecuado para servidores centrales de colaboraci\xf3n, mientras que un clon ",(0,i.kt)("strong",{parentName:"li"},"--mirror")," se usa com\xfanmente para replicar completamente un repositorio, por ejemplo, para mantener una copia exacta de respaldo o para tener un reflejo completo de un repositorio en otro servidor.")))),(0,i.kt)("h4",{id:"--template"},"--template"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clona el repositorio ","<","repo location\uff1ey aplica la plantilla ","<","template directory\uff1ea la rama local reci\xe9n creada:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git clone --template=<template_directory> <repo location>\n")),(0,i.kt)("h4",{id:"url-de-git"},"Url de Git"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Git tiene su propia sintaxis de URL que se utiliza para pasar ubicaciones de repositorios remotos a comandos de Git. Debido a que se usa m\xe1s com\xfanmente en repositorios remotos, aqu\xed examinaremos la sintaxis de URL de Git. ")),(0,i.kt)("h4",{id:"protocolos-de-url-de-git"},"Protocolos de URL de Git"),(0,i.kt)("h4",{id:"-ssh"},"-SSH"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Secure Shell (SSH) es un protocolo de red autenticado ubicuo que com\xfanmente se configura de forma predeterminada en la mayor\xeda de los servidores. Debido a que SSH es un protocolo autenticado, deber\xe1 establecer credenciales con el servidor de alojamiento antes de conectarse:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"ssh://[user@]host.xz[:port]/path/to/repo.git/  \n")),(0,i.kt)("h4",{id:"-git"},"-GIT"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Un protocolo exclusivo de git. Se ejecuta en el puerto 9418. El protocolo es similar a SSH sin embargo NO TIENE AUTENTICACI\xd3N:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"git://host.xz[:port]/path/to/repo.git/  \n")),(0,i.kt)("h4",{id:"-http"},"-HTTP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Protocolo de Transferencia de Hipertexto. El protocolo de la web, m\xe1s com\xfanmente utilizado para transferir datos HTML de p\xe1ginas web a trav\xe9s de Internet. Git se puede configurar para comunicarse a trav\xe9s de HTTP:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-git"},"http[s]://host.xz[:port]/path/to/repo.git/  \n")))}d.isMDXComponent=!0}}]);