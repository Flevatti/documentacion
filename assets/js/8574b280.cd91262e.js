"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[8543],{5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>g});var r=n(6540);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function t(e,a){if(null==e)return{};var n,r,s=function(e,a){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),d=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=d(e.components);return r.createElement(l.Provider,{value:a},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=t(e,["components","mdxType","originalType","parentName"]),m=d(n),u=s,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(g,i(i({ref:a},c),{},{components:n})):r.createElement(g,i({ref:a},c))}));function g(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=u;var t={};for(var l in a)hasOwnProperty.call(a,l)&&(t[l]=a[l]);t.originalType=e,t[m]="string"==typeof e?e:s,i[1]=t;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1378:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var r=n(8168),s=(n(6540),n(5680));const o={sidebar_position:5},i="Token y Practica API REST",t={unversionedId:"Node/token",id:"Node/token",title:"Token y Practica API REST",description:"JWT(JSON WEB TOKEN)",source:"@site/docs/Node/token.md",sourceDirName:"Node",slug:"/Node/token",permalink:"/documentacion/docs/Node/token",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Node/token.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"Node",previous:{title:"MongoDB",permalink:"/documentacion/docs/Node/mongo"},next:{title:"Guia practica - 2022",permalink:"/documentacion/docs/Node/Guia"}},l={},d=[{value:"JWT(JSON WEB TOKEN)",id:"jwtjson-web-token",level:2},{value:"Ciclo de vida de un token",id:"ciclo-de-vida-de-un-token",level:3},{value:"API REST PRACTICA",id:"api-rest-practica",level:2},{value:"Requisitos",id:"requisitos",level:2},{value:"Pasos",id:"pasos",level:2},{value:"1- Iniciar el proyecto",id:"1--iniciar-el-proyecto",level:2},{value:"2- Configurar scripts",id:"2--configurar-scripts",level:2},{value:"3- Instalamos las dependencias a utilizar",id:"3--instalamos-las-dependencias-a-utilizar",level:2},{value:"4- Creamos el .gitignore",id:"4--creamos-el-gitignore",level:2},{value:"5- carpetas:",id:"5--carpetas",level:2},{value:"6 - index.js:",id:"6---indexjs",level:2},{value:"7 - Creamos el archivo .env para las variables de entorno",id:"7---creamos-el-archivo-env-para-las-variables-de-entorno",level:2},{value:"8- Empezamos por las rutas",id:"8--empezamos-por-las-rutas",level:2},{value:"9- Configuramos la BD",id:"9--configuramos-la-bd",level:2},{value:"10- Creamos el esquema",id:"10--creamos-el-esquema",level:2},{value:"11- Vamos a registrar usuarios",id:"11--vamos-a-registrar-usuarios",level:2},{value:"12- Vamos a realizar validaciones con @hapi/joi",id:"12--vamos-a-realizar-validaciones-con-hapijoi",level:2},{value:"13 - Vamos a cifrar las contrase\xf1as (hash)",id:"13---vamos-a-cifrar-las-contrase\xf1as-hash",level:2},{value:"14- Empezamos a crear el login",id:"14--empezamos-a-crear-el-login",level:2},{value:"15- Empezamos a trabajar con el token",id:"15--empezamos-a-trabajar-con-el-token",level:2},{value:"16- Empezamos con las rutas protegidas , creamos un middleware",id:"16--empezamos-con-las-rutas-protegidas--creamos-un-middleware",level:2},{value:"17- Rutas protegidas",id:"17--rutas-protegidas",level:2}],c={toc:d},m="wrapper";function p(e){let{components:a,...n}=e;return(0,s.yg)(m,(0,r.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"token-y-practica-api-rest"},"Token y Practica API REST"),(0,s.yg)("h2",{id:"jwtjson-web-token"},"JWT(JSON WEB TOKEN)"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Es un token de seguridad que nosotros creamos al momento que el usuario se registra con sus credenciales(inicia sesion)")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Este token se devuelve al cliente el cual tendr\xe1 que enviar cada vez que solicita informaci\xf3n al servidor.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Se divide en 3 partes: Header, Payload y Verify Signature"),(0,s.yg)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"La informaci\xf3n del usuario va en el PayLoad (NO PONER CONTRASE\xd1A)")))),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Como servidor, cuando el usuario se registre, le vamos a devolver un token.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Cada vez que el usuario quiera acceder a una ruta protegida, tendr\xe1 que enviar ese token.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("a",{parentName:"p",href:"https://jwt.io"},"link"))),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("a",{parentName:"p",href:"https://openwebinars.net/blog/que-es-json-web-token-y-como-funciona/"},"guia"))),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("a",{parentName:"p",href:"https://www.developerro.com/2019/03/12/jwt-api-authentication/"},"guia2")))),(0,s.yg)("h3",{id:"ciclo-de-vida-de-un-token"},"Ciclo de vida de un token"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},"Nos logeamos (usuario y contrase\xf1a)"),(0,s.yg)("li",{parentName:"ol"},"El servidor devuelve un token (JWT)"),(0,s.yg)("li",{parentName:"ol"},"Cuando quiera acceder a alg\xfan recurso, va a enviar su token ")),(0,s.yg)("h2",{id:"api-rest-practica"},"API REST PRACTICA"),(0,s.yg)("p",null,"Para este ejercicio pr\xe1ctico realizaremos una API REST, que es un est\xe1ndar (reglas y especificaciones) para la transferencia de informaci\xf3n entre cliente y servidor, utilizaremos respuestas en JSON y los t\xedpicos verbos HTTP: POST, GET, DELETE, PUT."),(0,s.yg)("p",null,"Algunas ventajas de hacer una API REST:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Podemos conectar m\xfaltiples aplicaciones a nuestro servidor, ya sea p\xe1gina web, aplicaci\xf3n m\xf3vil, aplicaci\xf3n para escritorio, etc."),(0,s.yg)("li",{parentName:"ul"},"Youtube por ejemplo cuenta con una api rest para poder implementar sus videos ya sea desde el sitio web o su aplicaci\xf3n m\xf3vil."),(0,s.yg)("li",{parentName:"ul"},"Separamos el backend del frontend",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"El frontend  se puede manejar con cualquier tecnolog\xeda (vue, react , etc) y el backend con node.js/express , etc."))),(0,s.yg)("li",{parentName:"ul"},"Permiten que el proyecto puede expandirse en un futuro")),(0,s.yg)("h2",{id:"requisitos"},"Requisitos"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"https://nodejs.org/es/"},"node.js -- entorno de desarollo")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"https://www.postman.com/downloads/"},"postman -- para simular un frontend")),(0,s.yg)("li",{parentName:"ul"},"Configurar un cluster en mongoDB")),(0,s.yg)("h2",{id:"pasos"},"Pasos"),(0,s.yg)("h2",{id:"1--iniciar-el-proyecto"},"1- Iniciar el proyecto"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-powershell"},"npm init -y\n")),(0,s.yg)("h2",{id:"2--configurar-scripts"},"2- Configurar scripts"),(0,s.yg)("p",null,"package.json:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "api-rest-token",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "nodemon index" ,\n    "start" : "node index"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n\n')),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Como se ve, vamos a utilizar un index.js"))),(0,s.yg)("h2",{id:"3--instalamos-las-dependencias-a-utilizar"},"3- Instalamos las dependencias a utilizar"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Con un espacio en blanco separamos las dependencias para instalar varias en solo una linea"))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-powershell"},"npm i  express body-parser mongoose bcrypt dotenv jsonwebtoken \n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-powershell"},"npm i @hapi/joi\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-powershell"},"npm i cors\n")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-powershell"},"npm i -g nodemon\n")),(0,s.yg)("h2",{id:"4--creamos-el-gitignore"},"4- Creamos el .gitignore"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-gitignore"},"node_modules\n.env\n\n")),(0,s.yg)("h2",{id:"5--carpetas"},"5- carpetas:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"routes"),(0,s.yg)("li",{parentName:"ul"},"models")),(0,s.yg)("h2",{id:"6---indexjs"},"6 - index.js:"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"regla API REST ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("pre",{parentName:"div"},(0,s.yg)("code",{parentName:"pre"},"Para que sea una API REST, las respuestas deben ser en JSON o XHTML\n")))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyparser = require('body-parser');\nrequire('dotenv').config()\nconst app = express();\n\n// capturar body\napp.use(bodyparser.urlencoded({ extended: false }));\napp.use(bodyparser.json());\n\n// Conexi\xf3n a Base de datos\n\n// import routes\n\n// route middlewares\napp.get('/', (req, res) => {\n   res.json({\n       estado: true,\n       mensaje: 'funciona!'\n   })\n});\n\n// iniciar server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n   console.log(`servidor andando en: ${PORT}`)\n})\n\n")),(0,s.yg)("p",null," Lo probamos en postman:"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},"Le das al icono + "),(0,s.yg)("li",{parentName:"ol"},"Seleccionas el verbo a tratar ",(0,s.yg)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"POSTMAN")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Postman hace una simulaci\xf3n de nuestro frontend y sirve para hacer todas las peticiones HTTP  (PUT , DELETE , GET , POST , ETC) que quieras")))),(0,s.yg)("li",{parentName:"ol"},"Ingresas la url donde se va a enviar una petici\xf3n X (GET , POST , ETC)")),(0,s.yg)("p",null,"Ejemplo: GET http://localhost:3001   SEND"),(0,s.yg)("p",null,"Deberias de recibir la respuesta json."),(0,s.yg)("h2",{id:"7---creamos-el-archivo-env-para-las-variables-de-entorno"},"7 - Creamos el archivo .env para las variables de entorno"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"USER=\nPASSWORD=\nDBNAME=\nTOKEN_SECRET=\n\n")),(0,s.yg)("h2",{id:"8--empezamos-por-las-rutas"},"8- Empezamos por las rutas"),(0,s.yg)("p",null,"Creamos un archivo auth.js en la carpeta routes"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\n\nrouter.post('/register', async (req, res) => {\n\n    res.json({\n        error: null,\n        data: 'aqu\xed va ir la data'\n    })\n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"index.js:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyparser = require('body-parser');\nrequire('dotenv').config()\nconst app = express();\n\n// capturar body\napp.use(bodyparser.urlencoded({ extended: false }));\napp.use(bodyparser.json());\n\n// Conexi\xf3n a Base de datos\n\n// import routes\nconst authRoutes = require('./routes/auth');\n// route middlewares\n\napp.use('/api/user' , authRoutes)\n\napp.get('/', (req, res) => {\n    res.json({\n        estado: true,\n        mensaje: 'funciona!'\n    })\n});\n\n// iniciar server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n    console.log(`servidor andando en: ${PORT}`)\n})\n\n")),(0,s.yg)("p",null,"Probar en POSTMAN:"),(0,s.yg)("p",null,"POST  http://localhost:3001/api/user/register send"),(0,s.yg)("h2",{id:"9--configuramos-la-bd"},"9- Configuramos la BD"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},"Creamos una cuenta de la BD mongo (Database acces)")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"cuenta")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"usuario: api-rest"),(0,s.yg)("p",{parentName:"div"},"contrase\xf1a: mTrKny2lLo5L8z7b"))),(0,s.yg)("ol",{start:2},(0,s.yg)("li",{parentName:"ol"},"Los datos los ponemos en el .env"),(0,s.yg)("li",{parentName:"ol"},"Creamos una Collections",(0,s.yg)("ul",{parentName:"li"},(0,s.yg)("li",{parentName:"ul"},"BD \u2013 Browse Collection  - create Database")))),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"collection ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"nombreBD: apiCrud"),(0,s.yg)("p",{parentName:"div"},"nombre de colecci\xf3n : users"))),(0,s.yg)("ol",{start:4},(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},"Buscamos la Uri"),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre"},"- Database \u2013 Connect \u2013 Connect your app\n")),(0,s.yg)("div",{parentName:"li",className:"admonition admonition-warning alert alert--danger"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Si cambiamos el cluster(BaseData) , se cambia la uri.")))),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},"en el archivo .env creamos variable para el usuario , contrase\xf1a y nombre de la BD.\n.env"),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre",className:"language-js"},"USER=api-rest\nPASSWORD=mTrKny2lLo5L8z7b\nDBNAME=apiCrud\nTOKEN_SECRET=\n\n")),(0,s.yg)("p",{parentName:"li"}," index.js"))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"}," const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyparser = require('body-parser');\nrequire('dotenv').config()\nconst app = express();\n\n// capturar body\napp.use(bodyparser.urlencoded({ extended: false }));\napp.use(bodyparser.json());\n\n// Conexi\xf3n a Base de datos\n// Conexi\xf3n a Base de datos\nconst uri = `mongodb+srv://${process.env.USER}:${process.env.PASSWORD}@mascota.xcibc.mongodb.net/${process.env.DBNAME}?retryWrites=true&w=majority`;\nconst option =   { useNewUrlParser: true, useUnifiedTopology: true }\nmongoose.connect(uri,option)\n.then(() => console.log('Base de datos conectada'))\n.catch(e => console.log('error db:', e))\n\n// import routes\nconst authRoutes = require('./routes/auth');\n// route middlewares\n\napp.use('/api/user' , authRoutes)\n\napp.get('/', (req, res) => {\n    res.json({\n        estado: true,\n        mensaje: 'funciona!'\n    })\n});\n\n// iniciar server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n    console.log(`servidor andando en: ${PORT}`)\n})\n\n")),(0,s.yg)("h2",{id:"10--creamos-el-esquema"},"10- Creamos el esquema"),(0,s.yg)("p",null," Creamos el archivo User.js dentro de la carpeta models"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"}," A diferencia de la explicaci\xf3n , aca a\xf1adimos el tipo de dato de las propiedades y tambi\xe9n algunas restricciones como si es obligatorio , el m\xednimo de caracteres/n\xfameros o el m\xe1ximo y un valor por defecto."))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const mongoose = require('mongoose');\n\nconst userSchema = mongoose.Schema({\n   name: {\n       type: String,\n       required: true,\n       min: 6,\n       max: 255\n   },\n   email: {\n       type: String,\n       required: true,\n       min: 6,\n       max: 1024\n   },\n   password: {\n       type: String,\n       required: true,\n       minlength: 6\n   },\n   date: {\n       type: Date,\n       default: Date.now\n   }\n})\n\nmodule.exports = mongoose.model('User', userSchema);\n\n")),(0,s.yg)("h2",{id:"11--vamos-a-registrar-usuarios"},"11- Vamos a registrar usuarios"),(0,s.yg)("p",null," auth.js:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nrouter.post('/register', async (req, res) => {\n   const user = new User({\n       name: req.body.name ,\n       email: req.body.email ,\n       password: req.body.password\n\n   })\n   try {\n       const UserDB = await user.save();\n       res.json({\n           error: null,\n           data: UserDB\n       })\n   } catch (error) {\n       // Asignamos un codigo de status(estado) (404 , 400 300 , etc) y una respuesta json\n       res.status(400).json(error);\n   }\n \n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null," Probamos en postman:"),(0,s.yg)("p",null," POST http://localhost:3001/api/user/register"),(0,s.yg)("p",null," Body  - Raw \u2013 JSON"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{\n   "name": "juanito" ,\n   "email" : "juanito@juanito.com",\n   "password": "contrase\xf1ajuanita"\n}\n\n')),(0,s.yg)("p",null," SEND"),(0,s.yg)("h2",{id:"12--vamos-a-realizar-validaciones-con-hapijoi"},"12- Vamos a realizar validaciones con @hapi/joi"),(0,s.yg)("p",null," auth.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\n// Creamos un esquema de validaciones \n// Joi.object({objeto})\nconst schemaRegister = Joi.object({\n   // Las propiedades son las mismas que el esquema de mongoDB\n// Son las propiedades que se van a evaluar/validar de un objeto(req.body)\n   // propiedad: Joi.validacion.validacion\n   // Validaciones: Son string , validar correo , caracteres maximo y minimo , son obligatorio\n   name: Joi.string().min(6).max(255).required(),\n   email: Joi.string().min(6).max(255).required().email(),\n   password: Joi.string().min(6).max(1024).required()\n})\n\n\nrouter.post('/register', async (req, res) => {\n   // Utilizamos las validaciones\n// esquemadevalidacion.validate(objeto/archivo json)\n// Valida el objeto/archivojson\n   const validaciones =  schemaRegister.validate(req.body);\n   return   res.json({\n       error: null,\n       data: validaciones\n   })\n   const user = new User({\n       name: req.body.name ,\n       email: req.body.email ,\n       password: req.body.password\n\n   })\n   try {\n       const UserDB = await user.save();\n       res.json({\n           error: null,\n           data: UserDB\n       })\n   } catch (error) {\n       // Asignamos un codigo de status(estado) (404 , 400 300 , etc) y una respuesta json\n       res.status(400).json(error);\n   }\n \n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null," Probamos en postman: Una peticion post con body al register"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("ul",{parentName:"div"},(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"De lo que se devuelve vamos a usar la propiedad error que se genera cuando no se cumple con las validaciones.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},"Hay que acceder a los detalles del error(Contiene informacion sobre que validacion fallo)"))))),(0,s.yg)("p",null,"Modificacion:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\n// Creamos un esquema de validaciones \n// Las propiedades son las mismas que el esquema de mongoDB\nconst schemaRegister = Joi.object({\n    // Validaciones: Son string , validar correo , caracteres maximo y minimo , son obligatorio\n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\n\nrouter.post('/register', async (req, res) => {\n    // Utilizamos las validaciones\n// esquemadevalidacion.validate(objeto/archivo json)\n// Valida el objeto/archivojson\n    const {error} =  schemaRegister.validate(req.body);\n    // Si hubo algun error en las validaciones  == Si no paso las validaciones \n    if (error) {\n       // Asignamos un codigo de status(estado) (404 , 400 300 , etc) y una respuesta json\n       // Se sale del codigo si existe el error\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        password: req.body.password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        \n    }\n  \n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"Ahora vamos a validar que el email sea \xfanico:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\n// Creamos un esquema de validaciones \n// Las propiedades son las mismas que el esquema de mongoDB\nconst schemaRegister = Joi.object({\n    // Validaciones: Son string , validar correo , caracteres maximo y minimo , son obligatorio\n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\n\nrouter.post('/register', async (req, res) => {\n    // Utilizamos las validaciones\n// esquemadevalidacion.validate(objeto/archivo json)\n// Valida el objeto/archivojson\n    const {error} =  schemaRegister.validate(req.body);\n    // Si hubo algun error en las validaciones  == Si no paso las validaciones \n    if (error) {\n       // Asignamos un codigo de status(estado) (404 , 400 300 , etc) y una respuesta json\n       // Se sale del codigo si existe el error\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n    //Validacion si el email es unico\n    // Buscamos un documento cuyo email sea igual a req.body.email\n    // Devuelve true(encontro el documento) o false (si no encontro el documento)\n    const existeElEmail = await User.findOne({email : req.body.email})\n    // Si ya existe el email\n  if (existeElEmail) {\n      // Importante el return para que salga del codigo\n    return  res.status(400).json( {error: true , mensaje:'email ya registrado'});\n  }\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        password: req.body.password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        \n    }\n  \n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"Lo probamos en postman."),(0,s.yg)("h2",{id:"13---vamos-a-cifrar-las-contrase\xf1as-hash"},"13 - Vamos a cifrar las contrase\xf1as (hash)"),(0,s.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"ojo")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Nunca pero nunca guardar las contrase\xf1as sin cifrar."))),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Para eso utilizamos el bycript"))),(0,s.yg)("p",null,"auth.js:"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"genSalt(nro) = La cantidad de saltos   == La cantidad de veces que se va a encriptar la contrase\xf1a en cadena."))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\nconst bcrypt = require('bcrypt');\nconst schemaRegister = Joi.object({\n    \n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\n\nrouter.post('/register', async (req, res) => {\n\n    const {error} =  schemaRegister.validate(req.body);\n  \n    if (error) {\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n\n    const existeElEmail = await User.findOne({email : req.body.email})\n\n  if (existeElEmail) {\n      \n    return  res.status(400).json( {error: true , mensaje:'email ya registrado'});\n  }\n  // Guardamos en una variable la cantidad de saltos que se va a hacer en una contrase\xf1a\n  const saltos = await bcrypt.genSalt(10);\n  // Encriptamos la contrase\xf1a  hash(contrase\xf1a , cant de saltos)\n  // Nos devuelve la contrase\xf1a encriptada\n   const password = await bcrypt.hash(req.body.password , saltos)\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        // password : password\n        password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        res.status(400).json({error})\n    }\n  \n})\n\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"Probamos en postman "),(0,s.yg)("h2",{id:"14--empezamos-a-crear-el-login"},"14- Empezamos a crear el login"),(0,s.yg)("p",null,"auth.js"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Consejo ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Se recomienda poner los mensajes de los errores todos iguales para no darle pista a un futuro hacker . "),(0,s.yg)("p",{parentName:"div"},"Igualmente con los c\xf3digo de status no darle pista al hacker."))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\nconst bcrypt = require('bcrypt');\nconst schemaRegister = Joi.object({\n    \n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n// Esquema de validaciones del login\nconst schemaLogin = Joi.object({\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\nrouter.post('/register', async (req, res) => {\n\n    const {error} =  schemaRegister.validate(req.body);\n  \n    if (error) {\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n\n    const existeElEmail = await User.findOne({email : req.body.email})\n\n  if (existeElEmail) {\n      \n    return  res.status(400).json( {error: true , mensaje:'email ya registrado'});\n  }\n \n  const saltos = await bcrypt.genSalt(10);\n\n   const password = await bcrypt.hash(req.body.password , saltos)\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        // password : password\n        password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        res.status(400).json({error})\n    }\n  \n})\nrouter.post('/login', async (req, res) => {\n    // validaciones\n    const { error } = schemaLogin.validate(req.body);\n    if (error) return res.status(400).json({ error: error.details[0].message })\n    // Buscamos un documento cuyo email sea  req.body.email\n    // SI lo encuentra, lo devuelve en la variable user\n    const user = await User.findOne({ email: req.body.email });\n    // Si el usuario no existe\n    if (!user) return res.status(400).json({ error: 'Usuario no encontrado' });\n     // Verificamos que la contrase\xf1a sea igual a la que esta en la BD\n     // compare(contrase\xf1a sin cifrar , contrase\xf1a cifrada) \n    // La contrase\xf1a sin cifrar la cifra y la compara con el 2 parametro \n    // Devuelve true si son iguales\n    const validPassword = await bcrypt.compare(req.body.password, user.password);\n    // Si la contrase\xf1a no son iguales / no es valida\n    if (!validPassword) return res.status(400).json({ error: 'contrase\xf1a no v\xe1lida' })\n    \n    res.json({\n        error: null,\n        data: 'exito bienvenido'\n    })\n})\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"Probamos en postman "),(0,s.yg)("p",null,"POST  http://localhost:3001/api/user/login"),(0,s.yg)("p",null,"body - raw - json"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-json"},'{\n"email" : "juanito@juanito.com",\n"password": "contrase\xf1ajuanita"\n}\n\n')),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Diferencia con un proyecto profesional")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Generalmente las validaciones deben ir en un archivo aparte."))),(0,s.yg)("h2",{id:"15--empezamos-a-trabajar-con-el-token"},"15- Empezamos a trabajar con el token"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"El desarollador se encarga de la gestion y validacion del token . EL USUARIO NO SABE NADA DEL TOKEN"))),(0,s.yg)("p",null,".env: "),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"USER=api-rest\nPASSWORD=mTrKny2lLo5L8z7b\nDBNAME=apiCrud\nTOKEN_SECRET=secreto\n\n")),(0,s.yg)("p",null,"auth.js"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst schemaRegister = Joi.object({\n    \n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\nconst schemaLogin = Joi.object({\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\nrouter.post('/register', async (req, res) => {\n\n    const {error} =  schemaRegister.validate(req.body);\n  \n    if (error) {\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n\n    const existeElEmail = await User.findOne({email : req.body.email})\n\n  if (existeElEmail) {\n      \n    return  res.status(400).json( {error: true , mensaje:'email ya registrado'});\n  }\n \n  const saltos = await bcrypt.genSalt(10);\n\n   const password = await bcrypt.hash(req.body.password , saltos)\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        // password : password\n        password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        res.status(400).json({error})\n    }\n  \n})\nrouter.post('/login', async (req, res) => {\n    // validaciones\n    const { error } = schemaLogin.validate(req.body);\n    if (error) return res.status(400).json({ error: error.details[0].message })\n\n    const user = await User.findOne({ email: req.body.email });\n\n    if (!user) return res.status(400).json({ error: 'Usuario no encontrado' });\n\n    const validPassword = await bcrypt.compare(req.body.password, user.password);\n    \n    if (!validPassword) return res.status(400).json({ error: 'contrase\xf1a no v\xe1lida' })\n    // Creamos el token\n    // sign(un objeto que contiene el payload , string oculto)\n    const token = jwt.sign({ \n        // Creamos el payload del token\n        name: user.name,\n        id: user._id, \n    } , \n    // Secreto\n     // Texto(String) super secreto , que sea unico y dificil de adivinar\n    process.env.TOKEN_SECRET)\n    res.json({\n        error: null,\n        data: 'exito bienvenido' , \n        token: token\n    })\n})\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"Inicia sesion con postman "),(0,s.yg)("p",null,(0,s.yg)("a",{parentName:"p",href:"https://jwt.io"},"Proba el token en esta pagina")),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"El token no tiene la firma."),(0,s.yg)("p",{parentName:"div"},"Vemos que no es valido pero en el payload esta la data que pusimos (name y id)"),(0,s.yg)("p",{parentName:"div"},"Pero si en el bit secreto de la parte de Verify Signature, ponemos lo que pusimos como String secreto nos va a aparecer como verificado/validado."),(0,s.yg)("p",{parentName:"div"},"Entonces para verificar desde el servidor , usamos el secreto/String secreto / bit secreto para ver si el token es valido(NO FUE INVENTADO)."))),(0,s.yg)("h2",{id:"16--empezamos-con-las-rutas-protegidas--creamos-un-middleware"},"16- Empezamos con las rutas protegidas , creamos un middleware"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"explicacion ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Son rutas restringidas, que depende del token si tenes acceso o no."))),(0,s.yg)("p",null,"auth.js:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\nconst User = require('../models/User');\nconst Joi = require('@hapi/joi');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst schemaRegister = Joi.object({\n    \n    name: Joi.string().min(6).max(255).required(),\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\nconst schemaLogin = Joi.object({\n    email: Joi.string().min(6).max(255).required().email(),\n    password: Joi.string().min(6).max(1024).required()\n})\n\nrouter.post('/register', async (req, res) => {\n\n    const {error} =  schemaRegister.validate(req.body);\n  \n    if (error) {\n      return  res.status(400).json( {error: error.details[0].message});\n    }\n\n    const existeElEmail = await User.findOne({email : req.body.email})\n\n  if (existeElEmail) {\n      \n    return  res.status(400).json( {error: true , mensaje:'email ya registrado'});\n  }\n \n  const saltos = await bcrypt.genSalt(10);\n\n   const password = await bcrypt.hash(req.body.password , saltos)\n    const user = new User({\n        name: req.body.name ,\n        email: req.body.email ,\n        // password : password\n        password\n\n    })\n    try {\n        const UserDB = await user.save();\n        res.json({\n            error: null,\n            data: UserDB\n        })\n    } catch (error) {\n        res.status(400).json({error})\n    }\n  \n})\nrouter.post('/login', async (req, res) => {\n    \n    const { error } = schemaLogin.validate(req.body);\n    if (error) return res.status(400).json({ error: error.details[0].message })\n\n    const user = await User.findOne({ email: req.body.email });\n\n    if (!user) return res.status(400).json({ error: 'Usuario no encontrado' });\n\n    const validPassword = await bcrypt.compare(req.body.password, user.password);\n    \n    if (!validPassword) return res.status(400).json({ error: 'contrase\xf1a no v\xe1lida' })\n\n    const token = jwt.sign({ \n        \n        name: user.name,\n        id: user._id, \n    } , \n   \n    process.env.TOKEN_SECRET)\n  // Mandamos un header como respuesta con el token\n    res.header('auth-token', token).json({\n        error: null,\n        data: {token}\n    })\n})\nmodule.exports = router;\n\n")),(0,s.yg)("p",null,"en la carpeta routes creamos el archivo validate-token.js"),(0,s.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.yg)("div",{parentName:"div",className:"admonition-heading"},(0,s.yg)("h5",{parentName:"div"},(0,s.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,s.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicacion ")),(0,s.yg)("div",{parentName:"div",className:"admonition-content"},(0,s.yg)("p",{parentName:"div"},"Es un archivo con el middleware para validar el token "),(0,s.yg)("p",{parentName:"div"},"Verifica que el token NO FUE INVENTADO"))),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const jwt = require('jsonwebtoken')\n\n// middleware para validar token (rutas protegidas)\nconst verifyToken = (req, res, next) => {\n    // Va a leer el header \n    const token = req.header('auth-token')\n    // Si no existe el token\n    if (!token) return res.status(401).json({ error: 'Acceso denegado' })\n    try {\n        // Verifica si el token es valido utilizando el String secreto\n        // verify(token , string secreto\n        const verified = jwt.verify(token, process.env.TOKEN_SECRET)\n        // Creamos un nuevo requirimiento con la verificacion\n        req.user = verified\n        // Si esta todo bien , hacemos el next()\n        next() // continuamos\n    } catch (error) {\n        res.status(400).json({error: 'token no es v\xe1lido'})\n    }\n}\n\nmodule.exports = verifyToken;\n\n")),(0,s.yg)("h2",{id:"17--rutas-protegidas"},"17- Rutas protegidas"),(0,s.yg)("p",null,"Creamos un archivo llamado admin.js en la carpeta routes"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const router = require('express').Router();\n\nrouter.get('/', (req, res) => {\n    res.json({\n        error: null,\n        data: {\n            title: 'mi ruta protegida',\n            user: req.user\n        }\n    })\n})\n\nmodule.exports = router\n\n")),(0,s.yg)("p",null,"index.js:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyparser = require('body-parser');\nrequire('dotenv').config()\nconst app = express();\n\n// capturar body\napp.use(bodyparser.urlencoded({ extended: false }));\napp.use(bodyparser.json());\n\n// Conexi\xf3n a Base de datos\nconst uri = `mongodb+srv://${process.env.USER}:${process.env.PASSWORD}@mascota.xcibc.mongodb.net/${process.env.DBNAME}?retryWrites=true&w=majority`;\nconst option =   { useNewUrlParser: true, useUnifiedTopology: true }\nmongoose.connect(uri,option)\n.then(() => console.log('Base de datos conectada'))\n.catch(e => console.log('error db:', e))\n\n// import routes\nconst authRoutes = require('./routes/auth');\nconst dashboadRoutes = require('./routes/admin');\nconst verifyToken = require('./routes/validate-token');\n\n// route middlewares\n// Al ir al /api/admin o a cualquier ruta de dashboadRoutes , se ejecuta el middleware (validate-token) y si la validacion que realiza es correcta, va a la ruta que se solicito.\napp.use('/api/admin', verifyToken, dashboadRoutes);\napp.use('/api/user' , authRoutes)\n\napp.get('/', (req, res) => {\n    res.json({\n        estado: true,\n        mensaje: 'funciona!'\n    })\n});\n\n// iniciar server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n    console.log(`servidor andando en: ${PORT}`)\n})\n\n\n")),(0,s.yg)("p",null,"Probamos con postman:"),(0,s.yg)("p",null,"GET http://localhost:3001/api/admin"),(0,s.yg)("p",null,"Resultado: Acceso denegado"),(0,s.yg)("p",null,"Pero si configuramos una nueva cabecera(header)"),(0,s.yg)("p",null,"En postman:"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},"Headers - A\xf1adir key ")),(0,s.yg)("p",null,"nombre: auth-token"),(0,s.yg)("p",null,"value: el valor del token (ej. eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoianVhbml0byIsImlkIjoiNjIxZDE4ZjVmZmJhNzBiMmQ5NzA5NWM1IiwiaWF0IjoxNjQ2MDc1ODA1fQ.0JQ6BRa-QaHebLSnsXXqNbaluxtmlP2VlzgxBE4t6lE)"))}p.isMDXComponent=!0}}]);