"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[5267],{5680:(e,a,n)=>{n.d(a,{xA:()=>u,yg:()=>g});var i=n(6540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,i,l=function(e,a){if(null==e)return{};var n,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var t=i.createContext({}),c=function(e){var a=i.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},u=function(e){var a=c(e.components);return i.createElement(t.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},m=i.forwardRef((function(e,a){var n=e.components,l=e.mdxType,o=e.originalType,t=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,g=d["".concat(t,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(g,r(r({ref:a},u),{},{components:n})):i.createElement(g,r({ref:a},u))}));function g(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var t in a)hasOwnProperty.call(a,t)&&(s[t]=a[t]);s.originalType=e,s[d]="string"==typeof e?e:l,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},815:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(8168),l=(n(6540),n(5680));const o={sidebar_position:9},r="Extra #02",s={unversionedId:"Node/extra02",id:"Node/extra02",title:"Extra #02",description:"02",source:"@site/docs/Node/extra02.md",sourceDirName:"Node",slug:"/Node/extra02",permalink:"/documentacion/docs/Node/extra02",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Node/extra02.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"Node",previous:{title:"Extra",permalink:"/documentacion/docs/Node/extra"},next:{title:"Extra #03",permalink:"/documentacion/docs/Node/extra03"}},t={},c=[{value:"Controlador",id:"controlador",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"Endpoint y controlador",id:"endpoint-y-controlador",level:2},{value:"Controlador",id:"controlador-1",level:4},{value:"Endpoint",id:"endpoint-1",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Bucle de eventos",id:"bucle-de-eventos",level:2},{value:"Creaci\xf3n de hilos adicionales (Primera opci\xf3n)",id:"creaci\xf3n-de-hilos-adicionales-primera-opci\xf3n",level:4},{value:"Pool de hilos",id:"pool-de-hilos",level:4},{value:"Creaci\xf3n de hilos adicionales (Segunda opci\xf3n)",id:"creaci\xf3n-de-hilos-adicionales-segunda-opci\xf3n",level:4},{value:"Conceptos de Node",id:"conceptos-de-node",level:2},{value:"Blocking",id:"blocking",level:3},{value:"Non-Blocking",id:"non-blocking",level:3},{value:"Operaciones s\xedncronas y as\xedncronas",id:"operaciones-s\xedncronas-y-as\xedncronas",level:3},{value:"Callbacks",id:"callbacks",level:3},{value:"Event loop",id:"event-loop",level:3},{value:"Call stack",id:"call-stack",level:3},{value:"Callback Queque",id:"callback-queque",level:3},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Brevemente explicar\xe9 que hace el snippet de c\xf3digo mostrado.",id:"brevemente-explicar\xe9-que-hace-el-snippet-de-c\xf3digo-mostrado",level:4},{value:"Fase 1",id:"fase-1",level:5},{value:"Fase 2",id:"fase-2",level:5},{value:"Fase 3",id:"fase-3",level:5},{value:"Fase 4",id:"fase-4",level:5},{value:"Fase 5",id:"fase-5",level:5},{value:"Fase 6",id:"fase-6",level:5},{value:"Fase 7",id:"fase-7",level:5},{value:"Fase 8",id:"fase-8",level:5},{value:"Fase 9",id:"fase-9",level:5},{value:"Fase 10",id:"fase-10",level:5},{value:"Conceptos de redes",id:"conceptos-de-redes",level:2},{value:"IP",id:"ip",level:3},{value:"Direcciones IPv4",id:"direcciones-ipv4",level:5},{value:"Direcciones IPv6",id:"direcciones-ipv6",level:5},{value:"Componentes de una direcci\xf3n IP",id:"componentes-de-una-direcci\xf3n-ip",level:5},{value:"M\xe1scara de subred",id:"m\xe1scara-de-subred",level:5},{value:"Notaci\xf3n CIDR",id:"notaci\xf3n-cidr",level:5},{value:"Tipos de direcciones IP",id:"tipos-de-direcciones-ip",level:5},{value:"Ejemplo de red local",id:"ejemplo-de-red-local",level:5},{value:"Funciones de las direcciones IP",id:"funciones-de-las-direcciones-ip",level:5},{value:"Subnet",id:"subnet",level:3},{value:"Calcular subredes y hosts",id:"calcular-subredes-y-hosts",level:5},{value:"DNS",id:"dns",level:3},{value:"Componentes Clave de DNS",id:"componentes-clave-de-dns",level:5},{value:"Puerto",id:"puerto",level:3},{value:"\xbfPara Qu\xe9 Sirven los Puertos?",id:"para-qu\xe9-sirven-los-puertos",level:5},{value:"\xbfQu\xe9 Significa Mapear un Puerto?",id:"qu\xe9-significa-mapear-un-puerto",level:4},{value:"\xbfC\xf3mo Funciona el Mapeo de Puertos?",id:"c\xf3mo-funciona-el-mapeo-de-puertos",level:5},{value:"\xbfPara Qu\xe9 Sirve Mapear un Puerto?",id:"para-qu\xe9-sirve-mapear-un-puerto",level:5},{value:"allowPublicKeyRetrieval",id:"allowpublickeyretrieval",level:2},{value:"Analog\xeda",id:"analog\xeda",level:4},{value:"Situaci\xf3n sin allowPublicKeyRetrieval:",id:"situaci\xf3n-sin-allowpublickeyretrieval",level:5},{value:"Situaci\xf3n con allowPublicKeyRetrieval:",id:"situaci\xf3n-con-allowpublickeyretrieval",level:5},{value:"Uso en una cadena de conexi\xf3n",id:"uso-en-una-cadena-de-conexi\xf3n",level:4},{value:"Plantillas Go (Golang templates)",id:"plantillas-go-golang-templates",level:2},{value:"Analog\xeda",id:"analog\xeda-1",level:4},{value:"Ejemplo T\xe9cnico Paso a Paso:",id:"ejemplo-t\xe9cnico-paso-a-paso",level:4},{value:"1- Definir una Plantilla",id:"1--definir-una-plantilla",level:5},{value:"2- Definir una Plantilla",id:"2--definir-una-plantilla",level:5},{value:"3- Ejecutar la Plantilla",id:"3--ejecutar-la-plantilla",level:5},{value:"Detalles T\xe9cnicos",id:"detalles-t\xe9cnicos",level:5},{value:"Definici\xf3n de Marcadores de Posici\xf3n:",id:"definici\xf3n-de-marcadores-de-posici\xf3n",level:5},{value:"Parsear Plantilla:",id:"parsear-plantilla",level:5},{value:"Datos:",id:"datos",level:5},{value:"Ejecuci\xf3n de Plantilla:",id:"ejecuci\xf3n-de-plantilla",level:5},{value:"Client-Side Rendering (CSR)",id:"client-side-rendering-csr",level:2},{value:"Proceso de CSR",id:"proceso-de-csr",level:4},{value:"Ventajas de CSR",id:"ventajas-de-csr",level:4},{value:"Desventajas de CSR",id:"desventajas-de-csr",level:4},{value:"Analog\xeda",id:"analog\xeda-2",level:4},{value:"Ejemplo de Estructura de Proyecto en React",id:"ejemplo-de-estructura-de-proyecto-en-react",level:4}],u={toc:c},d="wrapper";function p(e){let{components:a,...n}=e;return(0,l.yg)(d,(0,i.A)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"extra-02"},"Extra #02"),(0,l.yg)("h2",{id:"controlador"},"Controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En el contexto de una API REST, un controlador es una parte del software que gestiona las solicitudes HTTP entrantes y se encarga de procesarlas. Los controladores son una parte fundamental de la arquitectura de una aplicaci\xf3n web basada en REST."),(0,l.yg)("li",{parentName:"ul"},"En el patr\xf3n de dise\xf1o Modelo-Vista-Controlador (MVC), que es com\xfanmente utilizado en el desarrollo web, un controlador es responsable de recibir las solicitudes del cliente, procesar la l\xf3gica de la aplicaci\xf3n y luego enviar una respuesta al cliente."),(0,l.yg)("li",{parentName:"ul"},"En el caso espec\xedfico de una API REST, el controlador maneja las solicitudes HTTP como GET, POST, PUT o DELETE, y decide qu\xe9 acci\xf3n tomar en funci\xf3n de la operaci\xf3n solicitada y de los par\xe1metros proporcionados."),(0,l.yg)("li",{parentName:"ul"},"Un controlador en una API REST puede ser responsable de realizar diversas tareas, como validar los datos de entrada, interactuar con la capa de modelo para acceder a la base de datos, ejecutar la l\xf3gica de negocio y formatear la respuesta que se enviar\xe1 al cliente. "),(0,l.yg)("li",{parentName:"ul"},"En resumen, el controlador act\xfaa como un intermediario entre la entrada HTTP (solicitud del cliente) y la l\xf3gica de la aplicaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en un sistema de gesti\xf3n de tareas basado en una API REST, un controlador podr\xeda manejar solicitudes para crear una nueva tarea, obtener la lista de tareas, actualizar una tarea existente o eliminar una tarea."),(0,l.yg)("li",{parentName:"ul"},"En diferentes marcos de desarrollo para aplicaciones web, como Express.js para Node.js, Spring MVC para Java o Django para Python, los controladores suelen implementarse de manera espec\xedfica seg\xfan la sintaxis y las convenciones del marco utilizado.")),(0,l.yg)("h2",{id:"endpoint"},"Endpoint"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'En el contexto de una API (Interfaz de Programaci\xf3n de Aplicaciones), un "endpoint" se refiere a un punto final o una URL espec\xedfica que se puede usar para realizar operaciones sobre recursos o servicios.'),(0,l.yg)("li",{parentName:"ul"},"En otras palabras, un endpoint es una interfaz expuesta por una API, a trav\xe9s de la cual los clientes pueden realizar solicitudes y obtener respuestas."),(0,l.yg)("li",{parentName:"ul"},"Cada endpoint est\xe1 asociado con una operaci\xf3n particular y representa una acci\xf3n espec\xedfica que se puede realizar en la API. Los cuatro m\xe9todos HTTP principales utilizados en los endpoints de una API REST son:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"GET: Utilizado para recuperar informaci\xf3n de un recurso."),(0,l.yg)("li",{parentName:"ul"},"POST: Utilizado para crear un nuevo recurso."),(0,l.yg)("li",{parentName:"ul"},"PUT o PATCH: Utilizados para actualizar un recurso existente."),(0,l.yg)("li",{parentName:"ul"},"DELETE: Utilizado para eliminar un recurso."))),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en una API de gesti\xf3n de usuarios, podr\xedas tener endpoints como:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"GET /users: Para obtener la lista de usuarios."),(0,l.yg)("li",{parentName:"ul"},"GET /users/{id}: Para obtener detalles de un usuario espec\xedfico."),(0,l.yg)("li",{parentName:"ul"},"POST /users: Para crear un nuevo usuario."),(0,l.yg)("li",{parentName:"ul"},"PUT /users/{id}: Para actualizar un usuario existente."),(0,l.yg)("li",{parentName:"ul"},"DELETE /users/{id}: Para eliminar un usuario.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Cada uno de estos ejemplos representa un endpoint diferente que permite realizar una operaci\xf3n espec\xedfica en la API. La estructura y la sem\xe1ntica de los endpoints suelen seguir convenciones y patrones definidos por el dise\xf1o de la API y las mejores pr\xe1cticas RESTful.")))),(0,l.yg)("h2",{id:"endpoint-y-controlador"},"Endpoint y controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un endpoint y un controlador son conceptos relacionados en el contexto de una API REST, pero representan conceptos ligeramente diferentes.")),(0,l.yg)("h4",{id:"controlador-1"},"Controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El controlador es una componente de la aplicaci\xf3n que maneja las solicitudes HTTP."),(0,l.yg)("li",{parentName:"ul"},"Es responsable de procesar la l\xf3gica de la aplicaci\xf3n y decidir c\xf3mo responder a las solicitudes."),(0,l.yg)("li",{parentName:"ul"},"En el contexto de un marco de desarrollo web (por ejemplo, Express.js, Spring MVC, Django), el controlador puede ser una clase o funci\xf3n espec\xedfica que se encarga de manejar un conjunto particular de rutas o URL.")),(0,l.yg)("h4",{id:"endpoint-1"},"Endpoint"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un endpoint es una URL espec\xedfica a la que se puede enviar una solicitud HTTP para interactuar con la API."),(0,l.yg)("li",{parentName:"ul"},"Cada endpoint est\xe1 asociado con una operaci\xf3n espec\xedfica, como obtener datos, crear recursos, actualizar recursos o eliminar recursos."),(0,l.yg)("li",{parentName:"ul"},"Los endpoints son las rutas espec\xedficas que un cliente puede utilizar para realizar operaciones sobre recursos en la API."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en una API de gesti\xf3n de tareas, podr\xedas tener endpoints como /tasks para obtener la lista de tareas, /tasks/:id para obtener detalles de una tarea espec\xedfica, etc.")),(0,l.yg)("h4",{id:"resumen"},"Resumen"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En resumen, el controlador es la l\xf3gica que maneja las solicitudes HTTP y decide c\xf3mo responder, mientras que el endpoint es la URL espec\xedfica que representa una operaci\xf3n o recurso dentro de la API. "),(0,l.yg)("li",{parentName:"ul"},"En muchos casos, en el desarrollo de una API REST, hay una correspondencia directa entre los controladores y los endpoints, ya que cada endpoint suele ser manejado por un controlador espec\xedfico.")),(0,l.yg)("h2",{id:"bucle-de-eventos"},"Bucle de eventos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al usar Node.js, se introduce un un curioso componente denominado el bucle de eventos que constituye un elemento b\xe1sico en la plataforma."),(0,l.yg)("li",{parentName:"ul"},"No es algo exclusivo de Node.js. Tambi\xe9n el browser tiene su propio bucle de eventos que, aunque con distinta implementaci\xf3n, b\xe1sicamente funciona igual que el de Node.js."),(0,l.yg)("li",{parentName:"ul"},"Las instrucciones de un programa son ejecutadas secuencialmente, de manera que hay que esperar a que una instrucci\xf3n finalice para que comience la siguiente. "),(0,l.yg)("li",{parentName:"ul"},"Cuando llamamos a funciones, de la propia aplicaci\xf3n o de APIs externas, tenemos que esperar hasta que finalice su ejecuci\xf3n y se devuelva el control al elemento que la llam\xf3. "),(0,l.yg)("li",{parentName:"ul"},"Una llamada a una funci\xf3n significa colocar dicha funci\xf3n en la pila de llamadas del proceso. Cuando la funci\xf3n termina su ejecuci\xf3n y devuelve el control al elemento que la llam\xf3, se elimina de la pila."),(0,l.yg)("li",{parentName:"ul"},"Si la funci\xf3n que se llama requiere mucho tiempo en resolverse, ya sea porque realice c\xe1lculos pesados y utilice mucho tiempo de CPU o por que se trate de una funci\xf3n de entrada/salida, las cuales suelen ser bastante lentas, el hilo donde se ejecuta quedar\xe1 bloqueado durante todo ese tiempo. Dependiendo del tipo de aplicaci\xf3n esto puede ser admisible o no."),(0,l.yg)("li",{parentName:"ul"},"Pensemos en una aplicaci\xf3n de escritorio que obtiene datos mediante peticiones a un servicio web. No sabemos cu\xe1nto tiempo tardar\xe1 en resolverse las peticiones que hagamos, en ocasiones puede que sea inmediato, pero otras veces puede tardar varios segundos. Hasta puede que d\xe9 un fallo por timeout y tengamos que esperar unos minutos."),(0,l.yg)("li",{parentName:"ul"},"Pensemos ahora en un servidor web que lanza frecuentemente peticiones SQL a una base de datos. Tampoco podemos saber si se resolver\xe1n r\xe1pidamente o tardar\xe1n un tiempo considerable. Si durante el tiempo que est\xe1 consultando la base de datos no puede atender a ninguna petici\xf3n m\xe1s, mal asunto."),(0,l.yg)("li",{parentName:"ul"},"Ninguna de las aplicaciones anteriores estar\xeda bien dise\xf1ada si su fluidez dependiera de los tiempos invertidos en las peticiones. Es decir, si las llamadas de entrada/salida (peticiones) se ejecutaran en el hilo principal de la aplicaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"La soluci\xf3n, obviamente, pasa por la creaci\xf3n de hilos adicionales que traten dichas llamadas de entrada/salida. Existen dos estrategias fundamentales para la creaci\xf3n de dichos hilos adicionales.")),(0,l.yg)("h4",{id:"creaci\xf3n-de-hilos-adicionales-primera-opci\xf3n"},"Creaci\xf3n de hilos adicionales (Primera opci\xf3n)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La primera, llam\xe9mosla \u201ccl\xe1sica\u201d, consiste en crear nuevos hilos (o procesos) donde se ejecutar\xe1n las funciones \u201clentas\u201d de entrada/salida, liberando al hilo principal que puede continuar con su tarea; recibir nuevas peticiones en el caso del servidor o atender las \xf3rdenes del usuario en el caso de la aplicaci\xf3n de escritorio. El resultado de las operaciones de entrada/salida, una vez resueltas, se pasar\xe1n al hilo principal mediante alg\xfan mecanismo de comunicaci\xf3n entre hilos. Teniendo en cuenta que los hilos de un proceso comparten la memoria no es dif\xedcil colocar el resultado en el hilo principal."),(0,l.yg)("li",{parentName:"ul"},"Esta estrategia ha sido ampliamente usada en el dise\xf1o de servidores. El hilo principal del proceso escucha en un socket y cuando entra una nueva petici\xf3n crea un nuevo hilo para procesarla y vuelve a escuchar en el socket para repetir el proceso con las sucesivas peticiones. El problema de este enfoque es la escalabilidad, es decir, cuando el n\xfamero de peticiones (casi) simult\xe1neas aumenta, tambi\xe9n lo hace el n\xfamero de hilos secundarios, pudiendo llegar a colapsar el servidor por sobrecarga de la CPU o por agotamiento de la memoria. "),(0,l.yg)("li",{parentName:"ul"},"Para evitar este problema los servidores dise\xf1ados con esta estrategia suelen limitar el m\xe1ximo n\xfamero de hilos secundarios que el servidor puede crear. "),(0,l.yg)("li",{parentName:"ul"},"Tambi\xe9n suelen crear, al arrancar el servidor, un pool de hilos (o procesos) para eliminar el tiempo que se tarda en crear un hilo cuando llega una nueva petici\xf3n."),(0,l.yg)("li",{parentName:"ul"})),(0,l.yg)("h4",{id:"pool-de-hilos"},"Pool de hilos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Un "pool de hilos" es un conjunto predefinido o din\xe1mico de hilos de ejecuci\xf3n que est\xe1n disponibles para realizar tareas en un programa o sistema. '),(0,l.yg)("li",{parentName:"ul"},"La idea detr\xe1s de un pool de hilos es tener un grupo de hilos listos para ser utilizados, en lugar de crear y destruir hilos cada vez que se necesita realizar una tarea."),(0,l.yg)("li",{parentName:"ul"},"Cuando un servidor (o cualquier programa) necesita manejar m\xfaltiples solicitudes simult\xe1neas, puede ser ineficiente crear un nuevo hilo para cada solicitud, ya que la creaci\xf3n y destrucci\xf3n de hilos conlleva un costo en t\xe9rminos de tiempo y recursos del sistema. En lugar de eso, se puede utilizar un pool de hilos para tener un conjunto de hilos ya creados y disponibles para gestionar solicitudes entrantes."),(0,l.yg)("li",{parentName:"ul"},"Cuando llega una nueva solicitud, el sistema toma un hilo disponible del pool y lo utiliza para manejar esa solicitud. Una vez que se completa la tarea, el hilo se devuelve al pool en lugar de ser destruido. Esto ayuda a reducir la sobrecarga asociada con la creaci\xf3n y destrucci\xf3n repetitiva de hilos, mejorando la eficiencia del sistema."),(0,l.yg)("li",{parentName:"ul"},'Es importante destacar que tambi\xe9n existen "pools de procesos", que funcionan de manera similar, pero en lugar de hilos, utilizan procesos independientes. La elecci\xf3n entre un pool de hilos o un pool de procesos depende de la arquitectura y los requisitos espec\xedficos del sistema.')),(0,l.yg)("h4",{id:"creaci\xf3n-de-hilos-adicionales-segunda-opci\xf3n"},"Creaci\xf3n de hilos adicionales (Segunda opci\xf3n)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La segunda soluci\xf3n no implica la creaci\xf3n de un nuevo hilo por cada nueva llamada a una operaci\xf3n de entrada/salida. "),(0,l.yg)("li",{parentName:"ul"},"Se trata de registrar handlers o funciones callbacks asociados a eventos que se producen en la interfaz gr\xe1fica. Dicho registro se lleva a cabo en un hilo distinto al principal. Cuando se produce un evento dicho hilo notifica al hilo principal que ejecute la funci\xf3n de callback asociada al evento."),(0,l.yg)("li",{parentName:"ul"},"Es una estrategia utilizada desde hace mucho tiempo en el dise\xf1o de interfaces gr\xe1ficas. "),(0,l.yg)("li",{parentName:"ul"},"De esta forma las llamadas a una operaci\xf3n de entrada/salida devuelven el control inmediatamente sin necesidad de haber completado la operaci\xf3n de lectura o escritura en el recurso. Cuando finalizan generan un evento que notifica al hilo que las llam\xf3 para que las procese. Como vemos el mecanismo es similar al de los eventos generados por los widgets de una interfaz gr\xe1fica, solo que la generaci\xf3n de eventos la realiza el sistema operativo cuando la operaci\xf3n ha concluido."),(0,l.yg)("li",{parentName:"ul"},"El siguiente gr\xe1fico proporciona un modelo que sirve para explicar el funcionamiento del bucle de eventos en ambas tecnolog\xedas:")),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://juandarodriguez.es/images/bucle_de_eventos.png",alt:"Bucle de eventos"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Cuando se lleva a cabo la ejecuci\xf3n de la aplicaci\xf3n, cada vez que se invoca una funci\xf3n se a\xf1ade a la pila de llamadas. Cuando las funciones terminan y devuelven el control, se sacan de la pila. Si todas las llamadas fuesen bloqueantes (s\xedncronas), llega un momento en que la pila se vac\xeda completamente que se corresponder\xe1 con el fin del programa."),(0,l.yg)("li",{parentName:"ul"},"Pero tanto en Node.js como en Chrome desde cualquiera de las funciones de la pila puede ocurrir que se realicen llamadas que responden al siguiente patr\xf3n:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"function funcionX(){\n     // c\xf3digo s\xedncrono\n\n     funcAsincrona(callback(data), args);\n\n     // c\xf3digo s\xedncrono\n }\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Lo normal es que la funci\xf3n as\xedncrona funcAs\xedcrona() sea mucho m\xe1s lenta que la propia funci\xf3n funcionX(), y como es no bloqueante el c\xf3digo sigue ejecut\xe1ndose finalizando la funci\xf3n funcionX() antes que la funci\xf3n funcAsincrona()."),(0,l.yg)("li",{parentName:"ul"},"La funci\xf3n funcionX() desaparece de la pila y se ejecuta la que queda en su cima. "),(0,l.yg)("li",{parentName:"ul"},"Por otro lado, la funci\xf3n as\xedncrona se est\xe1 ejecutando en otro hilo y cuando finaliza se a\xf1ade su funci\xf3n callback asociada a la cola de eventos, pas\xe1ndole como argumento el resultado de la funci\xf3n as\xedncrona."),(0,l.yg)("li",{parentName:"ul"},"Mientras tanto, el bucle de eventos vigila por un lado que no haya m\xe1s funciones en la pila de llamadas y por otro la existencia de callbacks en la cola de eventos. Cuando la pila est\xe9 vac\xeda, el bucle de eventos colocar\xe1 en dicha pila el primer callback de la cola de eventos. Por supuesto, las funciones de callback, que no dejan de ser funciones de Javascript, tambi\xe9n pueden hacer llamadas as\xedncronas a la API."),(0,l.yg)("li",{parentName:"ul"},"El proceso se repite indefinidamente hasta que no haya m\xe1s elementos en el hilo donde residen las API\u2019s (Es el cuadrado que dice Web Apis Chrome o Node.js API, es el hijo \u201csecundario\u201d de la segunda soluci\xf3n). Es decir, hasta que no haya m\xe1s posibilidades de generaci\xf3n de eventos. "),(0,l.yg)("li",{parentName:"ul"},"Puede ocurrir que el proceso se repita indefinidamente y s\xf3lo finalice abortando o cerrando la aplicaci\xf3n. Es el caso de las aplicaciones de escritorio y los servidores.")))),(0,l.yg)("h2",{id:"conceptos-de-node"},"Conceptos de Node"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Node, trabaja con un solo hilo. Esto significa que solo ejecutar\xe1 un proceso a la vez."),(0,l.yg)("li",{parentName:"ul"},"Como desarrolladores de Javascript debemos tener mucho cuidado al programar de no bloquear este \xfanico hilo. Aqu\xed entra la parte de Blocking y Non-Blocking.")),(0,l.yg)("h3",{id:"blocking"},"Blocking"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es b\xe1sicamente esperar a que un proceso termine para despu\xe9s continuar con la ejecuci\xf3n del programa. Esto se hace usando operaciones s\xedncronas, ciclos infinitos, etc.")),(0,l.yg)("h3",{id:"non-blocking"},"Non-Blocking"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Permite que tu programa siga corriendo sin la obligaci\xf3n de esperar a que un proceso termine su ejecuci\xf3n. Esto se lleva a cabo usando operaciones as\xedncronas.")),(0,l.yg)("h3",{id:"operaciones-s\xedncronas-y-as\xedncronas"},"Operaciones s\xedncronas y as\xedncronas"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las operaciones s\xedncronas nos obligan a esperar a que la tarea termine por completo su ejecuci\xf3n. En la librer\xeda de nodejs, muchas de las operaciones cuentan con m\xe9todos s\xedncronos y as\xedncronos a la vez."),(0,l.yg)("li",{parentName:"ul"},"Las operaciones as\xedncronas nos dan la capacidad de diferir una tarea para seguir ejecutando las dem\xe1s. Es decir, el programa se encuentra con una operaci\xf3n que va a llevar tiempo en completarse, entonces deja que esta corra y continua con lo dem\xe1s. Una vez se complete la operaci\xf3n en espera, la ejecuta.")),(0,l.yg)("h3",{id:"callbacks"},"Callbacks"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los callbacks son funciones que se pasan como par\xe1metro de otra funci\xf3n. Son parte esencial de las operaciones as\xedncronas."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, al escribir una funci\xf3n que se encarga de leer un archivo del disco duro, puedo pasarle una funci\xf3n o mejor llamado callback, el cual va a ser llamado una vez termine de leer el archivo y va a ejecutar lo que est\xe9 dentro de \xe9l. Por ello, el nombre callback.")),(0,l.yg)("h3",{id:"event-loop"},"Event loop"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El event loop es el que se encarga de implementar las operaciones as\xedncronas o el non-blocking. El event loop corre en el \xfanico hilo que existe en Node y como mencionamos anteriormente, al bloquear el \xfanico hilo de node, estamos bloqueando el event loop.")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Importante: Libuv (una librer\xeda escrita en C), es el que permite que el event loop funcione y todo el comportamiento as\xedncrono en Node. Puedes conocer m\xe1s sobre esta librer\xeda ingresando a su sitio oficial.")))),(0,l.yg)("h3",{id:"call-stack"},"Call stack"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Cada vez que una funci\xf3n va a ser ejecutada pasa por el call stack (pila de llamadas) . Como ya sabemos, al trabajar con operaciones as\xedncronas, estas poseen callbacks, que se ejecutar\xe1n una vez el proceso de la operaci\xf3n haya terminado y que se ir\xe1n a\xf1adiendo al callback queue.")),(0,l.yg)("h3",{id:"callback-queque"},"Callback Queque"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Aqu\xed se agregan los callback o funciones que se ejecutan una vez las operaciones as\xedncronas hayan terminado. Se utiliza el m\xe9todo FIFO (first input, first output), traducido, primero en entrar, primero en salir."),(0,l.yg)("li",{parentName:"ul"},"El event loop es el que se encarga de revisar que el call stack este vac\xedo para a\xf1adir lo que est\xe1 dentro del callback queue y ejecutarlo.")),(0,l.yg)("h4",{id:"ejemplo"},"Ejemplo"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:828/format:webp/1*Wa6DuSyM3yzvDWqc43-ejA.png",alt:"callback queque"})),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Linea 1: Obtenemos la librer\xeda File System de Nodejs para poder leer un archivo del disco duro."),(0,l.yg)("li",{parentName:"ul"},"Linea 3: Implementamos la operaci\xf3n as\xedncrona readFile, el cual recibir\xe1 como par\xe1metros la ruta del archivo y el callback."),(0,l.yg)("li",{parentName:"ul"},"Linea 4: Se encuentra un timer, en este caso, setTimeout la cual es una operaci\xf3n as\xedncrona y posee una funci\xf3n llamada timeout2 que se ejecutar\xe1 despu\xe9s de 4 segundos."),(0,l.yg)("li",{parentName:"ul"},"Linea 9: Operaci\xf3n s\xedncrona que imprimir\xe1 en consola el mensaje correspondiente."),(0,l.yg)("li",{parentName:"ul"},"Linea 11: Un timer que posee una funci\xf3n llamada timeout que se ejecutar\xe1 despu\xe9s de 5 segundos.")))),(0,l.yg)("h4",{id:"brevemente-explicar\xe9-que-hace-el-snippet-de-c\xf3digo-mostrado"},"Brevemente explicar\xe9 que hace el snippet de c\xf3digo mostrado."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Bueno, pasemos a explicar todo el trabajo que Nodejs hace para correr el programa que escribimos con el siguiente gr\xe1fico:")),(0,l.yg)("h5",{id:"fase-1"},"Fase 1"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*_vTb8PdvbS9bYy03duP0Pw.png",alt:"Fase 1 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Primeramente, se agrega la operaci\xf3n readFile al call stack, debido a que es la primera del programa."),(0,l.yg)("li",{parentName:"ul"},"Al ser una operaci\xf3n as\xedncrona, esta se mueve a la secci\xf3n de APIs donde ahi esperaremos a que las herramientas encargadas hagan lo necesario para completar la tarea.")),(0,l.yg)("h5",{id:"fase-2"},"Fase 2"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*0UcfZpRNXp-OEjJSsqcaLg.png",alt:"Fase 2 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El programa estar\xe1 esperando a que el archivo termine de leerse, pero \xe9l continuar\xe1 con la ejecuci\xf3n del programa. En este caso, se encuentra una operaci\xf3n s\xedncrona (se ejecuta de manera muy r\xe1pida) que imprime en consola el mensaje.")),(0,l.yg)("h5",{id:"fase-3"},"Fase 3"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*_NhUtsMan3PQhEKNOCDQnA.png",alt:"Fase 3 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Ahora, vemos que la operaci\xf3n de leer el archivo termin\xf3. Por lo tanto, pasa al callback queue. Tambi\xe9n, vemos que en el call stack se encuentra un timer. Esto porque es lo que esta despu\xe9s del console.log anterior.")),(0,l.yg)("h5",{id:"fase-4"},"Fase 4"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZQ72pbgAO383hNjxvmNtEA.png",alt:"Fase 4 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El timer posee una funci\xf3n llamada timeout que se va a ejecutar despu\xe9s de 5 segundos e imprimir\xe1 en consola un mensaje. Por ello, pasa a la secci\xf3n de APIs y espera los 5 segundos. Ahora, el event loop revisa si esta vac\xedo el call stack para ejecutar el callback de la operaci\xf3n readFile.")),(0,l.yg)("h5",{id:"fase-5"},"Fase 5"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*6tGSp9iraXieXS_NSrAOwg.png",alt:"Fase 5 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al ejecutar el callback de la operaci\xf3n readFile nos encontramos con otra operaci\xf3n as\xedncrona. Un timer, con una funci\xf3n llamada timeout2, la cual se ejecutar\xe1 dentro de 4 segundos. Seguimos esperando a que pasen los 5 segundos del primer timer.")),(0,l.yg)("h5",{id:"fase-6"},"Fase 6"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*D8u5VYiddpdEH5Fds4bzIQ.png",alt:"Fase 6 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se agrega la funci\xf3n timeout2 a la secci\xf3n de APIs a esperar que los segundos pasen.")),(0,l.yg)("h5",{id:"fase-7"},"Fase 7"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZmaLd4mE5n4YjTCI1ChouA.png",alt:"Fase 7 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Podemos observar que la funci\xf3n timeout2 ya termin\xf3 su tiempo. Por lo tanto, pasa al callback queue y como el call stack no contiene ninguna operaci\xf3n en ejecuci\xf3n, lo ejecuta.")),(0,l.yg)("h5",{id:"fase-8"},"Fase 8"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*2egjCVogk59WODAzrydwIg.png",alt:"Fase 8 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se ejecuta el callback de la funcion timeout2, el cual imprime en consola el archivo en formato JSON. Tambi\xe9n, vemos que la operaci\xf3n timeout culmino y se agrega al callback queue.")),(0,l.yg)("h5",{id:"fase-9"},"Fase 9"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*uriotJoRdulyfvOOQCFhVg.png",alt:"Fase 9 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Finalmente, el event loop vuelve a revisar el call stack y ejecuta el callback de la funci\xf3n que estaba en el callback queue.")),(0,l.yg)("h5",{id:"fase-10"},"Fase 10"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al no encontrar nada m\xe1s, el programa se acaba. El resultado final del programa ser\xeda el siguiente:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-powershell"},"Hello Event Loop\n{name: Fernando Hern\xe1ndez, age: 21}\nHi, I\u2019m executed\n\n")),(0,l.yg)("h2",{id:"conceptos-de-redes"},"Conceptos de redes"),(0,l.yg)("h3",{id:"ip"},"IP"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Una direcci\xf3n IP (Internet Protocol) es un identificador \xfanico asignado a cada dispositivo conectado a una red que utiliza el Protocolo de Internet para comunicarse. Las direcciones IP permiten que los dispositivos en una red local o en Internet puedan encontrarse y comunicarse entre s\xed. Existen dos versiones principales de direcciones IP: IPv4 e IPv6."),(0,l.yg)("li",{parentName:"ul"},"Una direcci\xf3n IP es como la direcci\xf3n de tu casa, pero para dispositivos en una red (como computadoras, tel\xe9fonos, impresoras, etc.). Es un n\xfamero \xfanico que permite que los dispositivos se encuentren y se comuniquen entre s\xed, ya sea en una red local (como tu casa o oficina) o en Internet."),(0,l.yg)("li",{parentName:"ul"},"Imagina que env\xedas una carta. Necesitas saber la direcci\xf3n exacta para que el cartero sepa d\xf3nde entregar la carta. Lo mismo sucede en una red: si quieres enviar un mensaje o datos a otro dispositivo, necesitas su direcci\xf3n IP para que sepa a d\xf3nde ir.")),(0,l.yg)("h5",{id:"direcciones-ipv4"},"Direcciones IPv4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las direcciones IPv4 se representan como cuatro n\xfameros decimales separados por puntos, cada uno de los cuales puede variar de 0 a 255. Esto proporciona un total de aproximadamente 4.3 mil millones direcciones \xfanicas. Aqu\xed est\xe1 el formato b\xe1sico:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},'Formato: xxx.xxx.xxx.xxx (donde cada "xxx" es un n\xfamero entre 0 y 255)'),(0,l.yg)("li",{parentName:"ul"},"Ejemplo: 192.168.1.1"))),(0,l.yg)("li",{parentName:"ul"},"Piensa en una direcci\xf3n IP como una direcci\xf3n postal:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},'Una direcci\xf3n postal: "123 Calle Principal, Ciudad, Pa\xeds"'),(0,l.yg)("li",{parentName:"ul"},'Una direcci\xf3n IP: "192.168.1.1"'))),(0,l.yg)("li",{parentName:"ul"},"Las direcciones IPv4 tienen cuatro partes separadas por puntos. Cada parte puede ser un n\xfamero entre 0 y 255.")),(0,l.yg)("h5",{id:"direcciones-ipv6"},"Direcciones IPv6"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Debido al crecimiento de Internet y la escasez de direcciones IPv4, se introdujeron las direcciones IPv6, que son mucho m\xe1s largas y permiten una cantidad mucho mayor de direcciones \xfanicas:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Formato: Se representan como ocho grupos de cuatro d\xedgitos hexadecimales, separados por dos puntos."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo: 2001:0db8:85a3:0000:0000:8a2e:0370:7334")))),(0,l.yg)("h5",{id:"componentes-de-una-direcci\xf3n-ip"},"Componentes de una direcci\xf3n IP"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Parte de la red: Identifica la red a la que pertenece el dispositivo:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Identifica la red espec\xedfica a la que pertenece el dispositivo."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv4: En la direcci\xf3n 192.168.1.5 con una m\xe1scara de subred 255.255.255.0, la parte de la red es 192.168.1."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv6: En la direcci\xf3n 2001:0db8:85a3:0000:0000:8a2e:0370:7334, los primeros segmentos podr\xedan ser la parte de la red, dependiendo de la m\xe1scara de subred."))),(0,l.yg)("li",{parentName:"ul"},"Parte del host: Identifica el dispositivo espec\xedfico dentro de esa red:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Identifica el dispositivo espec\xedfico dentro de esa red."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv4: En la direcci\xf3n 192.168.1.5 con una m\xe1scara de subred 255.255.255.0, la parte del host es 5."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv6: En la direcci\xf3n 2001:0db8:85a3:0000:0000:8a2e:0370:7334, los \xfaltimos segmentos podr\xedan ser la parte del host, dependiendo de la m\xe1scara de subred."))),(0,l.yg)("li",{parentName:"ul"},"La proporci\xf3n de bits utilizados para la parte de la red y la parte del host se determina mediante una m\xe1scara de subred.")),(0,l.yg)("h5",{id:"m\xe1scara-de-subred"},"M\xe1scara de subred"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La m\xe1scara de subred se utiliza para dividir una direcci\xf3n IP en su componente de red y su componente de host. Se representa de la misma manera que una direcci\xf3n IP, y define qu\xe9 parte de la direcci\xf3n IP corresponde a la red y qu\xe9 parte a los hosts."),(0,l.yg)("li",{parentName:"ul"},"Una m\xe1scara de subred ayuda a dividir una red grande en partes m\xe1s peque\xf1as, como dividir una ciudad en barrios. Esto hace que sea m\xe1s f\xe1cil manejar y organizar las direcciones IP."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo de IPv4: 255.255.255.0"),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en notaci\xf3n CIDR: /24"),(0,l.yg)("li",{parentName:"ul"},"Las direcciones IPv4 son n\xfameros de 32 bits, divididos en cuatro octetos (cada octeto tiene 8 bits). Una m\xe1scara de subred tambi\xe9n tiene 32 bits y se usa para determinar qu\xe9 parte de la direcci\xf3n IP se usa para la red y cu\xe1l para los hosts."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo de M\xe1scara de Subred en IPv4",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Direcci\xf3n IP: 192.168.1.1"),(0,l.yg)("li",{parentName:"ul"},"M\xe1scara de Subred: 255.255.255.0"))),(0,l.yg)("li",{parentName:"ul"},"En binario, esto ser\xeda:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Direcci\xf3n IP: 11000000.10101000.00000001.00000001"),(0,l.yg)("li",{parentName:"ul"},"M\xe1scara de Subred: 11111111.11111111.11111111.00000000"))),(0,l.yg)("li",{parentName:"ul"},"La m\xe1scara de subred 255.255.255.0 significa que los primeros 24 bits (los tres primeros octetos) son la parte de la red, y los \xfaltimos 8 bits (el \xfaltimo octeto) son la parte del host."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo: 192.168.1.1/24 significa que los primeros 24 bits son la parte de la red."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo de M\xe1scara de Subred en IPv6:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Direcci\xf3n IP: 2001:0db8:85a3:0000:0000:8a2e:0370:7334"),(0,l.yg)("li",{parentName:"ul"},"M\xe1scara de Subred: /64"),(0,l.yg)("li",{parentName:"ul"},"Esto significa que los primeros 64 bits son la parte de la red, y los \xfaltimos 64 bits son la parte del host."))),(0,l.yg)("li",{parentName:"ul"},"Entonces, La m\xe1scara de subred define cu\xe1ntos bits est\xe1n reservados para la red y cu\xe1ntos para los hosts. Esto a su vez determina el n\xfamero de subredes y hosts posibles."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv4 con M\xe1scara /24:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"M\xe1scara: 255.255.255.0 (/24)"),(0,l.yg)("li",{parentName:"ul"},"Bits para la red: 24"),(0,l.yg)("li",{parentName:"ul"},"Bits para los hosts: 8"),(0,l.yg)("li",{parentName:"ul"},"Con 8 bits para los hosts, podemos tener 2",(0,l.yg)("sup",null,"8")," = 256 direcciones IP posibles en esta subred. Sin embargo, una direcci\xf3n se usa para la red y otra para el broadcast, as\xed que quedan 254 direcciones utilizables para hosts."))),(0,l.yg)("li",{parentName:"ul"},"Ejemplo en IPv6 con M\xe1scara /64",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"M\xe1scara: /64"),(0,l.yg)("li",{parentName:"ul"},"Bits para la red: 64"),(0,l.yg)("li",{parentName:"ul"},"Bits para los hosts: 64"))),(0,l.yg)("li",{parentName:"ul"},"Con 64 bits para los hosts, el n\xfamero de direcciones IP posibles es 2",(0,l.yg)("sup",null,"64"),", lo que es un n\xfamero extremadamente grande, mucho m\xe1s que suficiente para cualquier red.")),(0,l.yg)("h5",{id:"notaci\xf3n-cidr"},"Notaci\xf3n CIDR"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En lugar de escribir la m\xe1scara de subred completa, a menudo se usa la notaci\xf3n CIDR (Classless Inter-Domain Routing), que simplemente cuenta el n\xfamero de bits que son parte de la red."),(0,l.yg)("li",{parentName:"ul"},"Ejemplo: 192.168.1.1/24 significa que los primeros 24 bits son la parte de la red.")),(0,l.yg)("h5",{id:"tipos-de-direcciones-ip"},"Tipos de direcciones IP"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Direcci\xf3n p\xfablica: Utilizada para identificar dispositivos en Internet. Deben ser \xfanicas en todo el mundo. Direcciones IP \xfanicas en todo el mundo, usadas para dispositivos en Internet. Ejemplo: Cuando visitas un sitio web, tu dispositivo usa una direcci\xf3n IP p\xfablica."),(0,l.yg)("li",{parentName:"ul"},"Direcci\xf3n privada: Utilizadas dentro de redes locales (LAN) y no son \xfanicas globalmente. Las direcciones IP son \xfanicas dentro de tu red, pero no en todo el mundo. Ejemplo: 192.168.1.x (donde x puede ser cualquier n\xfamero entre 1 y 254). Ejemplo: Tu red dom\xe9stica.")),(0,l.yg)("h5",{id:"ejemplo-de-red-local"},"Ejemplo de red local"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imagina que tienes una red en casa con la direcci\xf3n base 192.168.1.0 y una m\xe1scara de subred de 255.255.255.0. Esto significa que puedes tener direcciones IP desde 192.168.1.1 hasta 192.168.1.254 para tus dispositivos.")),(0,l.yg)("h5",{id:"funciones-de-las-direcciones-ip"},"Funciones de las direcciones IP"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Identificaci\xf3n de host o red: Cada dispositivo en una red debe tener una direcci\xf3n IP \xfanica para ser identificable."),(0,l.yg)("li",{parentName:"ul"},"Localizaci\xf3n de host: Permite encontrar la ubicaci\xf3n de un dispositivo dentro de una red y establecer la ruta para la comunicaci\xf3n.")),(0,l.yg)("h3",{id:"subnet"},"Subnet"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Una subnet o subred es una subdivisi\xf3n de una red IP. El prop\xf3sito principal de una subred es mejorar la eficiencia de la red y facilitar su administraci\xf3n. Aqu\xed hay algunos puntos clave sobre las subnets:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Divisi\xf3n de redes grandes: Las subnets permiten dividir una red IP grande en segmentos m\xe1s peque\xf1os y manejables. Esto ayuda a mejorar la organizaci\xf3n y el rendimiento de la red."),(0,l.yg)("li",{parentName:"ul"},"Mejor uso del espacio de direcciones: Al subdividir una red, las subnets pueden ayudar a hacer un uso m\xe1s eficiente del espacio de direcciones IP disponibles. Esto es especialmente \xfatil para evitar el desperdicio de direcciones IP."),(0,l.yg)("li",{parentName:"ul"},"Mejora de la seguridad y control de tr\xe1fico: Al segmentar la red, se puede controlar mejor el flujo de tr\xe1fico entre diferentes subnets y aplicar pol\xedticas de seguridad espec\xedficas para cada segmento."),(0,l.yg)("li",{parentName:"ul"},"Reducci\xf3n del tr\xe1fico de difusi\xf3n: Las subnets ayudan a contener el tr\xe1fico de difusi\xf3n dentro de l\xedmites espec\xedficos, lo que reduce la carga en la red y mejora el rendimiento."),(0,l.yg)("li",{parentName:"ul"},"Facilidad de administraci\xf3n: La segmentaci\xf3n de una red en subnets facilita su administraci\xf3n, ya que cada segmento puede ser gestionado de forma independiente."))),(0,l.yg)("li",{parentName:"ul"},"En t\xe9rminos t\xe9cnicos, una subred se define mediante una m\xe1scara de subred (subnet mask), que especifica qu\xe9 porci\xf3n de la direcci\xf3n IP corresponde a la red y qu\xe9 porci\xf3n corresponde a los hosts dentro de esa red. Por ejemplo, en la direcci\xf3n IP 192.168.1.0 con una m\xe1scara de subred 255.255.255.0, los primeros tres octetos (192.168.1) representan la parte de la red y el \xfaltimo octeto (0) representa la parte del host."),(0,l.yg)("li",{parentName:"ul"},"La notaci\xf3n 172.20.0.0/16 se utiliza para describir una subred en el formato CIDR (Classless Inter-Domain Routing). Desglos\xe9moslo:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"172.20.0.0: Esta es la direcci\xf3n base de la subred."),(0,l.yg)("li",{parentName:"ul"},"/16: Este es el prefijo de la subred y representa la longitud de la m\xe1scara de subred en bits."),(0,l.yg)("li",{parentName:"ul"},"Rango de direcciones: La subred 172.20.0.0/16 abarca desde 172.20.0.0 hasta 172.20.255.255."),(0,l.yg)("li",{parentName:"ul"},"N\xfamero de direcciones: Con 16 bits disponibles para los hosts, hay 2",(0,l.yg)("sup",null,"16"),"=65,536 direcciones posibles dentro de esta subred. Sin embargo, dos direcciones est\xe1n reservadas: una para la direcci\xf3n de red (172.20.0.0) y otra para la direcci\xf3n de broadcast (172.20.255.255). Esto deja 65,534 direcciones utilizables para hosts.")))),(0,l.yg)("h5",{id:"calcular-subredes-y-hosts"},"Calcular subredes y hosts"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El n\xfamero de subredes que puedes crear es 2",(0,l.yg)("sup",null,"n"),", donde n es el n\xfamero de bits adicionales que has tomado."),(0,l.yg)("li",{parentName:"ul"},"Supongamos que tienes una red con una m\xe1scara de subred original de /24 (255.255.255.0)."),(0,l.yg)("li",{parentName:"ul"},"Decides utilizar 2 bits adicionales para subredes. Esto significa que la nueva m\xe1scara de subred ser\xe1 /26 (24 + 2 = 26)."),(0,l.yg)("li",{parentName:"ul"},"En este caso, 2",(0,l.yg)("sup",null,"2")," = 4 subredes"),(0,l.yg)("li",{parentName:"ul"},"El n\xfamero de hosts por subred se calcula con los bits restantes: 2",(0,l.yg)("sup",null,"h")," - 2, donde h es el n\xfamero de bits restantes para los hosts."),(0,l.yg)("li",{parentName:"ul"},"Con una m\xe1scara /26, te quedan 6 bits para los hosts (32 - 26 = 6)."),(0,l.yg)("li",{parentName:"ul"},"El n\xfamero de hosts por subred es 2",(0,l.yg)("sup",null,"6")," - 2 = 64 - 2 = 62 hosts")),(0,l.yg)("h3",{id:"dns"},"DNS"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El DNS (Domain Name System) es un sistema jer\xe1rquico y descentralizado que traduce nombres de dominio legibles por humanos (como ",(0,l.yg)("a",{parentName:"li",href:"http://www.example.com"},"www.example.com"),") en direcciones IP num\xe9ricas (como 192.0.2.1) que las computadoras usan para identificar y comunicarse con otros dispositivos en la red. DNS es esencial para el funcionamiento de Internet, ya que facilita la localizaci\xf3n y el acceso a sitios web y otros recursos en l\xednea."),(0,l.yg)("li",{parentName:"ul"},"Cuando decimos que el DNS es descentralizado, nos referimos a que no hay un \xfanico servidor o una \xfanica entidad que controle toda la informaci\xf3n del sistema. En cambio, la responsabilidad de manejar las consultas y almacenar la informaci\xf3n est\xe1 distribuida entre muchos servidores alrededor del mundo. "),(0,l.yg)("li",{parentName:"ul"},"DNS (Sistema de Nombres de Dominio) es como una gu\xeda telef\xf3nica para Internet. Traducimos nombres f\xe1ciles de recordar, como ",(0,l.yg)("a",{parentName:"li",href:"http://www.google.com"},"www.google.com"),", en direcciones num\xe9ricas que las computadoras usan para encontrarse entre s\xed, como 172.217.11.174. Sin DNS, tendr\xedamos que recordar largas series de n\xfameros para visitar nuestros sitios web favoritos.")),(0,l.yg)("h5",{id:"componentes-clave-de-dns"},"Componentes Clave de DNS"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Nombres de Dominio:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Estructura Jer\xe1rquica: Los nombres de dominio se estructuran en una jerarqu\xeda de varios niveles, separados por puntos. Un nombre de dominio est\xe1 organizado como una direcci\xf3n postal, con partes espec\xedficas que indican diferentes niveles.  Ejemplo: ",(0,l.yg)("a",{parentName:"li",href:"http://www.example.com"},"www.example.com"),"."),(0,l.yg)("li",{parentName:"ul"},"Dominio de Nivel Superior (TLD): Como el pa\xeds en una direcci\xf3n postal, el \xfaltimo segmento, como .com, .org, .net."),(0,l.yg)("li",{parentName:"ul"},"Dominio de Segundo Nivel:  Como la calle en una direcci\xf3n, Justo antes del TLD, como example."),(0,l.yg)("li",{parentName:"ul"},"Subdominio: Como el n\xfamero de casa o departamento. Opcional y aparece antes del dominio de segundo nivel, como www."))),(0,l.yg)("li",{parentName:"ul"},"Servidores DNS:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Servidores Ra\xedz: Los servidores ra\xedz manejan las solicitudes iniciales de resoluci\xf3n de nombres y dirigen a los servidores TLD. Son como los conserjes del edificio que te indican en qu\xe9 piso est\xe1 la oficina que buscas."),(0,l.yg)("li",{parentName:"ul"},"Servidores TLD: Administran los dominios de nivel superior y redirigen a los servidores autoritativos de dominios espec\xedficos. Son como los recepcionistas de cada piso que te indican en qu\xe9 oficina espec\xedfica se encuentra lo que buscas."),(0,l.yg)("li",{parentName:"ul"},"Servidores Autorizativos: Contienen la informaci\xf3n real sobre los nombres de dominio y sus correspondientes direcciones IP.  Son como las oficinas espec\xedficas que tienen la informaci\xf3n exacta que necesitas."),(0,l.yg)("li",{parentName:"ul"},"Servidores de Cach\xe9 (Resolutores): Almacenan temporalmente respuestas DNS recientes para acelerar futuras consultas."))),(0,l.yg)("li",{parentName:"ul"},"Proceso de Resoluci\xf3n DNS:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Consulta Recursiva: El resolutor de DNS act\xfaa en nombre del cliente para realizar todas las consultas necesarias y devolver la respuesta final. Es como si le preguntaras a un amigo y \xe9l hiciera todas las averiguaciones por ti y te diera la respuesta final."),(0,l.yg)("li",{parentName:"ul"},"Consulta Iterativa: El cliente debe realizar cada paso de la consulta a varios servidores DNS hasta obtener la respuesta final.Es como si t\xfa mismo fueras a cada oficina a preguntar hasta encontrar la informaci\xf3n.")))),(0,l.yg)("h3",{id:"puerto"},"Puerto"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un puerto es un n\xfamero  utilizado por el Protocolo de Control de Transmisi\xf3n (TCP) y el Protocolo de Datagramas de Usuario (UDP) para identificar aplicaciones o servicios espec\xedficos en un dispositivo que usa una direcci\xf3n IP en una red. "),(0,l.yg)("li",{parentName:"ul"},"Los puertos permiten que un solo dispositivo maneje m\xfaltiples conexiones de red simult\xe1neamente al diferenciar las comunicaciones destinadas a diferentes aplicaciones o servicios."),(0,l.yg)("li",{parentName:"ul"},"Un puerto es como una puerta numerada en un edificio que tiene muchas habitaciones. Imagina que tu computadora es ese edificio, y cada aplicaci\xf3n o servicio es una habitaci\xf3n diferente. Los puertos ayudan a dirigir el tr\xe1fico de la red a la habitaci\xf3n (aplicaci\xf3n) correcta."),(0,l.yg)("li",{parentName:"ul"},"Componentes Clave de los Puertos:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Puertos Bien Conocidos (0-1023): Reservados para servicios y aplicaciones est\xe1ndar (por ejemplo, HTTP usa el puerto 80, HTTPS usa el puerto 443). Estas son las puertas principales del edificio, reservadas para servicios muy comunes y populares. Por ejemplo, la puerta 80 es para el servicio de internet (HTTP), y la puerta 443 es para conexiones seguras (HTTPS)."),(0,l.yg)("li",{parentName:"ul"},"Puertos Registrados (1024-49151): Usados por aplicaciones de usuario o servicios registrados. Estas puertas pueden ser usadas por otras aplicaciones y servicios que necesitan su propia entrada."),(0,l.yg)("li",{parentName:"ul"},"Puertos Din\xe1micos o Privados (49152-65535): Usados temporalmente por aplicaciones para conexiones ef\xedmeras.  Estas puertas son usadas temporalmente por aplicaciones cuando se necesita una entrada r\xe1pida y temporal."))),(0,l.yg)("li",{parentName:"ul"},"Puertos en TCP y UDP:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"TCP (Protocolo de Control de Transmisi\xf3n): Proporciona una comunicaci\xf3n confiable, orientada a la conexi\xf3n. Los puertos TCP se usan para servicios que requieren una entrega confiable de datos, como HTTP, FTP, y SSH. Es como un servicio de mensajer\xeda que garantiza que tus cartas (datos) lleguen en orden y sin p\xe9rdidas. Usa puertas (puertos) que aseguran la entrega confiable de datos."),(0,l.yg)("li",{parentName:"ul"},"UDP (Protocolo de Datagramas de Usuario): Proporciona una comunicaci\xf3n no confiable, sin conexi\xf3n. Los puertos UDP se usan para servicios que no requieren una entrega confiable, como DNS, streaming de video, y VoIP. Es como enviar postales que pueden llegar en cualquier orden y algunas podr\xedan perderse. Usa puertas (puertos) que no aseguran la entrega de datos, pero son m\xe1s r\xe1pidas."))),(0,l.yg)("li",{parentName:"ul"},"Funcionamiento de los Puertos:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Encabezados de Paquetes: Los n\xfameros de puerto se incluyen en los encabezados de los paquetes TCP o UDP. Esto permite que el sistema operativo de un dispositivo enrute el tr\xe1fico  al proceso o aplicaci\xf3n correcta. Equivale a la direcci\xf3n de las puertas: Los n\xfameros de puerto est\xe1n escritos en las etiquetas de los paquetes de datos, lo que permite a la computadora saber a qu\xe9 habitaci\xf3n (aplicaci\xf3n) dirigir los datos."),(0,l.yg)("li",{parentName:"ul"},"Sockets: Un socket es una combinaci\xf3n de una direcci\xf3n IP y un n\xfamero de puerto, lo que permite identificar una conexi\xf3n espec\xedfica. Por ejemplo, un socket TCP se define como una combinaci\xf3n de una direcci\xf3n IP, un puerto de origen y un puerto de destino. Un socket es como una combinaci\xf3n de una direcci\xf3n postal y una puerta espec\xedfica, permitiendo identificar una conexi\xf3n exacta. Por ejemplo, un socket TCP se define como una combinaci\xf3n de una direcci\xf3n IP, una puerta de origen y una puerta de destino.")))),(0,l.yg)("h5",{id:"para-qu\xe9-sirven-los-puertos"},"\xbfPara Qu\xe9 Sirven los Puertos?"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Identificaci\xf3n de Servicios: Los puertos permiten que diferentes servicios y aplicaciones se ejecuten simult\xe1neamente en una sola direcci\xf3n IP. Cada servicio se identifica y accede a trav\xe9s de su n\xfamero de puerto espec\xedfico."),(0,l.yg)("li",{parentName:"ul"},"Gesti\xf3n de Conexiones: Los puertos ayudan a gestionar m\xfaltiples conexiones de red al mismo tiempo. Por ejemplo, puedes estar navegando por la web (HTTP en el puerto 80) mientras escuchas m\xfasica en streaming (puerto diferente) y revisas tu correo electr\xf3nico (IMAP en el puerto 143 o 993)."),(0,l.yg)("li",{parentName:"ul"},"Seguridad: Los puertos tambi\xe9n juegan un papel importante en la seguridad de la red. Los firewalls y otras herramientas de seguridad pueden bloquear o permitir tr\xe1fico basado en n\xfameros de puerto, protegiendo as\xed los servicios y aplicaciones de accesos no autorizados.")),(0,l.yg)("h4",{id:"qu\xe9-significa-mapear-un-puerto"},"\xbfQu\xe9 Significa Mapear un Puerto?"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Mapear un puerto, tambi\xe9n conocido como port forwarding o redirecci\xf3n de puertos, es el proceso de configurar un dispositivo de red, como un enrutador, para que redirija el tr\xe1fico entrante destinado a un puerto y IP espec\xedfico  a un puerto y direcci\xf3n IP interno en una red privada."),(0,l.yg)("li",{parentName:"ul"},"Mapear un puerto es como configurar una puerta especial en tu edificio (red) que redirige a las personas (datos) que vienen a esa puerta a una habitaci\xf3n espec\xedfica dentro del edificio.")),(0,l.yg)("h5",{id:"c\xf3mo-funciona-el-mapeo-de-puertos"},"\xbfC\xf3mo Funciona el Mapeo de Puertos?"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Configuraci\xf3n del Enrutador:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Entrada de Redirecci\xf3n: Configuras una entrada en el enrutador que especifica qu\xe9 tr\xe1fico entrante en un puerto particular debe ser redirigido a una direcci\xf3n IP interna y un puerto interno espec\xedfico."),(0,l.yg)("li",{parentName:"ul"},"Regla de Redirecci\xf3n: Por ejemplo, puedes configurar el enrutador para redirigir todo el tr\xe1fico entrante en el puerto 8080 de la IP p\xfablica del enrutador a la direcci\xf3n IP interna 192.168.1.100 en el puerto 80."),(0,l.yg)("li",{parentName:"ul"},"Siguiendo la analog\xeda: Le dices al portero (enrutador) que si alguien toca la puerta 8080 (un puerto espec\xedfico), debe llevar a esa persona a la habitaci\xf3n 100 (una direcci\xf3n IP interna) y entrar por la puerta de esa habitaci\xf3n (un puerto interno espec\xedfico, como 80)."))),(0,l.yg)("li",{parentName:"ol"},"Proceso de Redirecci\xf3n:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Solicitud Entrante: Cuando una solicitud llega a la IP p\xfablica del enrutador en el puerto especificado (por ejemplo, puerto 8080). Imagina que alguien llega a la puerta principal del edificio (la IP p\xfablica) y toca la puerta 8080."),(0,l.yg)("li",{parentName:"ul"},"Redirecci\xf3n Interna: El enrutador toma esa solicitud y la redirige al dispositivo interno configurado (por ejemplo, 192.168.1.100) en el puerto correspondiente (por ejemplo, puerto 80). El portero (enrutador) sabe que debe llevar a esa persona a la habitaci\xf3n 100 (direcci\xf3n IP interna) y asegurarse de que entre por la puerta correcta de esa habitaci\xf3n (puerto 80)."),(0,l.yg)("li",{parentName:"ul"},"Respuesta: La respuesta del dispositivo interno sigue el camino inverso: pasa por el enrutador y vuelve al origen de la solicitud. Cuando la habitaci\xf3n 100 responde, el portero (enrutador) lleva la respuesta de vuelta a la entrada principal para que la persona que toc\xf3 la puerta 8080 reciba la respuesta.")))),(0,l.yg)("h5",{id:"para-qu\xe9-sirve-mapear-un-puerto"},"\xbfPara Qu\xe9 Sirve Mapear un Puerto?"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Acceso Remoto a Servicios Internos: Permite que los dispositivos externos (fuera de tu red local) accedan a servicios y aplicaciones dentro de tu red local. Por ejemplo, puedes acceder a una c\xe1mara de seguridad en tu casa desde tu tel\xe9fono m\xf3vil cuando est\xe1s fuera."),(0,l.yg)("li",{parentName:"ul"},"Alojamiento de Servicios: Si est\xe1s ejecutando un servidor web, servidor de juegos o cualquier otro tipo de servidor en tu red local, puedes hacer que sea accesible desde Internet mapeando el puerto correspondiente."),(0,l.yg)("li",{parentName:"ul"},"Soluci\xf3n de Problemas de Conexi\xf3n: En algunos casos, puede ser necesario mapear puertos para solucionar problemas de conexi\xf3n con ciertas aplicaciones o servicios que requieren acceso espec\xedfico a puertos.")),(0,l.yg)("h2",{id:"allowpublickeyretrieval"},"allowPublicKeyRetrieval"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"allowPublicKeyRetrieval es una opci\xf3n de configuraci\xf3n que se puede usar en la cadena de conexi\xf3n al conectar una aplicaci\xf3n Node.js a una base de datos MySQL. Esta opci\xf3n permite la recuperaci\xf3n de la clave p\xfablica del servidor MySQL cuando se utiliza la autenticaci\xf3n basada en la clave p\xfablica."),(0,l.yg)("li",{parentName:"ul"},"En MySQL, si se est\xe1 utilizando la autenticaci\xf3n con claves p\xfablicas, el cliente necesita la clave p\xfablica del servidor para establecer una conexi\xf3n segura. Por razones de seguridad, la recuperaci\xf3n de esta clave p\xfablica est\xe1 deshabilitada por defecto. Sin embargo, en ciertos entornos, puede ser necesario habilitar esta opci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Es una opci\xf3n en las cadenas de conexi\xf3n de MySQL que permite al cliente recuperar la clave p\xfablica del servidor MySQL si esta es necesaria para la autenticaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Contexto:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Autenticaci\xf3n con Clave P\xfablica: MySQL puede utilizar autenticaci\xf3n basada en claves p\xfablicas para asegurar las conexiones entre el cliente y el servidor."),(0,l.yg)("li",{parentName:"ul"},"Seguridad: De forma predeterminada, la recuperaci\xf3n de la clave p\xfablica est\xe1 deshabilitada por razones de seguridad. Esto evita que la clave p\xfablica del servidor sea expuesta innecesariamente."),(0,l.yg)("li",{parentName:"ul"},"Configuraci\xf3n: Al establecer una conexi\xf3n a MySQL desde una aplicaci\xf3n Node.js usando mysql2 o un cliente similar, puedes incluir allowPublicKeyRetrieval: true en la configuraci\xf3n de la conexi\xf3n para permitir la recuperaci\xf3n de la clave p\xfablica si es necesario.")))),(0,l.yg)("h4",{id:"analog\xeda"},"Analog\xeda"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imagina que tienes un club privado muy exclusivo (el servidor MySQL) y quieres entrar (conectar tu aplicaci\xf3n Node.js a la base de datos). Para entrar, necesitas una tarjeta de miembro especial (la clave p\xfablica) que te permita identificarte y demostrar que tienes permiso para ingresar.")),(0,l.yg)("h5",{id:"situaci\xf3n-sin-allowpublickeyretrieval"},"Situaci\xf3n sin allowPublicKeyRetrieval:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Normalmente, el club no entrega tarjetas de miembro a cualquiera por razones de seguridad. Solo los miembros conocidos ya tienen sus tarjetas (claves p\xfablicas) de antemano. Esto es para evitar que extra\xf1os obtengan las tarjetas y traten de entrar.")),(0,l.yg)("h5",{id:"situaci\xf3n-con-allowpublickeyretrieval"},"Situaci\xf3n con allowPublicKeyRetrieval:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imagina que, en algunos casos, el club permite a los nuevos miembros potenciales (nuevos clientes) pedir una tarjeta de miembro directamente en la puerta. Esto es porque, para ciertos nuevos miembros, es m\xe1s seguro y conveniente recibir la tarjeta en el momento en lugar de haberla recibido previamente."),(0,l.yg)("li",{parentName:"ul"},"allowPublicKeyRetrieval es como una pol\xedtica del club que permite que los nuevos visitantes (clientes) pidan una tarjeta de miembro (clave p\xfablica) directamente en la puerta (cuando se conectan al servidor MySQL). Esto facilita la entrada, especialmente si el nuevo miembro no ten\xeda una tarjeta antes.")),(0,l.yg)("h4",{id:"uso-en-una-cadena-de-conexi\xf3n"},"Uso en una cadena de conexi\xf3n"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"const mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test',\n  password: 'password',\n  ssl: {\n    rejectUnauthorized: true\n  },\n  allowPublicKeyRetrieval: true\n});\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"En este ejemplo, la opci\xf3n allowPublicKeyRetrieval: true est\xe1 incluida en la configuraci\xf3n de la conexi\xf3n. Esto permite al cliente recuperar la clave p\xfablica del servidor MySQL si es necesario para la autenticaci\xf3n.")))),(0,l.yg)("h2",{id:"plantillas-go-golang-templates"},"Plantillas Go (Golang templates)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las plantillas en Go son una forma poderosa de generar contenido din\xe1mico a partir de datos estructurados. "),(0,l.yg)("li",{parentName:"ul"},"Go proporciona dos paquetes principales para trabajar con plantillas: text/template y html/template. El primero se usa para generar texto sin formato, y el segundo se usa para generar HTML seguro."),(0,l.yg)("li",{parentName:"ul"},"Componentes Clave:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Definici\xf3n de Plantilla: Una plantilla en Go se define con marcadores de posici\xf3n, tambi\xe9n llamados acciones, que luego se reemplazan con datos espec\xedficos en tiempo de ejecuci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Parsear Plantilla: El contenido de la plantilla se analiza (parsea) para crear un objeto de plantilla."),(0,l.yg)("li",{parentName:"ul"},"Datos: Un conjunto de datos que se pasar\xe1 a la plantilla para reemplazar los marcadores de posici\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Ejecuci\xf3n de Plantilla: La plantilla se ejecuta con los datos proporcionados, generando el contenido final.")))),(0,l.yg)("h4",{id:"analog\xeda-1"},"Analog\xeda"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imagina que est\xe1s organizando una fiesta y necesitas enviar invitaciones personalizadas a cada uno de tus amigos. En lugar de escribir cada invitaci\xf3n desde cero, decides crear una plantilla de invitaci\xf3n que puedes rellenar con los detalles espec\xedficos de cada amigo."),(0,l.yg)("li",{parentName:"ul"},"Creas una plantilla con espacios en blanco para el nombre del invitado, la fecha y la hora de la fiesta. Algo as\xed como:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-cs"},"Hola [Nombre],\n\nTe invito a mi fiesta de cumplea\xf1os el [Fecha] a las [Hora].\n\n\xa1Espero verte all\xed!\n\nSaludos,\n[Tu Nombre]\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Para cada amigo, solo necesitas rellenar los espacios en blanco con la informaci\xf3n espec\xedfica."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo para Juan:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-cs"},"Hola Juan,\n\nTe invito a mi fiesta de cumplea\xf1os el 10 de julio a las 6 PM.\n\n\xa1Espero verte all\xed!\n\nSaludos,\nCarlos\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En Golang, las plantillas funcionan de manera similar a tu plantilla de invitaci\xf3n. Las plantillas te permiten definir un formato general con marcadores de posici\xf3n que puedes rellenar din\xe1micamente con datos espec\xedficos.")),(0,l.yg)("h4",{id:"ejemplo-t\xe9cnico-paso-a-paso"},"Ejemplo T\xe9cnico Paso a Paso:"),(0,l.yg)("h5",{id:"1--definir-una-plantilla"},"1- Definir una Plantilla"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Una plantilla en Go se define como una cadena con acciones delimitadas por {{  }}.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},"const tmpl = `Hello, {{.Name}}! Welcome to {{.Place}}.`\n")),(0,l.yg)("h5",{id:"2--definir-una-plantilla"},"2- Definir una Plantilla"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Usamos el paquete text/template para crear una nueva plantilla y analizar (parsear) su contenido.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "os"\n    "text/template"\n)\n\nfunc main() {\n    // Definir la plantilla como una cadena\n    const tmpl = `Hello, {{.Name}}! Welcome to {{.Place}}.`\n\n    // Crear una nueva plantilla y parsear su contenido\n    t, err := template.New("greeting").Parse(tmpl)\n    if err != nil {\n        panic(err)\n    }\n\n    // Definir los datos que se pasar\xe1n a la plantilla\n    data := struct {\n        Name  string\n        Place string\n    }{\n        Name:  "Alice",\n        Place: "Wonderland",\n    }\n\n    // Ejecutar la plantilla con los datos\n    err = t.Execute(os.Stdout, data)\n    if err != nil {\n        panic(err)\n    }\n}\n\n')),(0,l.yg)("h5",{id:"3--ejecutar-la-plantilla"},"3- Ejecutar la Plantilla"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al ejecutar la plantilla con los datos proporcionados, se generan los resultados finales con los marcadores de posici\xf3n reemplazados por los valores correspondientes.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-shell"},"Hello, Alice! Welcome to Wonderland.\n")),(0,l.yg)("h5",{id:"detalles-t\xe9cnicos"},"Detalles T\xe9cnicos"),(0,l.yg)("h5",{id:"definici\xf3n-de-marcadores-de-posici\xf3n"},"Definici\xf3n de Marcadores de Posici\xf3n:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"{{.Name}}: Hace referencia al campo Name en los datos pasados."),(0,l.yg)("li",{parentName:"ul"},"{{.Place}}: Hace referencia al campo Place en los datos pasados.")),(0,l.yg)("h5",{id:"parsear-plantilla"},"Parsear Plantilla:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'template.New("greeting").Parse(tmpl): Crea un nuevo objeto de plantilla con el nombre "greeting" y analiza el contenido de tmpl.')),(0,l.yg)("h5",{id:"datos"},"Datos:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Definimos una estructura con los campos Name y Place que se utilizar\xe1n para reemplazar los marcadores de posici\xf3n en la plantilla.")),(0,l.yg)("h5",{id:"ejecuci\xf3n-de-plantilla"},"Ejecuci\xf3n de Plantilla:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"t.Execute(os.Stdout, data): Ejecuta la plantilla t usando data y escribe el resultado en os.Stdout (la salida est\xe1ndar).")),(0,l.yg)("h2",{id:"client-side-rendering-csr"},"Client-Side Rendering (CSR)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El Client-Side Rendering (CSR) es una t\xe9cnica en el desarrollo web donde el navegador del cliente es responsable de generar y renderizar el contenido de la aplicaci\xf3n. En lugar de recibir HTML pre-renderizado desde el servidor, el navegador descarga un archivo HTML m\xednimo y los archivos JavaScript necesarios para construir la interfaz de usuario en el lado del cliente.")),(0,l.yg)("h4",{id:"proceso-de-csr"},"Proceso de CSR"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Carga Inicial: Al iniciar la aplicaci\xf3n, el navegador recibe un HTML m\xednimo junto con archivos JavaScript, CSS y otros recursos necesarios."),(0,l.yg)("li",{parentName:"ul"},"Renderizado en el Cliente: El JavaScript ejecutado en el navegador construye y manipula el Document Object Model (DOM) para generar la interfaz de usuario."),(0,l.yg)("li",{parentName:"ul"},"Interactividad: Todas las interacciones del usuario, como hacer clic en botones o enlaces, se manejan en el lado del cliente, a menudo utilizando t\xe9cnicas como AJAX para comunicarse con el servidor y actualizar el contenido din\xe1micamente sin recargar la p\xe1gina.")),(0,l.yg)("h4",{id:"ventajas-de-csr"},"Ventajas de CSR"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Interactividad Fluida: Las aplicaciones CSR pueden proporcionar una experiencia de usuario muy interactiva y fluida, ya que las actualizaciones de la interfaz de usuario se manejan directamente en el cliente sin necesidad de recargar la p\xe1gina."),(0,l.yg)("li",{parentName:"ul"},"Menor Carga en el Servidor: El servidor solo env\xeda los archivos est\xe1ticos (HTML, JavaScript, CSS), reduciendo la carga y permitiendo que el cliente maneje la mayor\xeda del procesamiento."),(0,l.yg)("li",{parentName:"ul"},"Desarrollo Modular: CSR facilita la construcci\xf3n de aplicaciones con componentes reutilizables y una arquitectura modular.")),(0,l.yg)("h4",{id:"desventajas-de-csr"},"Desventajas de CSR"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"SEO: Los motores de b\xfasqueda pueden tener dificultades para indexar el contenido generado din\xe1micamente en el cliente, lo que puede afectar el SEO."),(0,l.yg)("li",{parentName:"ul"},"Tiempo de Carga Inicial: La carga inicial puede ser m\xe1s lenta, ya que el navegador necesita descargar y ejecutar los archivos JavaScript antes de mostrar el contenido."),(0,l.yg)("li",{parentName:"ul"},"Accesibilidad: Los usuarios con dispositivos m\xe1s antiguos o conexiones lentas pueden experimentar tiempos de carga m\xe1s largos y una experiencia menos \xf3ptima.")),(0,l.yg)("h4",{id:"analog\xeda-2"},"Analog\xeda"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Imagina construir una casa:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"CSR (Client-Side Rendering): Recibes un plano b\xe1sico y todos los materiales necesarios, y construyes la casa t\xfa mismo en el lugar. Todo el trabajo de construcci\xf3n se realiza en el sitio."),(0,l.yg)("li",{parentName:"ul"},"SSR (Server-Side Rendering): La casa ya est\xe1 construida y terminada, y simplemente te la entregan lista para usar.")))),(0,l.yg)("h4",{id:"ejemplo-de-estructura-de-proyecto-en-react"},"Ejemplo de Estructura de Proyecto en React"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-plaintext"},"/CSRApp\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u251c\u2500\u2500 Sidebar.js\n\u2502   \u2502   \u2514\u2500\u2500 MainContent.js\n\u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u251c\u2500\u2500 Home.js\n\u2502   \u2502   \u251c\u2500\u2500 About.js\n\u2502   \u2502   \u2514\u2500\u2500 Contact.js\n\u2502   \u251c\u2500\u2500 App.js\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 App.css\n\u2514\u2500\u2500 package.json\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"public/index.html: El archivo HTML m\xednimo que se carga inicialmente."),(0,l.yg)("li",{parentName:"ul"},"src/components/: Componentes reutilizables como Header, Sidebar y MainContent."),(0,l.yg)("li",{parentName:"ul"},"src/pages/: P\xe1ginas de la aplicaci\xf3n, cada una representada por un componente React."),(0,l.yg)("li",{parentName:"ul"},"src/App.js: Componente ra\xedz de la aplicaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"src/index.js: Punto de entrada donde React monta la aplicaci\xf3n en el DOM."),(0,l.yg)("li",{parentName:"ul"},"src/App.css: Archivo CSS para estilos globales.")))))}p.isMDXComponent=!0}}]);