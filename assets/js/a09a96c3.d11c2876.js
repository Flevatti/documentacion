"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[1625],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var o=n(6540);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function t(e,a){if(null==e)return{};var n,o,i=function(e,a){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=c(e.components);return o.createElement(s.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},p=o.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=t(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,g=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return n?o.createElement(g,l(l({ref:a},d),{},{components:n})):o.createElement(g,l({ref:a},d))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=p;var t={};for(var s in a)hasOwnProperty.call(a,s)&&(t[s]=a[s]);t.originalType=e,t[m]="string"==typeof e?e:i,l[1]=t;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},220:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var o=n(8168),i=(n(6540),n(5680));const r={sidebar_position:8},l='Conceptos de "C#" - Parte 3',t={unversionedId:"C--/guiaC3",id:"C--/guiaC3",title:'Conceptos de "C#" - Parte 3',description:'" - Parte 3',source:"@site/docs/C--/guiaC3.md",sourceDirName:"C--",slug:"/C--/guiaC3",permalink:"/documentacion/docs/C--/guiaC3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/guiaC3.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"C",previous:{title:'Conceptos de "C#" - Parte 2',permalink:"/documentacion/docs/C--/guiaC2"},next:{title:'Conceptos de "C#" - Parte 4',permalink:"/documentacion/docs/C--/guiaC4"}},s={},c=[{value:"Palabra clave nameof",id:"palabra-clave-nameof",level:2},{value:"Record",id:"record",level:2},{value:"Caracter\xedsticas de los Records",id:"caracter\xedsticas-de-los-records",level:4},{value:"\xbfY cu\xe1l es la diferencia con los dos anteriores que seguramente ya conoces?",id:"y-cu\xe1l-es-la-diferencia-con-los-dos-anteriores-que-seguramente-ya-conoces",level:4},{value:"Declarar un record",id:"declarar-un-record",level:4},{value:"Manejar herencia",id:"manejar-herencia",level:4},{value:"Record Structs",id:"record-structs",level:4},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Registros posicionales",id:"registros-posicionales",level:4},{value:"Pero, \xbfy si necesit\xe1semos constructores adicionales?",id:"pero-y-si-necesit\xe1semos-constructores-adicionales",level:4},{value:"With",id:"with",level:4},{value:"Ejemplo de un record",id:"ejemplo-de-un-record",level:4},{value:"Herencia en Records",id:"herencia-en-records",level:4},{value:"Readonly",id:"readonly",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"Eventos",id:"eventos",level:2},{value:"Qu\xe9 son los eventos",id:"qu\xe9-son-los-eventos",level:4},{value:"Editor",id:"editor",level:4},{value:"Suscriptor",id:"suscriptor",level:4},{value:"Evento",id:"evento",level:4},{value:"Declaraci\xf3n de un evento",id:"declaraci\xf3n-de-un-evento",level:4},{value:"Creaci\xf3n del editor",id:"creaci\xf3n-del-editor",level:4},{value:"Creaci\xf3n del suscriptor",id:"creaci\xf3n-del-suscriptor",level:4},{value:"C\xf3mo Suscribirse",id:"c\xf3mo-suscribirse",level:4},{value:"Casting",id:"casting",level:2},{value:"En C#, podemos realizar diferentes tipos de conversiones.",id:"en-c-podemos-realizar-diferentes-tipos-de-conversiones",level:4},{value:"Conversi\xf3n impl\xedcita",id:"conversi\xf3n-impl\xedcita",level:4},{value:"Ejemplo",id:"ejemplo-2",level:5},{value:"Otro ejemplo",id:"otro-ejemplo",level:5},{value:"Casting expl\xedcito",id:"casting-expl\xedcito",level:4},{value:"Uso",id:"uso",level:5},{value:"Ejemplo",id:"ejemplo-3",level:5},{value:"\xbfSiempre perdemos datos cuando convertimos un tipo m\xe1s grande a un tipo m\xe1s peque\xf1o en C#?",id:"siempre-perdemos-datos-cuando-convertimos-un-tipo-m\xe1s-grande-a-un-tipo-m\xe1s-peque\xf1o-en-c",level:4},{value:"M\xe9todos de conversi\xf3n de tipos",id:"m\xe9todos-de-conversi\xf3n-de-tipos",level:4},{value:"Clase Convert",id:"clase-convert",level:4},{value:"Parse()",id:"parse",level:4},{value:"TryParse()",id:"tryparse",level:4},{value:"Ejemplo",id:"ejemplo-4",level:5},{value:"If/Else",id:"ifelse",level:2},{value:"If",id:"if",level:4},{value:"Mas ejemplos",id:"mas-ejemplos",level:5},{value:"If - Else",id:"if---else",level:4},{value:"If anidados",id:"if-anidados",level:4},{value:"Else if",id:"else-if",level:4},{value:"Ejemplo",id:"ejemplo-5",level:5},{value:"Else",id:"else",level:4},{value:"Declaraciones If anidadas",id:"declaraciones-if-anidadas",level:4},{value:"Crear una excepci\xf3n personalizada",id:"crear-una-excepci\xf3n-personalizada",level:2},{value:"Utilizar una excepci\xf3n personalizada",id:"utilizar-una-excepci\xf3n-personalizada",level:4},{value:"String interpolation",id:"string-interpolation",level:2},{value:"Sintaxis completa",id:"sintaxis-completa",level:4},{value:"Ejemplo con la opci\xf3n alineaci\xf3n",id:"ejemplo-con-la-opci\xf3n-alineaci\xf3n",level:4},{value:"Ejemplo con formatString",id:"ejemplo-con-formatstring",level:4},{value:"Funciones as\xedncronas",id:"funciones-as\xedncronas",level:2},{value:"Termino as\xedncrono",id:"termino-as\xedncrono",level:4},{value:"\xbfQu\xe9 es la progamaci\xf3n as\xedncrona?",id:"qu\xe9-es-la-progamaci\xf3n-as\xedncrona",level:4},{value:"Introducci\xf3n a Async/Await",id:"introducci\xf3n-a-asyncawait",level:4},{value:"\xbfDe que sirve?",id:"de-que-sirve",level:4},{value:"Tipo de retorno",id:"tipo-de-retorno",level:4},{value:"Ejemplo",id:"ejemplo-6",level:4},{value:"Await",id:"await",level:4},{value:"M\xe9todo alternativo",id:"m\xe9todo-alternativo",level:4},{value:"Descarte independiente",id:"descarte-independiente",level:2},{value:"Operadores &quot;??&quot; , &quot;?.&quot; y &quot;?&quot;",id:"operadores----y-",level:2},{value:"Operador ??",id:"operador-",level:4},{value:"Condicional ?.",id:"condicional-",level:4},{value:"Es diferente a usar &quot;?&quot; en un tipo de dato",id:"es-diferente-a-usar--en-un-tipo-de-dato",level:4},{value:"Out",id:"out",level:2},{value:"Puntos importantes",id:"puntos-importantes",level:4},{value:"Sintaxis",id:"sintaxis",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Abreviaci\xf3n",id:"abreviaci\xf3n",level:4},{value:"Ejemplo",id:"ejemplo-7",level:4},{value:"Otro ejemplo:",id:"otro-ejemplo-1",level:4},{value:"In",id:"in",level:2},{value:"Ref",id:"ref",level:2},{value:"Ejemplo",id:"ejemplo-8",level:4},{value:"Otro ejemplo",id:"otro-ejemplo-2",level:4},{value:"Diferencias con out",id:"diferencias-con-out",level:4},{value:"1- Actualizaci\xf3n de las variables Ref y Out",id:"1--actualizaci\xf3n-de-las-variables-ref-y-out",level:4},{value:"2- Inicializar variables Ref y Out",id:"2--inicializar-variables-ref-y-out",level:4},{value:"3- \xbfCu\xe1ndo es \xfatil?",id:"3--cu\xe1ndo-es-\xfatil",level:4},{value:"Resumen",id:"resumen-1",level:4},{value:"M\xe9todos iteradores",id:"m\xe9todos-iteradores",level:2},{value:"Iteraci\xf3n con Foreach",id:"iteraci\xf3n-con-foreach",level:4},{value:"M\xe9todo iterador",id:"m\xe9todo-iterador",level:4},{value:"Profundizar Foreach",id:"profundizar-foreach",level:4},{value:"Ejemplo iterador",id:"ejemplo-iterador",level:4}],d={toc:c},m="wrapper";function u(e){let{components:a,...n}=e;return(0,i.yg)(m,(0,o.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"conceptos-de-c---parte-3"},'Conceptos de "C#" - Parte 3'),(0,i.yg)("h2",{id:"palabra-clave-nameof"},"Palabra clave nameof"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La palabra clave nameof genera el nombre de una variable, un tipo de dato  , un miembro , un espacio de nombre , etc como un String."),(0,i.yg)("li",{parentName:"ul"},"La expresi\xf3n nameof se eval\xfaa en tiempo de compilaci\xf3n y no tiene efecto en tiempo de ejecuci\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Cuando el operando es un tipo de dato o un espacio de nombre, el nombre generado no est\xe1 completo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Console.WriteLine(nameof(System.Collections.Generic));  // output: Generic\nConsole.WriteLine(nameof(List<int>));  // output: List\nConsole.WriteLine(nameof(List<int>.Count));  // output: Count\nConsole.WriteLine(nameof(List<int>.Add));  // output: Add\n\nvar numbers = new List<int> { 1, 2, 3 };\nConsole.WriteLine(nameof(numbers));  // output: numbers\nConsole.WriteLine(nameof(numbers.Count));  // output: Count\nConsole.WriteLine(nameof(numbers.Add));  // output: Add\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/operators/nameof"},"Expresi\xf3n nameof (referencia de C#)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.delftstack.com/es/howto/csharp/csharp-nameof/#google_vignette"},"La expresi\xf3n nameof en C#"))))),(0,i.yg)("h2",{id:"record"},"Record"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Antes solo pod\xedamos trabajar con dos tipos de estructuras para almacenar informaci\xf3n: class y struct."),(0,i.yg)("li",{parentName:"ul"},"Con C# 9 o posterior disponemos de un tercer elemento para almacenar informaci\xf3n: record, tambi\xe9n conocido como registro."),(0,i.yg)("li",{parentName:"ul"},"Los records son una caracter\xedstica introducida en C# 9.0 que permiten crear tipos de datos inmutables de una manera concisa y clara. Se utilizan principalmente para representar datos en aplicaciones donde la comparaci\xf3n de valores y la inmutabilidad son importantes.")),(0,i.yg)("h4",{id:"caracter\xedsticas-de-los-records"},"Caracter\xedsticas de los Records"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Inmutabilidad: Por defecto, las propiedades de un record son inmutables. Esto significa que una vez que se crea un objeto de tipo record, sus propiedades no se pueden cambiar."),(0,i.yg)("li",{parentName:"ol"},"Comparaci\xf3n de Valores: A diferencia de las clases, los records comparan sus valores en lugar de sus referencias en memoria. Esto significa que dos instancias de un record con los mismos valores son consideradas iguales."),(0,i.yg)("li",{parentName:"ol"},"Sintaxis Concisa: La declaraci\xf3n de records es m\xe1s simple y menos verbosa que la de clases. Puedes definir propiedades y el constructor en una sola l\xednea utilizando par\xe1metros posicionales."),(0,i.yg)("li",{parentName:"ol"},"Descomposici\xf3n: Los records permiten descomponer objetos de manera f\xe1cil, lo que es \xfatil para patrones como el de desestructuraci\xf3n.")),(0,i.yg)("h4",{id:"y-cu\xe1l-es-la-diferencia-con-los-dos-anteriores-que-seguramente-ya-conoces"},"\xbfY cu\xe1l es la diferencia con los dos anteriores que seguramente ya conoces?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Con las clases y las estructuras tenemos el problema de que pueden ser alterados. Los objetos de tipo clase son tipos por referencia, mientras que las estructuras son tipos por valor, que lo m\xe1s que se pod\xedan acercar a un objeto inmutable era declar\xe1ndolas como readonly."),(0,i.yg)("li",{parentName:"ul"},'Los objetos de tipo record, son objetos por referencia que vienen a solucionar el problema existente a la hora de generar objetos inmutables, esto es, objetos que no pueden variar. Por otro lado est\xe1n "a caballo" entre clases y estructuras, puesto que tienen caracter\xedsticas de los dos.'),(0,i.yg)("li",{parentName:"ul"},"Las similitudes con ambos elementos, los vemos inmediatamente al realizar una comparaci\xf3n entre dos registros:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Podremos emplear el operador de igualdad ==, puesto que al ser tipos por referencia nos va a indicar si se tratan de objetos con la misma referencia o no."),(0,i.yg)("li",{parentName:"ul"},"Al igual que con las estructuras, el m\xe9todo Equals nos va a decir si son iguales o no, en funci\xf3n de los valores que tiene."))),(0,i.yg)("li",{parentName:"ul"},"Los records son datos inmutables que b\xe1sicamente se usan como transporte de datos."),(0,i.yg)("li",{parentName:"ul"},"Vienen a sustituir a los objetos conocidos como DTOs que b\xe1sicamente no tienen comportamiento solamente traen las propiedades  para transportar datos."),(0,i.yg)("li",{parentName:"ul"},"Puedes establecer miembros est\xe1ticos en un Record.")),(0,i.yg)("h4",{id:"declarar-un-record"},"Declarar un record"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para que declarar un r\xe9cord con propiedades inmutables puedes usar una sintaxis similar a la de una clase, por ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public record Person\n{\n    public string FirstName { get; init; }\n    public string LastName { get; init; }\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Tambien se puede declarar un record con propiedades inmutables con una nueva sintaxis conocida como par\xe1metros posicionales:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public record Person(string FirstName, string LastName);\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Un record puede ser partial(parcial), es decir que lo puedes dividir en varios archivos."),(0,i.yg)("li",{parentName:"ul"},"Los records soportan herencia.")),(0,i.yg)("h4",{id:"manejar-herencia"},"Manejar herencia"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Los records pueden heredar unicamente de otro record. Un record no puede extender una clase diferente a object.")),(0,i.yg)("h4",{id:"record-structs"},"Record Structs"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A partir de C# 10 puedes declarar un record usando record struct o readonly record struct.")),(0,i.yg)("h4",{id:"ejemplo"},"Ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public record Persona {\n    public string Nombre { get; set; }\n    public string Apellidos { get; set; }\n\n    public Persona (string nombre, string apellidos) {\n        Nombre = nombre;\n        Apellidos = apellidos;\n    }\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Una vez tenemos nuestro registro, vamos crear varios objetos de este tipo:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Dos de ellos ser\xe1n copias uno del otro."),(0,i.yg)("li",{parentName:"ul"},"Un tercer objeto nuevo, pero con los mismos valores."),(0,i.yg)("li",{parentName:"ul"},"Un \xfaltimo objeto con diferentes valores.")))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\nvar persona2 = persona1;\nvar persona3 = new Persona ("Rub\xe9n", "Rubio");\nvar persona4 = new Persona ("Rub\xe9n", "R.");\n\n')),(0,i.yg)("h4",{id:"registros-posicionales"},"Registros posicionales"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Al principio dec\xedamos que vienen a solucionar la definici\xf3n de tipos inmutables, pero... con lo que hemos visto hasta ahora es posible modificar su contenido, por lo que no son inmutables \ud83e\udd14."),(0,i.yg)("li",{parentName:"ul"},"La declaraci\xf3n mediante registros posicionales nos va a permitir, por un lado, simplificar el cuerpo del registro y, por otro, crear un registro realmente inmutable, siendo el propio compilador el que genere por nosotros toda la fontaner\xeda de constructor, deconstructores y propiedades."),(0,i.yg)("li",{parentName:"ul"},"Veamos c\xf3mo reescribir\xedamos el registro Persona para hacerlo inmutable:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public record Persona (string Nombre, string Apellidos);\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El ejemplo anterior ser\xeda equivalente a este otro c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public record Persona {\n    public string Nombre { get; init; }\n    public string Apellidos { get; init; }\n\n    public Persona (string nombre, string apellidos) {\n        Nombre = nombre;\n        Apellidos = apellidos;\n    }\n\n    public void Deconstruct (out string nombre, out string apellidos) {\n        nombre = Nombre;\n        apellidos = Apellidos;\n    }\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Si lo observamos detenidamente, las propiedades no tienen un set, sino que son accesibles \xfanicamente en la inicializaci\xf3n, puesto que son propiedades inicializadoras. De esta forma, ya no podremos alterar el registro siendo realmente inmutable."),(0,i.yg)("li",{parentName:"ul"},"Adem\xe1s, es considerable la reducci\xf3n de c\xf3digo, puesto que hemos reducido toda la declaraci\xf3n a una \xfanica l\xednea de c\xf3digo.")))),(0,i.yg)("h4",{id:"pero-y-si-necesit\xe1semos-constructores-adicionales"},"Pero, \xbfy si necesit\xe1semos constructores adicionales?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para a\xf1adir m\xe1s constructores a nuestro registro, bastar\xe1 con a\xf1adirlos entre llaves a continuaci\xf3n de la declaraci\xf3n y siempre llamando al constructor base mediante el empleo de this:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public record Persona (string Nombre, string Apellidos) {\n    public Persona (string Nombre): this (Nombre, "") {}\n};\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En ese ejemplo se cre\xf3 dos constructores:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Persona(String Nombre , String Apellidos)."),(0,i.yg)("li",{parentName:"ul"},"Persona(String Nombre).")))))),(0,i.yg)("h4",{id:"with"},"With"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Por \xfaltimo, veremos c\xf3mo podemos instanciar registros con ayuda de with, que no es m\xe1s que una forma de generar un registro a partir de otro, previamente existente, al que indicaremos que alguna de sus propiedades debe tener un valor diferente."),(0,i.yg)("li",{parentName:"ul"},"En primer lugar, declararemos un registro a partir del cual copiar:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A continuaci\xf3n, realizaremos la copia mediante igualdad, pero a\xf1adiremos la palabra clave with seguida de la declaraci\xf3n, entre llaves, de los valores que deben ser modificados:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'var persona2 = persona1 with { Nombre = "Fernando" };\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"De esta forma tendremos una copia de persona1 en persona2 pero variando la propiedad Nombre:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'var persona1 = new Persona ("Rub\xe9n", "Rubio");\nvar persona2 = persona1 with { Nombre = "Fernando" };\nConsole.WriteLine ($"Persona 1: {persona1}");\nConsole.WriteLine ($"Persona 2: {persona2}");\n\n')),(0,i.yg)("h4",{id:"ejemplo-de-un-record"},"Ejemplo de un record"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public record Persona(string Nombre, int Edad);\n\nclass Programa\n{\n    static void Main()\n    {\n        Persona persona1 = new Persona("Juan", 30);\n        Persona persona2 = new Persona("Juan", 30);\n        \n        // Comparaci\xf3n de valores\n        Console.WriteLine(persona1 == persona2); // Imprime \'True\'\n    }\n}\n\n\n')),(0,i.yg)("h4",{id:"herencia-en-records"},"Herencia en Records"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Los records en C# admiten la herencia, similar a las clases. Sin embargo, hay algunas reglas y caracter\xedsticas espec\xedficas que debes tener en cuenta:",(0,i.yg)("ol",{parentName:"li"},(0,i.yg)("li",{parentName:"ol"},"Herencia de Records: Puedes crear un record que herede de otro record. Esto permite que un record hijo tenga las propiedades del record padre y tambi\xe9n defina nuevas propiedades."),(0,i.yg)("li",{parentName:"ol"},"Overrides: Cuando creas un record que hereda de otro, puedes sobreescribir m\xe9todos como ToString(), Equals(), y GetHashCode(). Esto puede ser \xfatil si deseas personalizar el comportamiento del record hijo."),(0,i.yg)("li",{parentName:"ol"},"Propiedades Inmutables: En un record derivado, las propiedades que se heredan son tambi\xe9n inmutables a menos que las declares como propiedades en el record hijo."))),(0,i.yg)("li",{parentName:"ul"},"Aqu\xed tienes un ejemplo que ilustra la herencia con records:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public record Persona(string Nombre, int Edad);\n\n// Un record que hereda de Persona\npublic record Empleado(string Nombre, int Edad, string Cargo) : Persona(Nombre, Edad);\n\nclass Programa\n{\n    static void Main()\n    {\n        Empleado empleado = new Empleado("Ana", 28, "Desarrolladora");\n\n        // Mostrando informaci\xf3n\n        Console.WriteLine($"Nombre: {empleado.Nombre}, Edad: {empleado.Edad}, Cargo: {empleado.Cargo}");\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Definici\xf3n de Herencia: ",(0,i.yg)("inlineCode",{parentName:"li"},"public record Empleado(string Nombre, int Edad, string Cargo) : Persona(Nombre, Edad);")," define un record Empleado que hereda de Persona. Aqu\xed, se pasan Nombre y Edad al constructor del record padre."),(0,i.yg)("li",{parentName:"ul"},"Acceso a Propiedades: Empleado puede acceder a las propiedades Nombre y Edad definidas en Persona, as\xed como tener su propia propiedad Cargo."),(0,i.yg)("li",{parentName:"ul"},"Comparaci\xf3n: Los records en la jerarqu\xeda de herencia tambi\xe9n mantienen la comparaci\xf3n de valores, lo que significa que puedes comparar instancias de Empleado y Persona en funci\xf3n de sus propiedades.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Las propiedades de un record son mutables:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public record Persona(string Nombre, int Edad);\n\n// Un record que hereda de Persona\npublic record Empleado(string Nombre, int Edad, string Cargo) : Persona(Nombre, Edad)\n{\n    public string? Departamento { get; set; } // Propiedad mutable\n}\n\nclass Programa\n{\n    static void Main()\n    {\n        // Creando una instancia de Empleado\n        Empleado empleado = new Empleado("Ana", 28, "Desarrolladora");\n\n        // Mostrando informaci\xf3n\n        Console.WriteLine($"Nombre: {empleado.Nombre}, Edad: {empleado.Edad}, Cargo: {empleado.Cargo}");\n\n        // Modificando una propiedad mutable\n        empleado.Departamento = "IT";\n        Console.WriteLine($"Departamento: {empleado.Departamento}");\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://aspnetcoremaster.com/csharp/csharp-records.html"},"C# Records")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/introduccion-a-los-registros-record-y-los-objetos-inmutables-de-csharp-9.aspx"},"Introducci\xf3n a los registros (record) y los objetos inmutables de C# 9")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records"},"Create record types")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://happydevops.com/2022/05/07/que-son-los-record-types-en-c/"},"\xbfQu\xe9 son los record types en C#?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://geeks.ms/jorge/2020/09/25/c-9-0-specification-records/"},"C# 9.0 \u2013 Specification \u2013 Records"))))),(0,i.yg)("h2",{id:"readonly"},"Readonly"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El modificador ",(0,i.yg)("strong",{parentName:"li"},"readonly")," indica que la asignaci\xf3n del valor de un campo se puede realizar en la propia declaraci\xf3n del campo, o bien, en un constructor de la misma clase. Una vez que el constructor de la clase finaliza, no se puede cambiar."),(0,i.yg)("li",{parentName:"ul"},"Si el modificador de solo lectura se usa con un campo de tipo valor, entonces el campo es inmutable. "),(0,i.yg)("li",{parentName:"ul"},"Si el modificador de solo lectura se usa con un campo de tipo de referencia, entonces el modificador de solo lectura evita que el campo sea reemplazado por diferentes instancias del mismo tipo, aqu\xed el modificador de solo lectura no impide que los datos de la instancia se modifiquen.")),(0,i.yg)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n  \nclass GFG {\n  \n    \n    public readonly string str1;\n    public readonly string str2;\n  \n    public readonly string str3 = "gfg";\n  \n    public GFG(string a, string b)\n    {\n  \n        str1 = a;\n        str2 = b;\n        Console.WriteLine("Display value of string 1 {0}, "\n                         + "and string 2 {1}", str1, str2);\n    }\n  \n    static public void Main()\n    {\n        GFG ob = new GFG("GeeksforGeeks", "GFG");\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://geeks.ms/jorge/2019/07/17/poner-una-propiedad-a-readonly-no-te-asegura-que-sea-readonly-ii/"},"Poner una propiedad a readonly no te asegura que sea readonly II")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.infoworld.com/article/3546242/how-to-use-const-readonly-and-static-in-csharp.html"},"How to use const, readonly, and static in C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/readonly-in-c-sharp/"},"Readonly in C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly"},"readonly (C# Reference)"))))),(0,i.yg)("h2",{id:"eventos"},"Eventos"),(0,i.yg)("h4",{id:"qu\xe9-son-los-eventos"},"Qu\xe9 son los eventos"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El concepto event en .NET es muy similar a lo que podr\xeda ser un evento en una empresa. Por ejemplo, Google indica que va a haber un evento para ense\xf1ar el \xfaltimo producto. La empresa notificar\xe1 a los usuarios a trav\xe9s de un email que hay un nuevo producto."),(0,i.yg)("li",{parentName:"ul"},"En este escenario Google es el editor, el cual crea un evento y los usuarios se convierten en suscriptores los cuales participaran en el evento."),(0,i.yg)("li",{parentName:"ul"},"Los eventos son acciones como pueden ser pulsar un bot\xf3n, mover el rat\xf3n etc\xe9tera. Pero no solo tenemos los eventos que vienen predefinidos de lo que ser\xeda la interfaz, sino, que podemos crear eventos propios. "),(0,i.yg)("li",{parentName:"ul"},"Otra forma de describir los eventos es que un evento es un mensaje que es enviado por un objeto para indicar que cierta acci\xf3n va a ocurrir. "),(0,i.yg)("li",{parentName:"ul"},"En C# los eventos, siguen el patr\xf3n editor-suscriptor.")),(0,i.yg)("h4",{id:"editor"},"Editor"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En C# lo que determinamos como editor (publisher) es el elemento que determina cuando un evento se lanza. Por lo tanto, es el objeto que contiene la definici\xf3n de un evento y de su delegado."),(0,i.yg)("li",{parentName:"ul"},"La clase editora invocar\xe1 el evento (el m\xe9todo que contiene el delegado)."),(0,i.yg)("li",{parentName:"ul"},"Les notificara a todos los suscriptores, cuando el evento se lance.")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"El evento es un Delegate."))),(0,i.yg)("h4",{id:"suscriptor"},"Suscriptor"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es un objeto que se registra al evento y provee un event handler, que va a ser el m\xe9todo el cual va a ser ejecutado cuando ese evento ocurre. "),(0,i.yg)("li",{parentName:"ul"},"El que recibe el evento, debe suscribirse(registrarse) y para ello debe informar que m\xe9todo quiere que sea llamado cuando se lance el evento. Es decir, debe proporcionar al evento un delegate con el m\xe9todo que se ejecutara.")),(0,i.yg)("h4",{id:"evento"},"Evento"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es una variable de tipo delegate , te permite  suscribirte al evento.")),(0,i.yg)("h4",{id:"declaraci\xf3n-de-un-evento"},"Declaraci\xf3n de un evento"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En t\xe9rminos generales un evento no es m\xe1s que un delegado encapsulado."),(0,i.yg)("li",{parentName:"ul"},"Por ello lo primero que tenemos que hacer es declarar un delegado. Para cumplir un poco con la estructura de clases he creado una clase llamada Editor y en ella crearemos nuestro delegado.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Editor\n{\n    public delegate void EjemploEvento();\n    public EjemploEvento ejemploEvento;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para indicar que es un evento, \xfanicamente debemos utilizar la palabra clave event antes de la declaraci\xf3n de la variable del tipo de delegado:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Editor\n{\n    public delegate void EjemploEvento();\n    public event EjemploEvento ejemploEvento;\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Evento")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Para subscribirnos a un evento debemos utilizar \u201c+=\u201d y para darnos de baja \u201c-=\u201d.")))),(0,i.yg)("h4",{id:"creaci\xf3n-del-editor"},"Creaci\xf3n del editor"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como ejemplo vamos a utilizar una l\xf3gica de lo que podr\xeda ser una calculadora."),(0,i.yg)("li",{parentName:"ul"},"Para simplificar el uso, veremos simplemente sumar y restar:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public class EditorCalculadora\n{\n    public delegate void EjemploDelegado();\n    public event EjemploDelegado ejemploEvento;\n\n    public void sumar(int a, int b)\n    {\n        if (ejemploEvento != null)\n        {\n            ejemploEvento();\n            Console.WriteLine("La suma es: {0}", a + b);\n        }\n        else\n        {\n            Console.WriteLine("No estas suscrito a los eventos");\n        }\n    }\n\n    public void Restar(int a, int b)\n    {\n        if (ejemploEvento != null)\n        {\n            ejemploEvento();\n            Console.WriteLine("La resta es: {0}", a - b);\n        }\n        else\n        {\n            Console.WriteLine("No estas suscrito a los eventos");\n        }\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como podemos observar disponemos de la clase EditorCalculadora la cual contiene un delegado y un event, adem\xe1s de estos dos elementos, disponemos de dos m\xe9todos uno para sumar y otro para restar. "),(0,i.yg)("li",{parentName:"ul"},"Si miramos dentro de cualquiera de ellos, veremos que lo primero que hacemos es comprobar que el evento no es null, osea que existe, antes de ejecutarlo. ")))),(0,i.yg)("h4",{id:"creaci\xf3n-del-suscriptor"},"Creaci\xf3n del suscriptor"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para el suscriptor creamos una clase llamada SuscriptorCalculadoraVirtual la cual, va a suscribirse a los eventos. "),(0,i.yg)("li",{parentName:"ul"},"Primero debemos definir las variables y el constructor, as\xed como los m\xe9todos que vamos a querer utilizar. "),(0,i.yg)("li",{parentName:"ul"},"Para suscribirnos a los eventos, debemos crear un m\xe9todo que encaje con el delegado de la clase Editor para ello crearemos un m\xe9todo que no reciba par\xe1metros y devuelva void. Este m\xe9todo ser\xe1 ejecutado cada vez que el Editor lance un evento.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public class SuscriptorCalculadoraVirutal\n{\n    EditorCalculadora editor;\n    private readonly int A;\n    private readonly int B;\n\n    public void EjemploEventHandler()\n    {\n        Console.WriteLine("Se va a imprimir el resultado:");\n    }\n\n    public SuscriptorCalculadoraVirutal(int a, int b)\n    {\n        editor = new EditorCalculadora();\n        A = a;\n        B = b;\n    }\n\n    public void ResultadoSuma()\n    {\n        editor.sumar(A, B);\n    }\n\n    public void ResultadoResta()\n    {\n        editor.Restar(A, B);\n    }\n\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como vemos en el constructor definimos las variables y el Editor.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ahora probamos a ejecutar el c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"SuscriptorCalculadoraVirutal calculadoraVirutal = new SuscriptorCalculadoraVirutal(3, 2);\ncalculadoraVirutal.ResultadoSuma();\ncalculadoraVirutal.ResultadoResta();\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como podemos observar nuestro c\xf3digo va a imprimir No estas suscrito a los eventos."),(0,i.yg)("li",{parentName:"ul"},"Y esto es porque no nos hemos suscrito a los eventos. ")))),(0,i.yg)("h4",{id:"c\xf3mo-suscribirse"},"C\xf3mo Suscribirse"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para suscribirnos a un evento en C# debemos enlazar el evento y el m\xe9todo (que se ejecutara  cuando se invoca el evento), utilizando += con el m\xe9todo que hemos creado en nuestra clase suscriptor que coincide con el delegado del editor. "),(0,i.yg)("li",{parentName:"ul"},"En nuestro ejemplo cambiamos el constructor de la clase suscriptora por lo siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public SuscriptorCalculadoraVirutal(int a, int b)\n{\n    editor = new EditorCalculadora();\n    A = a;\n    B = b;\n    editor.ejemploEvento += EjemploEventHandler;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Y si ejecutamos el c\xf3digo vemos la siguiente respuesta:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Se va a imprimir el resultado:\nLa suma es: 5\nSe va a imprimir el resultado:\nLa resta es: 1\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/events-chsarp"},"Eventos en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://geeks.ms/etomas/2012/01/05/c-bsico-eventos/"},"C# B\xe1sico: Eventos")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://thatcsharpguy.com/post/events-en-c"},"Events en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/programming-guide/events/"},"Eventos (Gu\xeda de programaci\xf3n de C#)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events"},"Procedimiento Suscribir y cancelar la suscripci\xf3n a eventos (Gu\xeda de programaci\xf3n de C#)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/standard/events/"},"Control y generaci\xf3n de eventos"))))),(0,i.yg)("h2",{id:"casting"},"Casting"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando el valor de una variable de un tipo de dato se cambia a otro tipo de dato, se conoce como conversi\xf3n de tipo(casting)."),(0,i.yg)("li",{parentName:"ul"},"La conversi\xf3n de tipo solo es posible si ambos tipos de datos son compatibles entre s\xed; de lo contrario, obtendremos un error en tiempo de compilaci\xf3n que indica que no se puede convertir impl\xedcitamente un tipo a otro."),(0,i.yg)("li",{parentName:"ul"},"El tipo de dato de una variable no se puede cambiar, por ejemplo, una variable de tipo String solo almacena texto y no puede guardar n\xfameros."),(0,i.yg)("li",{parentName:"ul"},"Entendamos esto con un ejemplo. Aqu\xed, estamos creando una variable de tipo de dato int. No Por lo tanto, si declaramos la variable \u201ca\u201d como int, no podemos asignarle como valor el String \u201cHola\u201d.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"int a;\na = \u201cHola\u201d; // error CS0029: no se puede convertir impl\xedcitamente el tipo de String a int\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Sin embargo, se puede usar el valor de una variable para diferentes tipos de datos. Esto se logra mediante la conversi\xf3n de tipos. "),(0,i.yg)("li",{parentName:"ul"},"Entonces, el proceso de convertir el valor de un tipo de dato (int, float, double, etc.) a otro tipo de dato ((int, float, double, etc.)) se conoce como conversi\xf3n de tipos.")),(0,i.yg)("h4",{id:"en-c-podemos-realizar-diferentes-tipos-de-conversiones"},"En C#, podemos realizar diferentes tipos de conversiones."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La conversi\xf3n de tipos  la realiza autom\xe1ticamente el compilador o incluso como desarrollador tambi\xe9n podemos hacerlo expl\xedcitamente y, por lo tanto, la conversi\xf3n de tipos en C# se clasifica en dos tipos."),(0,i.yg)("li",{parentName:"ul"},"Son los siguientes:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Conversi\xf3n impl\xedcita: Conversi\xf3n de un tipo m\xe1s peque\xf1o a un tipo m\xe1s grande. "),(0,i.yg)("li",{parentName:"ul"},"Conversi\xf3n expl\xedcita: Conversi\xf3n de un tipo m\xe1s grande a un tipo m\xe1s peque\xf1o. ")))),(0,i.yg)("h4",{id:"conversi\xf3n-impl\xedcita"},"Conversi\xf3n impl\xedcita"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El compilador realiza autom\xe1ticamente la conversi\xf3n impl\xedcita en C# y, en este caso, no habr\xe1 p\xe9rdida de datos. Aqu\xed, la conversi\xf3n de tipos se realiza de un tipo de datos m\xe1s peque\xf1o a un tipo de datos m\xe1s grande. Este tipo de conversi\xf3n de tipos es segura."),(0,i.yg)("li",{parentName:"ul"},"Generalmente, en el caso de la conversi\xf3n de tipo impl\xedcita, los tipos de datos m\xe1s peque\xf1os como int (que tienen menos tama\xf1o de memoria) se convierten autom\xe1ticamente a tipos de datos m\xe1s grandes como long (que tienen un tama\xf1o de memoria mayor)."),(0,i.yg)("li",{parentName:"ul"},"La conversi\xf3n de tipos impl\xedcita ocurre cuando:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Los dos tipos de datos son compatibles."),(0,i.yg)("li",{parentName:"ul"},"Cuando asignamos un valor de un tipo de dato m\xe1s peque\xf1o a un tipo de datos m\xe1s grande."))),(0,i.yg)("li",{parentName:"ul"},"Por ejemplo, en C#, los tipos de datos num\xe9ricos como byte, short, int, long, double, float, decimal, etc. son compatibles entre s\xed, pero no se admite ninguna conversi\xf3n autom\xe1tica de tipo num\xe9rico a tipo char o tipo booleano. Adem\xe1s, char y bool no son compatibles entre s\xed. Entonces, antes de convertir, el compilador primero verificar\xe1 la compatibilidad de tipos y luego decidir\xe1 si es bueno convertir o arrojar alg\xfan error."),(0,i.yg)("li",{parentName:"ul"},"El siguiente diagrama muestra los tipos impl\xedcitos de conversi\xf3n que admite C#:")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/implicit-types-of-conversion-that-are-supported-by-1.png?ezimgfmt=ng:webp/ngcb1",alt:"diagrama"})),(0,i.yg)("h5",{id:"ejemplo-2"},"Ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"int myInt = 9;\ndouble myDouble = myInt;       // El int se convierte en double\n\nConsole.WriteLine(myInt);      // Outputs 9\nConsole.WriteLine(myDouble);   // Outputs 9\n\n")),(0,i.yg)("h5",{id:"otro-ejemplo"},"Otro ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int numInt = 1500;\n\n        Type numIntType = numInt.GetType();\n\n            // Conversi\xf3n implicita\n            double numDouble = numInt;\n\n            \n            Type numDoubleType = numDouble.GetType();\n\n             Valor antes de la conversi\xf3n\n            Console.WriteLine($"numInt value: {numInt}" );\n            Console.WriteLine($"numInt Type: {numIntType}");\n            Console.WriteLine($"Int Size: {sizeof(int)} Bytes");\n\n            // Valor despu\xe9s de la conversi\xf3n\n            Console.WriteLine($"numDouble value: {numDouble}");\n            Console.WriteLine($"numDouble Type: {numDoubleType}");\n            Console.WriteLine($"double Size: {sizeof(double)} Bytes");\n\n            Console.ReadKey();\n        }\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En el siguiente ejemplo, hemos creado una variable entera con el nombre numInt, es decir, int numInt = 1500;. "),(0,i.yg)("li",{parentName:"ul"},"Observe la l\xednea  double numDouble = numInt; Aqu\xed, asignamos el valor de la variable de tipo int a una variable de tipo double. En este caso, el compilador convertir\xe1 autom\xe1ticamente el valor de tipo int a tipo double."),(0,i.yg)("li",{parentName:"ul"},"Esto se debe a que tanto int como double son tipos num\xe9ricos y, por tanto, los tipos son compatibles. Y adem\xe1s, int ocupa 4 bytes de memoria y double ocupa 8 bytes de memoria y, por lo tanto, no hay problema para almacenar 4 bytes de datos dentro de una ubicaci\xf3n de memoria de 8 bytes. "),(0,i.yg)("li",{parentName:"ul"},"Adem\xe1s, aqu\xed hemos utilizado el m\xe9todo GetType() para verificar el tipo de datos de las variables numInt y numDouble y tambi\xe9n estamos usando la funci\xf3n sizeof para verificar el tama\xf1o de los tipos de datos int y double.")))),(0,i.yg)("h4",{id:"casting-expl\xedcito"},"Casting expl\xedcito"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Obtendr\xe1 errores de compilaci\xf3n cuando los tipos no sean compatibles entre s\xed. Por ejemplo, asignar un valor double a un tipo de dato int genera un error en tiempo de compilaci\xf3n, como se muestra en el siguiente ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\ndouble numDouble = 1.23;\nint numInt = numDouble;\nConsole.WriteLine("Original double Value: " + numDouble);\nConsole.WriteLine("Converted int Value: " + numInt);\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como puede ver, aparece un error de compilaci\xf3n que indica que no se puede convertir impl\xedcitamente el tipo 'double' a 'int'. "),(0,i.yg)("li",{parentName:"ul"},"Eso significa que, si desea este tipo de conversi\xf3n, debe utilizar expl\xedcitamente el operador de conversi\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Entonces, si queremos asignar un valor de un tipo de dato m\xe1s grande a un tipo de datos m\xe1s peque\xf1o, entonces debemos realizar una conversi\xf3n de tipos expl\xedcita en C#. Esto es \xfatil para tipos de datos compatibles donde el compilador no puede realizar la conversi\xf3n autom\xe1tica de tipos. "),(0,i.yg)("li",{parentName:"ul"},"Vea, ya sea que se trate de una conversi\xf3n de tipos impl\xedcita o una conversi\xf3n de tipos expl\xedcita, los tipos de tipos deben ser compatibles, entonces solo ser\xe1 posible la conversi\xf3n de tipos.")),(0,i.yg)("h5",{id:"uso"},"Uso"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La conversi\xf3n expl\xedcita se debe realizar manualmente colocando el tipo de dato entre par\xe9ntesis atr\xe1s del valor:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"double myDouble = 9.78;\nint myInt = (int) myDouble;    // El double se convierte en int\n\nConsole.WriteLine(myDouble);   // Outputs 9.78\nConsole.WriteLine(myInt);      // Outputs 9\n\n")),(0,i.yg)("h5",{id:"ejemplo-3"},"Ejemplo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el siguiente ejemplo, hemos creado una variable double llamada numDouble, es decir, double numDouble = 1,23 ;. "),(0,i.yg)("li",{parentName:"ul"},"Observe la l\xednea ,  int numInt = (int)numDouble. Aqu\xed, (int) es una expresi\xf3n de conversi\xf3n que convierte expl\xedcitamente el valor de tipo double 1,23 a tipo int:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\ndouble numDouble = 1.23;\n// Conversi\xf3n explicita\nint numInt = (int)numDouble;\n// Valor antes de la conversi\xf3n\nConsole.WriteLine("Original double Value: " + numDouble);\n// Valor despu\xe9s de la conversi\xf3n\nConsole.WriteLine("Converted int Value: " + numInt);\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Aqu\xed puede ver que el valor original es 1,23 mientras que el valor convertido es 1. Eso significa que hemos perdido algunos datos durante la conversi\xf3n de tipo. Esto se debe a que estamos convirtiendo expl\xedcitamente el tipo de dato m\xe1s grande double al tipo m\xe1s peque\xf1o int."))),(0,i.yg)("h4",{id:"siempre-perdemos-datos-cuando-convertimos-un-tipo-m\xe1s-grande-a-un-tipo-m\xe1s-peque\xf1o-en-c"},"\xbfSiempre perdemos datos cuando convertimos un tipo m\xe1s grande a un tipo m\xe1s peque\xf1o en C#?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La respuesta es no. B\xe1sicamente depende del valor que estemos convirtiendo y del tama\xf1o del tipo de dato que va a almacenar el valor convertido. Para una mejor comprensi\xf3n, eche un vistazo al siguiente c\xf3digo.")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/word-image-27425-5-3.png?ezimgfmt=ng:webp/ngcb1",alt:"C\xf3digo"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el caso anterior no perderemos ning\xfan dato. Esto se debe a que la variable entera contiene el valor 100 y en el tipo de dato byte, podemos almacenar los valores de 0 a 255, y 100 est\xe1 dentro de este rango y, por lo tanto, no se pierden datos. Ahora, observe el siguiente c\xf3digo.")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/word-image-27425-6-5.png?ezimgfmt=ng:webp/ngcb1",alt:"C\xf3digo"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el caso anterior, perderemos los datos. Esto se debe a que la variable entera contiene el valor 500 y en el tipo de datos byte, podemos almacenar los valores de 0 a 255, y 500 no est\xe1 dentro de este rango y, por lo tanto, hay p\xe9rdida de datos. El c\xf3digo de ejemplo completo se proporciona a continuaci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nint IntNum1 = 100;\nbyte ByteNum1 = (byte)IntNum1; \nConsole.WriteLine($"Original Value:{IntNum1} and Converted Value:{ByteNum1}");\nint IntNum2 = 500;\nbyte ByteNum2 = (byte)IntNum2; \nConsole.WriteLine($"Original Value:{IntNum2} and Converted Value:{ByteNum2}");\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("h4",{id:"m\xe9todos-de-conversi\xf3n-de-tipos"},"M\xe9todos de conversi\xf3n de tipos"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ahora, observe el siguiente ejemplo. Aqu\xed tenemos una variable de cadena que contiene el valor 100 e intentamos convertir ese valor a un tipo entero. Pero esto no es posible con el operador de conversi\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Porque el operador de conversi\xf3n primero verificar\xe1 la compatibilidad de tipos y descubri\xf3 que string e int no son compatibles entre s\xed porque la cadena se usa para almacenar datos textuales que contienen tanto alfanum\xe9ricos como n\xfameros y int   solo contiene datos num\xe9ricos.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str= "100";\nint i1 = (int)str;\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Entonces, para la conversi\xf3n entre tipos no compatibles como enteros  y  cadenas, .NET Framework nos proporcion\xf3 la clase Convert, el m\xe9todo Parse y el m\xe9todo TryParse. Entendamos estas cosas una por una y veamos c\xf3mo podemos convertir tipos no compatibles en C# con ejemplos.")),(0,i.yg)("h4",{id:"clase-convert"},"Clase Convert"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La clase Convert proporciona algunos m\xe9todos para convertir un valor a un tipo de dato espec\xedfico. Los  m\xe9todos convertir\xe1n el valor independientemente de la compatibilidad de tipos. Significa que, si los tipos son compatibles, se convertir\xe1 y si los tipos no son compatibles, tambi\xe9n intentar\xe1 convertir."),(0,i.yg)("li",{parentName:"ul"},"Entre sus m\xe9todos se encuentran:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Convert.ToBoolean"),(0,i.yg)("li",{parentName:"ul"},"Convert.ToDouble"),(0,i.yg)("li",{parentName:"ul"},"Convert.ToString"),(0,i.yg)("li",{parentName:"ul"},"Convert.ToInt32(int) "),(0,i.yg)("li",{parentName:"ul"},"Convert.ToInt64(long)")))),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/conversion-with-the-helper-class-in-c-1.png?ezimgfmt=ng:webp/ngcb1",alt:"Convert"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Por ejemplo, si desea convertir una cadena a un tipo Int, debe usar Convert.ToInt16 , Convert.ToInt32 o Convert.ToInt64 . Estos m\xe9todos auxiliares se implementan como m\xe9todos est\xe1ticos dentro de la clase Convert y, por lo tanto, puede acceder a ellos directamente. Para una mejor comprensi\xf3n, eche un vistazo al siguiente ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str = "100";\nint i1 = Convert.ToInt32(str); //Convierte un String a Int\ndouble d = 123.45;\nint i2 = Convert.ToInt32(d); //Convierte un double a int\nfloat f = 45.678F;\nstring str2 = Convert.ToString(f); //Convierte un double a string\nConsole.WriteLine($"Original value str: {str} and Converted Value i1:{i1}");\nConsole.WriteLine($"Original value d: {d} and Converted Value i2:{i2}");\nConsole.WriteLine($"Original value f: {f} and Converted Value str2:{str2}");\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando utilizamos el m\xe9todo auxiliar de la clase Convert para convertir un valor a un tipo de dato espec\xedfico, si los tipos no son compatibles, no arrojar\xe1 ning\xfan error en el momento de la compilaci\xf3n. En tiempo de ejecuci\xf3n, intentar\xe1 convertir el valor a ese tipo particular y si el valor es compatible, lo convertir\xe1 y si el valor no es compatible, arrojar\xe1 un error en tiempo de ejecuci\xf3n. Para una mejor comprensi\xf3n, eche un vistazo al siguiente ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str = "Hello";\nint i1 = Convert.ToInt32(str); //Convertimos un String a int\nConsole.WriteLine($"Original value str: {str} and Converted Value i1:{i1}");\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Cuando ejecutamos el c\xf3digo anterior, obtendremos un error de ejecuci\xf3n. Esto se debe a que en tiempo de ejecuci\xf3n intenta convertir el valor Hola a un tipo entero, lo cual no es posible y, por lo tanto, generar\xe1 una excepci\xf3n en tiempo de ejecuci\xf3n."))),(0,i.yg)("h4",{id:"parse"},"Parse()"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En C#, tambi\xe9n podemos usar el m\xe9todo Parse() integrado para realizar la conversi\xf3n de tipos."),(0,i.yg)("li",{parentName:"ul"},"Ahora, si va a la definici\xf3n de tipos de datos integrados como int, short, long, bool, etc., ver\xe1 que el m\xe9todo Parse se implementa como un m\xe9todo est\xe1tico en esos tipos de datos de valores integrados.  Entonces, usando la clase del tipo de dato, podemos llamar al m\xe9todo Parse."),(0,i.yg)("li",{parentName:"ul"},"Para una mejor comprensi\xf3n, eche un vistazo al siguiente ejemplo. En el siguiente ejemplo, estamos realizando dos conversiones de tipos incompatibles. Primero, convertimos el valor de cadena 100 a tipo entero y en la segunda conversi\xf3n, convertimos la cadena a booleano.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str1 = "100";\n//Convertimos un String a int\nint i = int.Parse(str1);\nConsole.WriteLine($"Original String value: {str1} and Converted int value: {i}");\nstring str2 = "TRUE";\n//Convertimos un String a booleano\nbool b= bool.Parse(str2);\nConsole.WriteLine($"Original String value: {str2} and Converted bool value: {b}");\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Ahora, cuando ejecute el c\xf3digo anterior, obtendr\xe1 el siguiente resultado. Aqu\xed, los valores son compatibles con el tipo, es decir, el valor 100 es compatible con el tipo int y el valor TRUE es compatible con el tipo bool y, por lo tanto, en tiempo de ejecuci\xf3n, estas conversiones de tipos se realizaron correctamente."))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Al igual que el m\xe9todo auxiliar de la clase Convert, si el valor no es compatible con el tipo de destino, tambi\xe9n obtendr\xe1 un error en tiempo de ejecuci\xf3n. Para una mejor comprensi\xf3n, eche un vistazo al siguiente ejemplo en el que intentamos almacenar el valor de cadena Hola en la variable entera:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str1 = "Hello";\nint i = int.Parse(str1);\nConsole.WriteLine($"Original String value: {str1} and Converted int value: {i}");\nConsole.ReadKey();\n}\n}\n} \n\n')),(0,i.yg)("h4",{id:"tryparse"},"TryParse()"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando usamos el m\xe9todo Parse, si la conversi\xf3n no es posible, en tiempo de ejecuci\xf3n obtendremos una excepci\xf3n, lo cual no es bueno. Porque si la conversi\xf3n no es posible, entonces deber\xedamos mostrar cierta informaci\xf3n al usuario y continuar."),(0,i.yg)("li",{parentName:"ul"},"Para hacerlo, las clases de tipos de datos integrados en C# proporcionan el m\xe9todo TryParse."),(0,i.yg)("li",{parentName:"ul"},"Veamos c\xf3mo utilizar el m\xe9todo TryParse en C#. Supongamos que queremos convertir una cadena a un tipo entero, podemos usar el m\xe9todo TryParse de la siguiente manera:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"bool IsConverted = int.TryParse(\u201c100\u201d, out int I1);\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Aqu\xed, lo que har\xe1 el m\xe9todo TryParse es intentar convertir el valor de cadena 100 a un tipo entero. Si la conversi\xf3n es exitosa, har\xe1 dos cosas. Primero, almacenar\xe1 el valor convertido en la variable I1 y luego devolver\xe1 verdadero. Por otro lado, si la conversi\xf3n falla, no almacenar\xe1 nada en la variable I1 y devolver\xe1 falso.")))),(0,i.yg)("h5",{id:"ejemplo-4"},"Ejemplo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el siguiente ejemplo, la primera conversi\xf3n es exitosa y, por lo tanto, devolver\xe1 verdadero y almacenar\xe1 el valor convertido 100 en la variable I1. En la segunda conversi\xf3n, la conversi\xf3n fall\xf3 y, por lo tanto, no almacenar\xe1 nada en la variable I2 y esta vez devolver\xe1 falso:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace TypeCastingDemo\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nstring str1 = "100";\nbool IsConverted1 = int.TryParse(str1, out int I1);\nif (IsConverted1)\n{\nConsole.WriteLine($"Original String value: {str1} and Converted int value: {I1}");\n}\nelse\n{\nConsole.WriteLine($"Try Parse Failed to Convert {str1} to integer");\n}\nstring str2 = "Hello";\nbool IsConverted2 = int.TryParse(str2, out int I2);\nif (IsConverted2)\n{\nConsole.WriteLine($"Original String value: {str2} and Converted int value: {I2}");\n}\nelse\n{\nConsole.WriteLine($"Try Parse Failed to Convert {str2} to integer");\n}\nConsole.ReadKey();\n}\n}\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.w3schools.com/cs/cs_type_casting.php"},"C# Type Casting")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://dotnettutorials.net/lesson/type-casting-in-csharp/#google_vignette"},"Type Casting in C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.csharptutorial.net/csharp-tutorial/csharp-casting/"},"C# Casting")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://betterprogramming.pub/casting-in-c-b0cdb21e6048"},"Casting in C# \u2014 Do type conversion the proper way")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://thatcsharpguy.com/post/casting-implicit-y-explicit-en-c"},"Casting: implicit y explicit en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/c-sharp-type-casting/"},"C# | Type Casting"))))),(0,i.yg)("h2",{id:"ifelse"},"If/Else"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'Use "if" para especificar un bloque de c\xf3digo que se ejecutar\xe1, si una condici\xf3n especificada es verdadera.'),(0,i.yg)("li",{parentName:"ul"},'Use "else" para especificar un bloque de c\xf3digo que se ejecutar\xe1, si la misma condici\xf3n es falsa.'),(0,i.yg)("li",{parentName:"ul"},'Use "else if" para especificar una nueva condici\xf3n para probar, si la primera condici\xf3n es falsa.')),(0,i.yg)("h4",{id:"if"},"If"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La declaraci\xf3n if contiene una condici\xf3n booleana seguida de un bloque de c\xf3digo de una o varias l\xedneas."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n booleana se eval\xfaa como verdadera, entonces el bloque de c\xf3digo se ejecutar\xe1 en tiempo de ejecuci\xf3n; de lo contrario, no."),(0,i.yg)("li",{parentName:"ul"},"En Resumen, la sentencia if es una estructura de control de flujo en C# que permite ejecutar un bloque de c\xf3digo solo si se cumple una condici\xf3n dada.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if (condici\xf3n)\n{\n    // bloque de c\xf3digo que se ejecutar\xe1 cuando la condici\xf3n se eval\xfae como verdadera\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En la condici\xf3n que se eval\xfaa en el bloque if, se puede especificar cualquier expresi\xf3n que devuelva un valor booleano (true o false). Si la condici\xf3n se eval\xfaa como true, se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del if."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n se eval\xfaa como false, se saltar\xe1 el bloque de c\xf3digo del if y se continuar\xe1 ejecutando el c\xf3digo que sigue despu\xe9s de la sentencia if.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Aqu\xed hay un ejemplo de c\xf3digo que ilustra el uso de una sentencia if en C#:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int number = 42; \nif (number > 0) { \nConsole.WriteLine("The number is positive."); \n} \n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, se eval\xfaa si el n\xfamero es mayor que cero. Si la condici\xf3n se cumple (number > 0 ), se eval\xfaa como true y se escribir\xe1 en la consola el mensaje \xabThe number is positive.\xbb."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n no se cumple, se saltar\xe1 el bloque de c\xf3digo del if y se continuar\xe1 ejecutando el c\xf3digo que sigue despu\xe9s de la sentencia if.")))),(0,i.yg)("h5",{id:"mas-ejemplos"},"Mas ejemplos"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int i = 10, j = 20;\n\nif (i < j)\n{\n    Console.WriteLine("i is less than j");\n}        \n\nif (i > j)\n{\n    Console.WriteLine("i is greater than j");\n}\n\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args)\n{\n    int i = 10, j = 20;\n\n    if (isGreater(i, j))\n    {\n        Console.WriteLine("i is less than j");\n    }        \n\n    if (isGreater(j, i))\n    {\n        Console.WriteLine("j is greater than i");\n    }\n}\n\nstatic bool isGreater(int i, int j)\n{\n    return i > j;                    \n}\n\n')),(0,i.yg)("h4",{id:"if---else"},"If - Else"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La sentencia if-else es una estructura de control de flujo en C# que permite ejecutar un bloque de c\xf3digo si se cumple una condici\xf3n y otro bloque de c\xf3digo si no se cumple la condici\xf3n. La sintaxis de una sentencia if-else en C# es la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if (condici\xf3n) { \n// C\xf3digo a ejecutar si se cumple la condici\xf3n \n} else \n{ \n// C\xf3digo a ejecutar si no se cumple la condici\xf3n \n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En la condici\xf3n que se eval\xfaa en el bloque if, se puede especificar cualquier expresi\xf3n que devuelva un valor booleano (true o false). Si la condici\xf3n se eval\xfaa como true, se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del if."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n se eval\xfaa como false, se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del else.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Aqu\xed hay un ejemplo de c\xf3digo que ilustra el uso de una sentencia if-else en C#:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int number = 42; \nif (number > 0) {\n Console.WriteLine("The number is positive."); \n} else { \nConsole.WriteLine("The number is not positive.");\n }\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, se eval\xfaa si el n\xfamero es mayor que cero. Si la condici\xf3n se cumple (number > 0 ), se eval\xfaa como true y se escribir\xe1 en la consola el mensaje \xabThe number is positive.\xbb."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n no se cumple (number > 0 ), se eval\xfaa como false y se escribir\xe1 en la consola el mensaje \xabThe number is not positive.\xbb.")))),(0,i.yg)("h4",{id:"if-anidados"},"If anidados"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La sentencia if anidada es una estructura de control de flujo en C# que permite evaluar varias condiciones y ejecutar diferentes bloques de c\xf3digo en funci\xf3n de ellas. La sintaxis de una sentencia if anidada en C# es la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if (condici\xf3n1) {\n // C\xf3digo a ejecutar si se cumple la condici\xf3n1 \nif (condici\xf3n2) { \n// C\xf3digo a ejecutar si se cumple la condici\xf3n2 \n} \nelse {\n // C\xf3digo a ejecutar si no se cumple la condici\xf3n2 \n} \n} else {\n // C\xf3digo a ejecutar si no se cumple la condici\xf3n1 \n} \n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En el ejemplo anterior, primero se eval\xfaa la condici\xf3n1. Si se cumple (se eval\xfaa como true), se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del primer if."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n1 no se cumple (se eval\xfaa como false), se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del else. "),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n1 se cumple, se evaluar\xe1 la condici\xf3n2."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n2 se cumple (se eval\xfaa como true), se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del segundo if."),(0,i.yg)("li",{parentName:"ul"},"Si la condici\xf3n2 no se cumple (se eval\xfaa como false), se ejecutar\xe1 el bloque de c\xf3digo que est\xe1 dentro de las llaves {} del segundo else.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Aqu\xed tienes un ejemplo de c\xf3digo que ilustra c\xf3mo usar la sentencia de if anidados en C#:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace ConsoleApp {\n  class Program {\n    static void Main(string[] args) {\n      int number = 10;\n      if (number > 0) {\n        Console.WriteLine("El n\xfamero es positivo.");\n        if (number % 2 == 0) {\n          Console.WriteLine("El n\xfamero es par.");\n        }\n        Else {\n          Console.WriteLine("El n\xfamero es impar.");\n        }\n      } else {\n        Console.WriteLine("El n\xfamero es negativo.");\n      }\n      Console.ReadLine();\n    }\n  }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, se define una variable number con el valor 10. Luego, se comprueba si number es mayor que cero. Si se cumple esta condici\xf3n, se imprime en la consola \xabEl n\xfamero es positivo\xbb."),(0,i.yg)("li",{parentName:"ul"},"A continuaci\xf3n, se comprueba si number es par. Si es par, se imprime en la consola \xabEl n\xfamero es par\xbb. Si no es par, se imprime en la consola \xabEl n\xfamero es impar\xbb."),(0,i.yg)("li",{parentName:"ul"},"Si number no es mayor que cero, se imprime en la consola \xabEl n\xfamero es negativo\xbb.")))),(0,i.yg)("h4",{id:"else-if"},"Else if"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La estructura else if en C# se utiliza para comprobar m\xfaltiples condiciones."),(0,i.yg)("li",{parentName:"ul"},"Se pueden utilizar varias declaraciones \u201celse if\u201d despu\xe9s de una declaraci\xf3n \u201cif\u201d."),(0,i.yg)("li",{parentName:"ul"},"S\xf3lo se ejecutar\xe1 cuando la condici\xf3n \u201cif\u201d se eval\xfae como falsa y la condici\xf3n de \u201celse if\u201d se evalu\xe9 como verdadera. Por lo tanto, se puede ejecutar un \u201cif\u201d o una de las declaraciones \u201celse if\u201d, pero no ambas."),(0,i.yg)("li",{parentName:"ul"},"La sintaxis de la estructura else if es la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if (condici\xf3n 1) {\n  // C\xf3digo a ejecutar si se cumple la condici\xf3n 1\n}\nelse if (condici\xf3n 2) {\n  // C\xf3digo a ejecutar si se cumple la condici\xf3n 2 y no se cumple la condici\xf3n 1\n}\nelse if (condici\xf3n 3) {\n  // C\xf3digo a ejecutar si se cumple la condici\xf3n 3 y no se cumple ninguna de las condiciones anteriores\n}...\nelse {\n  // C\xf3digo a ejecutar si ninguna de las condiciones anteriores se cumple\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En cada bloque if o else if, se comprueba una condici\xf3n. Si la condici\xf3n es verdadera, se ejecuta el c\xf3digo correspondiente. Si ninguna de las condiciones es verdadera, se ejecuta el c\xf3digo en el bloque else.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Aqu\xed tienes un ejemplo de c\xf3digo que ilustra c\xf3mo usar la estructura else if en C#:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace ConsoleApp {\n  class Program {\n    static void Main(string[] args) {\n      int number = 10;\n      if (number > 0) {\n        Console.WriteLine("El n\xfamero es positivo.");\n      }\n      else if (number < 0) {\n        Console.WriteLine("El n\xfamero es negativo.");\n      }\n      else {\n        Console.WriteLine("El n\xfamero es cero.");\n      }\n      Console.ReadLine();\n    }\n  }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, se define una variable number con el valor 10. Luego, se comprueba si number es mayor que cero. Si se cumple esta condici\xf3n, se imprime en la consola \xabEl n\xfamero es positivo\xbb."),(0,i.yg)("li",{parentName:"ul"},"Si no se cumple esta condici\xf3n, se comprueba si number es menor que cero. Si se cumple esta condici\xf3n, se imprime en la consola \xabEl n\xfamero es negativo\xbb. Si ninguna de las dos condiciones se cumple, se imprime en la consola \xabEl n\xfamero es cero\xbb.")))),(0,i.yg)("h5",{id:"ejemplo-5"},"Ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int i = 10, j = 20;\n\nif (i == j)\n{\n    Console.WriteLine("i is equal to j");\n}\nelse if (i > j)\n{\n    Console.WriteLine("i is greater than j");\n}\nelse if (i < j)\n{\n    Console.WriteLine("i is less than j");\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Puedes usar la cantidad que quieras de declaraciones \u201celse if\u201d.")))),(0,i.yg)("h4",{id:"else"},"Else"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La declaraci\xf3n else solo puede venir despu\xe9s de la declaraci\xf3n \u201cif\u201d o \u201celse if\u201d y solo se puede usar una vez en las declaraciones \u201cif-else\u201d. "),(0,i.yg)("li",{parentName:"ul"},"La declaraci\xf3n else no puede contener ninguna condici\xf3n y se ejecutar\xe1 cuando todas las condiciones anteriores \u201cif\u201d o  \u201celse if\u201d sean  falsas."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int i = 20, j = 20;\n\nif (i > j)\n{\n    Console.WriteLine("i is greater than j");\n}\nelse if (i < j)\n{\n    Console.WriteLine("i is less than j");\n}\nelse\n{\n    Console.WriteLine("i is equal to j");\n}\n\n')),(0,i.yg)("h4",{id:"declaraciones-if-anidadas"},"Declaraciones If anidadas"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Se pueden anidar todas las declaraciones anteriores."),(0,i.yg)("li",{parentName:"ul"},"Sintaxis:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if(condici\xf3n1) \n{ \n   if(condici\xf3n2) \n    { \n        // bloque de c\xf3digo que se ejecutar\xe1 cuando \n        // condici\xf3n1 y condici\xf3n2 se eval\xfaan como verdaderas \n    } \n    else if(condici\xf3n3) \n    { \n        if(condici\xf3n4) \n        { \n            // bloque de c\xf3digo que se ejecutar\xe1 cuando \n            // s\xf3lo condici\xf3n1 , condici\xf3n3 y condici\xf3n4 se eval\xfaan como verdaderas \n        } \n        else if(condici\xf3n5) \n        { \n            // bloque de c\xf3digo que se ejecutar\xe1 cuando \n            // solo condici\xf3n1, condici\xf3n3 y condici\xf3n5 se eval\xfaan como verdaderas \n        } \n        else \n        {\n            // bloque de c\xf3digo que se ejecutar\xe1 cuando \n            // condici\xf3n1 y condici\xf3n3 se eval\xfaen como verdadero \n            // condici\xf3n4 y condici\xf3n5 se eval\xfaen como falso \n        } \n    } \n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int i = 10, j = 20;\n\nif (i != j)\n{\n    if (i < j)\n    {\n        Console.WriteLine("i is less than j");\n    }\n    else if (i > j)\n    {\n       Console.WriteLine("i is greater than j");\n    }\n}\nElse {\n    Console.WriteLine("i is equal to j");\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.tutorialsteacher.com/csharp/csharp-if-else#google_vignette"},"C# - if, else if, else Statements")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/statements/selection-statements"},"Instrucciones de selecci\xf3n if, if-else y switch")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.aulafacil.com/cursos/programacion/en-c/else-else-if-l17108"},"Else / Else if")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.programiz.com/csharp-programming/if-else-statement"},"C# if, if...else, if...else if and Nested if Statement")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/c-sharp-if-else-statement/"},"C# If Else Statement")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.javatpoint.com/c-sharp-if-else"},"C# if-else")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://oregoom.com/c-sharp/if-else/"},"If-else en C#"))))),(0,i.yg)("h2",{id:"crear-una-excepci\xf3n-personalizada"},"Crear una excepci\xf3n personalizada"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para crear una excepci\xf3n personalizada, \xfanicamente debemos crear una clase que implemente la clase Exception e indicar un constructor, como vemos en el ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public class FacturaDiferenteClienteException : Exception\n{\n    public FacturaDiferenteClienteException(string message) : base(message)\n    {\n        Console.WriteLine(message);\n        Util.EnviarEmailAlerta("Intento de hackeo", message);\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como te puedes dar cuenta, estamos llamando al constructor de la clase base pas\xe1ndole un mensaje (hay otro constructor que tambi\xe9n recibe una instancia de Exception que podemos emplear para adjuntar cualquier otra excepci\xf3n que hayamos atrapado para mayor informaci\xf3n)."),(0,i.yg)("li",{parentName:"ul"},"Para simular un sistema he creado una clase Util que contiene un m\xe9todo EnviarEmailAlerta, ya que este ejemplo en concreto es o bien un bug muy gordo o un intento de hackeo.")))),(0,i.yg)("h4",{id:"utilizar-una-excepci\xf3n-personalizada"},"Utilizar una excepci\xf3n personalizada"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para utilizar nuestra excepci\xf3n que acabamos de crear, debemos instanciarla manualmente, para ello, y para agilizar el ejemplo he creado una clase llamada Repository  que tiene un m\xe9todo de instancia al que le pasamos dos ids, y simplemente devuelve true o false."),(0,i.yg)("li",{parentName:"ul"},"Vamos al lio, hacemos la llamada, y si nos devuelve false, es que, en este caso, el cliente y el due\xf1o de la factura no coinciden, con lo que lanzaremos nuestra excepci\xf3n, como vemos en el siguiente c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'if(!repo.ClienteYFacturaDuenoSonElMismo(clienteId, facturaId))\n{\n    throw new FacturaDiferenteClienteException($"El cliente {clienteId} esta intentando acceder a la factura {facturaId} que no le corresponde.");\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/Crear-excepciones-csharp"},"Crear excepciones en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://gherbust.wordpress.com/2016/07/12/excepciones-personalizadas-o-definidas-por-el-usuario-c/"},"EXCEPCIONES PERSONALIZADAS O DEFINIDAS POR EL USUARIO C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://thatcsharpguy.github.io/post/excepciones-c-sharp/"},"Excepciones en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/standard/exceptions/how-to-create-localized-exception-messages"},"Creaci\xf3n de excepciones definidas por el usuario con mensajes de excepci\xf3n localizados"))))),(0,i.yg)("h2",{id:"string-interpolation"},"String interpolation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es un m\xe9todo para concatenar, formatear y manipular cadenas (Strings)."),(0,i.yg)("li",{parentName:"ul"},"Esta caracter\xedstica se introdujo en C# 6. Al utilizar la interpolaci\xf3n de cadenas, podemos usar objetos, variables y expresiones como parte de un String."),(0,i.yg)("li",{parentName:"ul"},"La sintaxis de la interpolaci\xf3n de cadenas comienza con un s\xedmbolo '$' y las expresiones/objetos/variables se definen entre  llaves \"{}\"."),(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, utilizamos el valor de la variable autor en el String:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'string author = "Mahesh Chand";\nstring hello = $"Hello {author} !";\nConsole.WriteLine(hello);\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Otro ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'double price = 19.99;\nint quantity = 3;\nstring total = $ "Total cost for {quantity} items is {price * quantity}.";\nConsole.WriteLine(total); // Outputs: Total cost for 3 items is 59.97.\n\n')),(0,i.yg)("h4",{id:"sintaxis-completa"},"Sintaxis completa"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Pero podemos hacer m\xe1s cosas con el String interpolation, podemos a\xf1adirle caracteres y/o formatear el valor de la variable o expresi\xf3n."),(0,i.yg)("li",{parentName:"ul"},"La sintaxis es asi:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"{<expresi\xf3n/variable >[,<alineaci\xf3n >][:<formatString >]}\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Alineaci\xf3n: es  una expresi\xf3n constante cuyo valor define el n\xfamero m\xednimo de caracteres en la representaci\xf3n de cadena(String) de la expresi\xf3n/variable. Si es positivo, la representaci\xf3n de la cadena est\xe1 alineada a la derecha (genera espacio en blanco para que el texto este a la derecha); si es negativo, est\xe1 alineado a la izquierda (genera espacio en blanco para que el texto este a la izquierda)."),(0,i.yg)("li",{parentName:"ul"},"FormatString: un String de formato compatible con el tipo de dato de la expresi\xf3n/variable.")),(0,i.yg)("h4",{id:"ejemplo-con-la-opci\xf3n-alineaci\xf3n"},"Ejemplo con la opci\xf3n alineaci\xf3n"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Las opciones de alineaci\xf3n le permiten alinear su cadena de salida dentro de un ancho espec\xedfico. "),(0,i.yg)("li",{parentName:"ul"},"La alineaci\xf3n siempre comienza con una coma \u201c,\u201d seguido de un n\xfamero que represente el ancho del campo. He aqu\xed un ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'string name = "John";\nint age = 30;\nstring message = $"{name,-10} is {age} years old."; // Output: "John       is 030 years old."\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"En este ejemplo, hemos alineado la variable nombre a la izquierda con un ancho de 10 caracteres."))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El siguiente ejemplo de c\xf3digo, creamos una cadena con espaciado y agrega 20 caracteres despu\xe9s de la variable autor:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine($"{author}{book, 20}");\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"El espaciado se agrega antes del valor de book ya que esta alineado a la derecha el texto (valor positivo).")))),(0,i.yg)("h4",{id:"ejemplo-con-formatstring"},"Ejemplo con formatString"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Los especificadores de formato(formatString) son \u201ccaracteres especiales\u201d que le permiten formatear el valor de la expresi\xf3n/variable con reglas espec\xedficas. "),(0,i.yg)("li",{parentName:"ul"},"Estos caracteres se colocan despu\xe9s de la variable."),(0,i.yg)("li",{parentName:"ul"},"Los caracteres siempre comienzan con dos puntos \u201c:\u201d."),(0,i.yg)("li",{parentName:"ul"},"En este ejemplo, hemos utilizado el especificador de formato D para formatear la fecha como un patr\xf3n de fecha larga:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'DateTime date = DateTime.Now;\nstring formattedDate = $"{date:D}"; // Output: Tuesday, August 31, 2021\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Formateamos el numero pi para que solo tenga 3 decimales:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'double pi = 3.141592653589793;\nstring formatted = $ "Value of pi to 3 decimal places: {pi:0.###}";\nConsole.WriteLine(formatted); // Outputs: Value of pi to 3 decimal places: 3.142\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejemplo con los dos:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'isTrue?  $"{data,9: N2}\u201d: $"{data, -9: N2}";\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://marketsplash.com/tutorials/c-sharp/csharp-string-interpolation/"},"CSharp String Interpolation And Its Usage")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.w3schools.com/cs/cs_strings_interpol.php"},"C# String Interpolation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated"},"String interpolation using $")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/understanding-string-interpolation-in-c-sharp/"},"String Interpolation In C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://code-maze.com/csharp-string-interpolation/"},"C# String Interpolation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://reintech.io/blog/understanding-proper-way-to-implement-string-interpolation-feature-in-net-csharp"},"Understanding the Proper Way to Implement the String Interpolation Feature in .NET C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.code4it.dev/csharptips/format-interpolated-strings/"},"C# Tip: Format Interpolated Strings")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.shekhali.com/csharp-string-interpolation-with-examples/"},"C# String Interpolation \u2013 Syntax, Examples, and Performance"))))),(0,i.yg)("h2",{id:"funciones-as\xedncronas"},"Funciones as\xedncronas"),(0,i.yg)("h4",{id:"termino-as\xedncrono"},"Termino as\xedncrono"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El t\xe9rmino as\xedncrono se refiere al concepto de que m\xe1s de una cosa ocurre al mismo tiempo, o m\xfaltiples cosas relacionadas ocurren sin esperar a que la previa se haya completado.")),(0,i.yg)("h4",{id:"qu\xe9-es-la-progamaci\xf3n-as\xedncrona"},"\xbfQu\xe9 es la progamaci\xf3n as\xedncrona?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como su nombre indica nos permite crear c\xf3digo que se va a ejecutar de una forma paralela."),(0,i.yg)("li",{parentName:"ul"},"Un fallo muy com\xfan cuando empezamos a programar es pensar que Task significa multihilo, o que cada Task ser\xe1 un hilo nuevo (Threads), cuando no tiene porqu\xe9 ser siempre as\xed. Cuando invocamos Task estamos invocando la librer\xeda Task parallel la cual se va a encargar de toda la administraci\xf3n de los hilos por nosotros. ")),(0,i.yg)("h4",{id:"introducci\xf3n-a-asyncawait"},"Introducci\xf3n a Async/Await"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Una de las cosas que m\xe1s te pueden frustrar cuando empiezas en el mundo de la programaci\xf3n es ver que, cuando a base de mucho esfuerzo has conseguido que tu programa funcione, el resultado es que funciona... pero se bloquea la interfaz, no escala bien, etc."),(0,i.yg)("li",{parentName:"ul"},'Has o\xeddo o le\xeddo algo sobre "hilos de ejecuci\xf3n" y te decides a probarlos, pero ves que tienes que manejarlos, que sincronizarlos, preguntarles qu\xe9 tal est\xe1n de vez en cuando... Un trabajo tedioso y que muchas veces no es necesario porque existe una herramienta para ello.')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"hilos de ejecuci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Un hilo de ejecuci\xf3n, en los sistemas operativos, representan una secuencia simple de instrucciones ejecutada en paralelo con otras secuencias. "),(0,i.yg)("li",{parentName:"ul"},"Los hilos permiten dividir un programa en dos o m\xe1s tareas que corren simult\xe1neamente, por medio de la multiprogramaci\xf3n.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Desde hace ya mucho tiempo (desde la versi\xf3n 5.0 de C#) tenemos a nuestra disposici\xf3n 2 palabras clave que nos permiten manejar estas situaciones multi-hilo con una l\xf3gica y una sintaxis verdaderamente as\xedncrona."),(0,i.yg)("li",{parentName:"ul"},"Utilizar async / await nos permite escribir de una forma muy f\xe1cil y sencilla c\xf3digo que se ejecuta de forma paralela. ")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"multi-hilo")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"La t\xe9cnica conocida como multihilo te permite procesar varias tareas de forma simult\xe1nea.")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En realidad el asincronismo estaba disponible antes con los m\xe9todos .Begin() y .End() que implementaban algunas clases, pero era dif\xedcil de seguir y de mantener, o tambi\xe9n mediante el uso de la clase Task y su m\xe9todo ContinueWith().")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Estas dos palabras reservadas, en combinaci\xf3n con la clase gen\xe9rica Task, nos permiten disponer de una sintaxis mucho m\xe1s fluida en nuestro c\xf3digo. "),(0,i.yg)("li",{parentName:"ul"},'Tan solo es necesario que a\xf1adamos async en la firma de los m\xe9todos as\xedncronos, usar await en una expresi\xf3n (adentro del m\xe9todo async) que puede demorar en ejecutarse y devolver un Task (generico o no) para especificar que retorna una "tarea" que se esta ejecutando en paralelo con las otras secuencias de c\xf3digo.')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"//As\xedncrono C# >= 5\npublic async Task<int> ExecuteCommandAsync(string command)\n{\n    using (SqlCommand sqlCommand = new SqlCommand(command, sqlConnection))\n    {\n        return await sqlCommand.ExecuteNonQueryAsync();\n    }\n}\n\n\n//S\xedncrono\npublic int ExecuteCommand(string command)\n{\n    using (SqlCommand sqlCommand = new SqlCommand(command, sqlConnection))\n    {\n        return sqlCommand.ExecuteNonQuery();\n    }\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Cuando queremos usar un tipo de dato que devuelve una tarea(Task) , debemos esperar a que se termine de procesar la tarea (acordate que se esta ejecutando en paralelo) para poder usar el tipo, para esto usamos await."),(0,i.yg)("li",{parentName:"ul"},"Si usamos un m\xe9todo async (tienen el prefijo Async) , generalmente usamos await.")))),(0,i.yg)("h4",{id:"de-que-sirve"},"\xbfDe que sirve?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Puedes (y debes) usarlo siempre que consumas un recurso externo a tu c\xf3digo (un fichero, una base de datos, un servicio online...). En general cualquier operaci\xf3n que pueda llegar a tardar por alg\xfan motivo ajeno a tu c\xf3digo y que por lo tanto pueda bloquear tu aplicaci\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Tambi\xe9n puedes usarlo siempre que quieras ejecutar algo en segundo plano dejando disponibles los recursos mientras lo haces."),(0,i.yg)("li",{parentName:"ul"},"Con esto, vas a poder conseguir que no se bloquee una interfaz, que tu aplicaci\xf3n ASP.NET o ASP.NET Core sean capaces de responder a m\xe1s peticiones (y por tanto escalar mejor), o simplemente lograr\xe1s optimizar tus recursos."),(0,i.yg)("li",{parentName:"ul"},"Debemos utilizar programaci\xf3n as\xedncrona siempre que podamos, as\xed de claro, los beneficios que nos trae son muy buenos, sobre todo en rendimiento y respuesta."),(0,i.yg)("li",{parentName:"ul"},"Podemos ver un ejemplo muy claro, si llamamos, desde nuestro programa a 3 apis, y lo hacemos de una en una forma s\xedncrona, el gr\xe1fico de la llamada es similar al siguiente: ")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://www.netmentor.es/Imagen/1a055ee9-68cc-4c9f-b6d7-d5534be4c166.jpg",alt:"Ejemplo"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como vemos las llamadas a los 3 servicios externos llevan un total de 15.5 segundos."),(0,i.yg)("li",{parentName:"ul"},"Mientras que si hacemos las llamadas de forma as\xedncrona tardamos 6 segundos.")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://www.netmentor.es/Imagen/abbfd82f-b332-41e3-b042-e052fac4a52e.jpg",alt:"Ejempo"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Esta l\xf3gica, la podemos aplicar para todos los servicios, por ejemplo una llamada a la base de datos, si tienes que consultar diferentes tablas, puedes hacer todas las llamadas de forma as\xedncrona. ")),(0,i.yg)("h4",{id:"tipo-de-retorno"},"Tipo de retorno"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Una cosa a tener en cuenta es que no siempre se puede utilizar la palabra clave async (y por tanto tampoco await). Los m\xe9todos que la utilicen deben tener un tipo de retorno muy concreto."),(0,i.yg)("li",{parentName:"ul"},"Los tipos de retorno que permite usar async son:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"void"),(0,i.yg)("li",{parentName:"ul"},"Task"),(0,i.yg)("li",{parentName:"ul"},"Task","<","T>"))),(0,i.yg)("li",{parentName:"ul"},"Esto tiene l\xf3gica porque lo que devuelves realmente es una tarea (o nada en el caso de void, que se a\xf1adi\xf3 para poder usarlo en los manejadores de eventos)."),(0,i.yg)("li",{parentName:"ul"},'Tambi\xe9n conviene tener en cuenta que existe una convenci\xf3n de nombres de m\xe9todos a la hora de crear m\xe9todos as\xedncronos. \xc9stos tienen que terminar su nombre con el sufijo "Async" para poder diferenciarlos f\xe1cilmente (es decir, no es obligatorio, pero s\xed muy recomendable).'),(0,i.yg)("li",{parentName:"ul"},"Si queremos usar el tipo de dato que se obtiene de un metodo con el prefijo Async , debemos usamos await.")),(0,i.yg)("h4",{id:"ejemplo-6"},"Ejemplo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Disponemos del siguiente c\xf3digo que hemos decidido convertir en as\xedncrono: ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public Articulo GetArticulo(int id)\n{\n    using(MySqlConnection conexion = new MySqlConnection(conexionString))\n    {\n        //Codigo para el select\n        conexion.Open();\n        MySqlCommand comando = new MySqlCommand();\n        comando.CommandText = "select * from articulo where id = ?articuloId;";\n        comando.Parameters.Add("?articuloId", MySqlDbType.Int32).Value = id;\n        comando.Connection = conexion;\n\n        Articulo articulo = new Articulo();\n        using (var reader = comando.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                articulo.Id = Convert.ToInt32(reader["Id"]);\n                articulo.Titulo = reader["Titulo"].ToString();\n                articulo.Contenido = reader["Contenido"].ToString();\n            }\n\n            return articulo;\n        }\n    }\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como podemos observar es el c\xf3digo de consultar en la base de datos. La forma de convertir este m\xe9todo a as\xedncrono es muy f\xe1cil, para ello \xfanicamente debemos indicar que en vez de devolver una clase Articulo nos devuelve Task","<","T>  donde como vimos en gen\xe9ricos T es un par\xe1metro de tipo gen\xe9rico y por lo tanto T es Articulo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public Task<Articulo> GetArticulo(int id){...}\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como vemos nos indicar\xe1 varios errores, el primero es que debemos utilizar la librer\xeda System.Threading.Tasks y el segundo es que no estamos utilizando las tareas(Task) dentro de nuestro m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"Si hemos indicado el m\xe9todo con Task","<","T> es porque queremos que corra de una forma as\xedncrona. En este escenario podemos llamar a la base de datos de forma as\xedncrona, vamos a ver c\xf3mo."),(0,i.yg)("li",{parentName:"ul"},"Lo primero es abrir la conexi\xf3n, lo cual lo podemos hacer de forma as\xedncrona, actualmente lo hacemos llamando a conexion.Open();. Una forma muy com\xfan cuando se escriben librer\xedas es que si un m\xe9todo es as\xedncrono, le ponemos async al final del nombre, por lo tanto, podemos abrir la conexi\xf3n a la base de datos con el metodo conexion.OpenAsync()."),(0,i.yg)("li",{parentName:"ul"},"El m\xe9todo  conexion.OpenAsync() NO abre la conexi\xf3n como tal, para abrir la conexi\xf3n debemos esperar a que se abra. Para ello utilizaremos la palabra clave await. Por lo que luce de la siguiente manera:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"await conexion.OpenAsync();\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando utilizamos await, debemos utilizar la palabra clave async en la cabecera del m\xe9todo, por lo que el m\xe9todo luce de la siguiente manera:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public async Task<Articulo> GetArticulo(int id){...}\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Y de esta forma ya tenemos nuestro m\xe9todo as\xedncrono:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public async Task<Articulo> GetArticuloAsync(int id)\n{\n    using(MySqlConnection conexion = new MySqlConnection(conexionString))\n    {\n        //Codigo para el select\n        await conexion.OpenAsync();\n        MySqlCommand comando = new MySqlCommand();\n        comando.CommandText = "select * from articulo where id = ?articuloId;";\n        comando.Parameters.Add("?articuloId", MySqlDbType.Int32).Value = id;\n        comando.Connection = conexion;\n\n        Articulo articulo = new Articulo();\n        using (var reader = await comando.ExecuteReaderAsync())\n        {\n            while (reader.Read())\n            {\n                articulo.Id = Convert.ToInt32(reader["Id"]);\n                articulo.Titulo = reader["Titulo"].ToString();\n                articulo.Contenido = reader["Contenido"].ToString();\n            }\n\n            return articulo;\n        }\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Todo metodo as\xedncrono debe tener el prefijo Async en el nombre.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Pero realizar el m\xe9todo de forma as\xedncrona no es suficiente, cuando utilizamos Task","<","> en una parte del proceso debemos ejecutar todo el proceso de forma as\xedncrona, por lo que todos los m\xe9todos del proceso deber\xe1n contener Task","<","T> (ser as\xedncrono)."),(0,i.yg)("li",{parentName:"ul"},"Entonces todos los metodos que  utilicen metodos as\xedncrono deben ser as\xedncrono."),(0,i.yg)("li",{parentName:"ul"},"Como por ejemplo el m\xe9todo que llama a nuestro m\xe9todo que acabamos de modificar, lo convertiremos de: ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public Articulo ConsultarArticulo(int id)\n{\n    return _articuloRepository.GetArticuloAsync(id);\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Al siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public async Task<Articulo> ConsultarArticulo(int id)\n{\n    return await _articuloRepository.GetArticuloAsync(id);\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Si usamos un m\xe9todo async (tienen el prefijo Async) , generalmente usamos await.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Y  como este, todos los metodos que utilicen el metodo GetArticuloAsync.")),(0,i.yg)("h4",{id:"await"},"Await"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como acabo de comentar para recibir el objeto que deseamos de un m\xe9todo que devuelve Task","<","T> debemos esperar y para ello indicamos la palabra clave await."),(0,i.yg)("li",{parentName:"ul"},"Entonces con el await , esperamos a que se ejecute una expresi\xf3n  y una vez que se termino de ejecutar , seguimos con el c\xf3digo."),(0,i.yg)("li",{parentName:"ul"},"Debemos ser cuidadosos, ya que podemos convertir nuestro c\xf3digo as\xedncrono en sincrono de una manera muy sencilla. Por ejemplo el siguiente c\xf3digo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Articulo articulo1 = await _articuloRepository.GetArticulo(1);\nArticulo articulo2 = await _articuloRepository.GetArticulo(2);\nArticulo articulo3 = await _articuloRepository.GetArticulo(3);\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Ejecuta las instrucciones una por una y en orden, espera a que la primera con el id 1 termine, para empezar la segunda y as\xed sucesivamente.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Para ejecutar dichas acciones de forma as\xedncrona debemos llamar al m\xe9todo que devuelve Task, y una vez tenemos esta Task en una variable, hacer el await:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Task<Articulo> taskArticulo1 =  _articuloRepository.GetArticulo(1);\nTask<Articulo> taskArticulo2 =  _articuloRepository.GetArticulo(2);\nTask<Articulo> taskArticulo3 =  _articuloRepository.GetArticulo(3);\n\nArticulo articulo3 = await taskArticulo3;\nArticulo articulo2 = await taskArticulo2;\nArticulo articulo1 = await taskArticulo1;\n\n")),(0,i.yg)("h4",{id:"m\xe9todo-alternativo"},"M\xe9todo alternativo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Alternativamente al caso que acabamos de ver cuando tenemos m\xfaltiples tareas para ejecutar. C# nos provee un m\xe9todo llamado Task.WhenAll(IEnumerable","<","Task>) el cual como observamos nos permite indicar una lista de Task para ejecutar:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Task<Articulo> taskArticulo1 = _articuloRepository.GetArticulo(1);\nTask<Articulo> taskArticulo2 = _articuloRepository.GetArticulo(2);\nTask<Autor> taskAutor1 = _autorRepository.GetAutor(1);\n\n_ = Task.WhenAll(taskArticulo1, taskArticulo2, taskAutor1);\n\nArticulo articulo1 = taskArticulo1.Result;\nArticulo articulo2 = taskArticulo2.Result;\nAutor autor1 = taskAutor1.Result;\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Como podemos observar, podemos introducir cualquier tipo de Task dentro de nuestra lista, y posteriormente accedemos al resultado con la propiedad. Result;"),(0,i.yg)("li",{parentName:"ul"},"Si intentamos acceder a la propiedad Result antes de esperar con await, no podremos, ya que la tarea no estar\xe1 ejecutada. ")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Debemos priorizar la utilizaci\xf3n de Task.WhenAll sobre await  varias veces y esto es por varios motivos:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"El c\xf3digo luce m\xe1s limpio."),(0,i.yg)("li",{parentName:"ul"},"Propaga los errores correctamente, si tenemos, 10 tareas con await, y uno de los primeros falla puedes perder el error. "),(0,i.yg)("li",{parentName:"ul"},"Utilizar WhenAll espera hasta que TODAS las tareas terminan, incluso si hay errores. es posible que, programando tu, tengas un try{}cath() y si uno falla, saltes una excepci\xf3n, en ese caso parte de tu c\xf3digo querr\xe1 ir a la excepci\xf3n y otra parte esperar, y puede dar errores y cuelgues. ")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/async-y-await-en-c-como-manejar-asincronismo-en-net-de-manera-facil.aspx"},"async y await en C#: c\xf3mo manejar asincronismo en .Net de manera f\xe1cil")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/programacion-asincrona"},"Programaci\xf3n as\xedncrona en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/asynchronous-programming/async-scenarios"},"Programaci\xf3n asincr\xf3nica"))))),(0,i.yg)("h2",{id:"descarte-independiente"},"Descarte independiente"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Un descarte es una variable de solo escritura con el nombre \u201c_\u201d. Es posible asignar todos los valores que queramos descartar a esta variable. "),(0,i.yg)("li",{parentName:"ul"},"No puede usarse en el c\xf3digo (excepto en la instrucci\xf3n de asignaci\xf3n)."),(0,i.yg)("li",{parentName:"ul"},"Los descartes se admiten en los escenarios siguientes:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Al deconstruir tuplas o tipos definidos por el usuario."),(0,i.yg)("li",{parentName:"ul"},"Al realizar llamadas a m\xe9todos mediante par\xe1metros out."),(0,i.yg)("li",{parentName:"ul"},"En una operaci\xf3n de coincidencia de patrones con las instrucciones is y switch."),(0,i.yg)("li",{parentName:"ul"},"Como un identificador independiente cuando quiera identificar expl\xedcitamente el valor de una asignaci\xf3n como descarte.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Por ejemplo, la siguiente llamada al m\xe9todo devuelve una tupla de tres donde el primer y el segundo valor se descartan y area es una variable declarada previamente para establecerse en el tercer componente correspondiente devuelto por GetCityInformation: ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"(_, _, area) = city.GetCityInformation(cityName);\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el ejemplo siguiente se llama al m\xe9todo DateTime.TryParse(String, out DateTime) para determinar si la representaci\xf3n de cadena(string) de una fecha es v\xe1lida en la referencia cultural actual. Dado que al ejemplo solo le interesa validar la cadena de fecha, y no analizarla para extraer la fecha, el argumento out para el m\xe9todo es un descarte: ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"string[] dateStrings = {\"05/01/2018 14:57:32.8\", \"2018-05-01 14:57:32.8\",\n                      \"2018-05-01T14:57:32.8375298-04:00\", \"5/01/2018\",\n                      \"5/01/2018 14:57:32.80 -07:00\",\n                      \"1 May 2018 2:57:32.8 PM\", \"16-05-2018 1:00:32 PM\",\n                      \"Fri, 15 May 2018 20:10:57 GMT\" };\nforeach (string dateString in dateStrings)\n{\n    if (DateTime.TryParse(dateString, out _))\n        Console.WriteLine($\"'{dateString}': valid\");\n    else\n        Console.WriteLine($\"'{dateString}': invalid\");\n}\n// The example displays output like the following:\n//       '05/01/2018 14:57:32.8': valid\n//       '2018-05-01 14:57:32.8': valid\n//       '2018-05-01T14:57:32.8375298-04:00': valid\n//       '5/01/2018': valid\n//       '5/01/2018 14:57:32.80 -07:00': valid\n//       '1 May 2018 2:57:32.8 PM': valid\n//       '16-05-2018 1:00:32 PM': invalid\n//       'Fri, 15 May 2018 20:10:57 GMT': invalid\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Puede usar un descarte independiente para indicar cualquier variable que decida omitir. Un uso t\xedpico es usar una asignaci\xf3n para asegurarse de que un argumento no sea NULL:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'public static void Method(string arg)\n{\n    _ = arg ?? throw new ArgumentNullException(paramName: nameof(arg), message: "arg can\'t be null");\n\n    // Do work with arg.\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://imaginaformacion.com/tutoriales/c-sharp-7-novedades"},"Versiones C# 7: todas las novedades que ha aportado cada una")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/fundamentals/functional/discards"},"Descartes: aspectos b\xe1sicos de C#"))))),(0,i.yg)("h2",{id:"operadores----y-"},'Operadores "??" , "?." y "?"'),(0,i.yg)("h4",{id:"operador-"},"Operador ??"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El operador en cuesti\xf3n, expresado c\xf3mo \u201c?? (dos cierres de interrogaci\xf3n)\u201d, permite devolver un valor si no es nulo, o devolver otro valor alternativo ante la nulidad del primero. En otras palabras, un c\xf3digo como:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'if (s !=null)\n    return s;\nelse {\n    return "por defecto";\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Quedar\xeda, utilizando el nuevo operador, como:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'return s ?? "por defecto";\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://desarrolloweb.com/articulos/operador-null-coalescing.html"},"El operador ?? en C# (Null coalescing operator)"))))),(0,i.yg)("h4",{id:"condicional-"},"Condicional ?."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el desarrollo de software, una buena pr\xe1ctica antes de invocar a los miembros de un objeto es comprobar si el mismo fue instanciado correctamente. "),(0,i.yg)("li",{parentName:"ul"},"El Operador Condicional ?. es una forma abreviada de comprobar si el valor de un objeto es null, antes de tener acceso a sus miembros y hacer uso de ellos. La sintaxis es la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Objeto?.Miembro\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Que es equivalente a:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"if (Objeto != null) {\n   Objeto.Miembro\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"En el siguiente ejemplo tenemos una clase llamada Persona, con una sola propiedad: Nombre. El m\xe9todo MostrarNombre muestra en pantalla el nombre de la persona:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"static void MostrarNombre(Persona persona)\n{\n    if (persona != null)\n       Console.WriteLine(persona.Nombre);\n}\n\n")),(0,i.yg)("p",null,"Con el uso del operador condicional ?. el resultado es el mismo:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"static void MostrarNombre(Persona persona)\n{\n    Console.WriteLine(persona?.Nombre);\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Podemos tambi\xe9n usar m\xfaltiples operadores condicionales de forma combinada. El siguiente c\xf3digo es v\xe1lido:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"static void MostrarCiudadDireccion(Persona persona)\n{\n    Console.WriteLine(persona?.Direccion?.Ciudad);\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En el caso de que persona sea null, el operador ?. no permite el acceso a Direccion ni Ciudad.")))),(0,i.yg)("h4",{id:"es-diferente-a-usar--en-un-tipo-de-dato"},'Es diferente a usar "?" en un tipo de dato'),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El car\xe1cter \u201c?\u201d se usa en tipos de datos de para indicar que el valor es nulleable, \xf3sea que puede ser un valor valido o puede ser null."),(0,i.yg)("li",{parentName:"ul"},"B\xe1sicamente se utiliza el car\xe1cter \u201c?\u201d para aceptar el valor null en tipos de datos integrados."),(0,i.yg)("li",{parentName:"ul"},"En la pr\xe1ctica son instancias de la estructura System.Nullable","<","T> por lo tanto cuenta con algunos m\xe9todos."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'int? num = null;\n\n// Tiene valor num?\nif (num.HasValue)\n{\n    System.Console.WriteLine("num = " + num.Value);\n}\nelse\n{\n    System.Console.WriteLine("num = Null");\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://joffremoncayo.com/blog/operador-condicional-null-en-csharp/"},"Operador Condicional NULL ?. en C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/builtin-types/nullable-value-types"},"Tipos de valor que admiten valores NULL (referencia de C#)"))))),(0,i.yg)("h2",{id:"out"},"Out"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Se puede llamar palabra clave out o par\xe1metro out"),(0,i.yg)("li",{parentName:"ul"},"out es una palabra clave en C# que se utiliza para pasar par\xe1metros a m\xe9todos como tipo de referencia. Generalmente se usa cuando un m\xe9todo devuelve m\xfaltiples valores."),(0,i.yg)("li",{parentName:"ul"},"Cuando un par\xe1metro se pasa con la palabra clave/par\xe1metro Out en el m\xe9todo, ese m\xe9todo funciona con el mismo valor de variable que se pasa en la llamada al m\xe9todo. Si el valor de la variable cambia, el valor del par\xe1metro del m\xe9todo tambi\xe9n cambia. Si el m\xe9todo modifica el valor, el valor de la variable que le pasamos como par\xe1metro out cambia."),(0,i.yg)("li",{parentName:"ul"},"'out' es una palabra clave en C#, que se utiliza para pasar argumentos a un m\xe9todo como tipo de referencia. Las variables pasadas a un m\xe9todo como par\xe1metros externos no necesitan declararse ni inicializarse antes de pasarse a la llamada al m\xe9todo. Se requiere que el m\xe9todo llamado asigne valores a las variables de los par\xe1metros antes de que el control abandone el m\xe9todo llamado y antes de que el m\xe9todo llamado devuelva cualquier valor al m\xe9todo que llama."),(0,i.yg)("li",{parentName:"ul"},"Es posible pasar m\xfaltiples par\xe1metros a un m\xe9todo y el m\xe9todo devuelve m\xfaltiples valores.")),(0,i.yg)("h4",{id:"puntos-importantes"},"Puntos importantes"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Es similar a la palabra clave ref. Pero la principal diferencia entre la palabra clave ref y out es que ref necesita que la variable se inicialice antes de pasar al m\xe9todo. Pero nuestro par\xe1metro out no requiere que las variables se inicialicen antes de pasar al m\xe9todo. Pero antes de que devuelva un valor el m\xe9todo que llama, la variable debe inicializarse en el m\xe9todo llamado."),(0,i.yg)("li",{parentName:"ul"},"Tambi\xe9n es similar a la palabra clave in, pero la palabra clave in no permite que el m\xe9todo que llam\xf3 cambie el valor del argumento, pero ref lo permite."),(0,i.yg)("li",{parentName:"ul"},"Para usar la palabra clave out como par\xe1metro, tanto la definici\xf3n del m\xe9todo como el m\xe9todo de llamada deben usar la palabra clave out expl\xedcitamente."),(0,i.yg)("li",{parentName:"ul"},"No se permite el uso de par\xe1metros out en m\xe9todos asincr\xf3nicos."),(0,i.yg)("li",{parentName:"ul"},"No se permite el uso de par\xe1metros out en m\xe9todos iteradores."),(0,i.yg)("li",{parentName:"ul"},"Puede haber m\xe1s de un par\xe1metro out en un m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"En el momento de la llamada al m\xe9todo, el par\xe1metro out se puede declarar en l\xednea. Pero solo se puede acceder a los par\xe1metros out en l\xednea en el mismo bloque de c\xf3digo donde se llama."),(0,i.yg)("li",{parentName:"ul"},"La sobrecarga de m\xe9todos tambi\xe9n se puede realizar utilizando estos par\xe1metros."),(0,i.yg)("li",{parentName:"ul"},"Las propiedades no se pueden pasar como par\xe1metros out ya que no son variables."),(0,i.yg)("li",{parentName:"ul"},"Hasta C# 6.0, un usuario primero declara la variable y luego solo puede pasarla como argumento out. Pero a partir de C# 7.0, a excepci\xf3n de una declaraci\xf3n de variable separada, el usuario tambi\xe9n puede declarar la variable out en la lista de argumentos de la llamada al m\xe9todo.")),(0,i.yg)("h4",{id:"sintaxis"},"Sintaxis"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Al llamar al m\xe9todo usando el par\xe1metro out, la sintaxis ser\xe1 la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"nombre_m\xe9todo(out  tipo_dato nombre_variable);\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Aqu\xed, nombre_m\xe9todo es el nombre del m\xe9todo, 'out' es la palabra clave utilizada para expresar que la variable pasada al m\xe9todo es un par\xe1metro out, tipo_dato puede ser cualquier tipo de datos de la variable y nombre_variable es el nombre de la variable.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La sintaxis del m\xe9todo que se llamar\xe1 es la siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"especificador_acceso  return_type Method_name(out data_type variable_name);\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},'Aqu\xed, especificador_acceso puede ser cualquier especificador de acceso entre los cinco especificadores de acceso admitidos por C#, como p\xfablico o privado. Luego, return_type es el tipo de datos que devuelve este m\xe9todo seguido del nombre del m\xe9todo y la lista de par\xe1metros "out".')))),(0,i.yg)("h4",{id:"resumen"},"Resumen"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La diferencia entre las palabras clave 'out' y 'in' es que los valores de los par\xe1metros 'out' se pueden modificar dentro del m\xe9todo llamado, mientras que los valores de los par\xe1metros 'in' no se pueden modificar dentro del m\xe9todo llamado."),(0,i.yg)("li",{parentName:"ul"},'Un m\xe9todo puede tener m\xe1s de un par\xe1metro "out", como por ejemplo: Display(out x, out y);.'),(0,i.yg)("li",{parentName:"ul"},"Para trabajar con par\xe1metros 'out', el usuario debe usar expl\xedcitamente la palabra clave 'out' en la definici\xf3n del m\xe9todo y tambi\xe9n en el m\xe9todo de llamada. Al mismo tiempo, no es necesario que los nombres dados a los par\xe1metros 'out' en la definici\xf3n y llamada del m\xe9todo sean los mismos."),(0,i.yg)("li",{parentName:"ul"},"Los par\xe1metros 'out' se pasan por referencia a un m\xe9todo, por lo tanto, no crean una nueva ubicaci\xf3n de almacenamiento en la memoria y utilizan la misma ubicaci\xf3n de almacenamiento ocupada por las variables en la invocaci\xf3n del m\xe9todo. Como el m\xe9todo que utiliza los par\xe1metros 'out' puede devolver m\xfaltiples valores, ayuda al usuario a obtener m\xfaltiples valores procesados del m\xe9todo llamado. Pero antes de que el m\xe9todo devuelva cualquier valor al m\xe9todo que lo llama, a los par\xe1metros 'out' se les deben asignar alguno valor en el m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"No podemos trabajar con par\xe1metros 'out' en todos los tipos de m\xe9todos, como no podemos usar par\xe1metros 'out' en m\xe9todos asincr\xf3nicos que definimos usando el modificador 'async' y tampoco podemos usar par\xe1metros 'out' en m\xe9todos 'iteradores'. Como las propiedades no son variables, no podemos pasarlas como par\xe1metros 'out\u2019  a un m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"El par\xe1metro 'out' se puede definir utilizando un tipo gen\xe9rico."),(0,i.yg)("li",{parentName:"ul"},"Junto con esto, el par\xe1metro 'out' se utiliza en los m\xe9todos TryParse() para diferentes tipos de datos en C#. El m\xe9todo TryParse() devuelve un valor booleano que especifica el \xe9xito o el fracaso y, en caso de \xe9xito, el resultado viene dado por el par\xe1metro 'out'.")),(0,i.yg)("h4",{id:"abreviaci\xf3n"},"Abreviaci\xf3n"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"// No se necesita inicializar la variable\ndata_type variable_name;\nMethod_Name(out variable_name);\n\n\n// Puedes convertir las dos lineas anteriores en solo una\nMethod_Name(out data_type variable_name);\n")),(0,i.yg)("h4",{id:"ejemplo-7"},"Ejemplo"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'\nusing System;\n\nclass GFG {\n\n\n    static public void Main()\n    {\n        int i;\n        Addition(out i);\n        Console.WriteLine("The addition of the value is: {0}", i);\n    }\n\n    public static void Addition(out int i)\n    {\n        i = 30;\n        i += i;\n    }\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"El valor de la variable \u201ci\u201d es 60.")))),(0,i.yg)("h4",{id:"otro-ejemplo-1"},"Otro ejemplo:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nnamespace ConsoleApp4 {\n  public class Program {\n    public static void Main() {\n      float area,\n      perimeter;\n      Calculate(5, 10, out area, out perimeter);\n      Console.WriteLine("The area of rectangle is: {0}", area);\n      Console.WriteLine("The perimeter of rectangle is: {0}", perimeter);\n      Console.ReadLine();\n    }\n    public static void Calculate(int length, int breadth, out float area, out float\n    perimeter) {\n      area = length * breadth;\n      perimeter = 2 * (length + breadth);\n    }\n  }\n}\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/out-parameter-with-examples-in-c-sharp/"},"Out Parameter With Examples in C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/out-parameter-in-c-sharp-7/"},"out Parameter In C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.educba.com/c-sharp-out-parameter/"},"C# Out Parameter")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.infoworld.com/article/3678688/how-to-use-the-in-out-and-ref-keywords-in-net-core.html"},"How to use the in, out, and ref keywords in .NET Core")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.educative.io/answers/what-is-the-out-parameter-in-c-sharp"},"What is the 'out' parameter in C#?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier"},"out parameter modifier (C# Reference)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/keywords/out-parameter-modifier"},"Modificador del par\xe1metro out (Referencia de C#)"))))),(0,i.yg)("h2",{id:"in"},"In"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La palabra clave in hace que los par\xe1metros se pasen por referencia, pero garantiza que el par\xe1metro no se modifique."),(0,i.yg)("li",{parentName:"ul"},"Es como el modificador out, el modificador in sirve para que el par\xe1metro sea pasado como una referencia en vez de como una copia del valor, pero a diferencia del modificador out, el modificador in le prevendr\xe1 de hacer cualquier cambio a la variable dentro del m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"int readonlyArgument = 44;\nInArgExample(readonlyArgument);\nConsole.WriteLine(readonlyArgument);     // value is still 44\n\nvoid InArgExample(in int number)\n{\n    // Errror\n    number = 19;\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"En el ejemplo anterior se muestra que el modificador in no suele ser necesario cuando se llama el m\xe9todo, solo lo es en la declaraci\xf3n del m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"Si intentamos modificar el par\xe1metro in , el compilador se quejara."),(0,i.yg)("li",{parentName:"ul"},"Las variables que se han pasado como parametro in deben inicializarse antes de pasarse en una llamada de m\xe9todo. ")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Adem\xe1s, la palabra clave in puede usarse con un par\xe1metro de tipo gen\xe9rico para especificar que el par\xe1metro de tipo es contravariante (contravariance), parte de una instrucci\xf3n foreach o de una cl\xe1usula join de una consulta de LINQ. ")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Covarianza y contravarianza en gen\xe9ricos")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Covarianza y contravarianza son t\xe9rminos que hacen referencia a la capacidad de usar un tipo m\xe1s derivado (m\xe1s espec\xedfico) o menos derivado (menos espec\xedfico) que el indicado originalmente."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/standard/generics/covariance-and-contravariance#generic-interfaces-with-contravariant-type-parameters"},"Mas informaci\xf3n"))))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Las variables que se han pasado como argumentos in deben inicializarse antes de pasarse en una llamada de m\xe9todo. Sin embargo, es posible que el m\xe9todo llamado no asigne ning\xfan valor o modifique el argumento."),(0,i.yg)("li",{parentName:"ul"},"Los m\xe9todos no pueden sobrecargarse si la \xfanica diferencia es que un m\xe9todo toma un argumento ref o out y el otro toma un argumento in. Por ejemplo, el c\xf3digo siguiente, no se compilar\xe1:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'class CS0663_Example\n{\n    // Compiler error CS0663: "Cannot define overloaded\n    // methods that differ only on in, ref and out".\n    public void SampleMethod(in int i) { }\n    public void SampleMethod(ref int i) { }\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Est\xe1 permitida la sobrecarga en funci\xf3n de la presencia de in:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"\nclass InOverloads\n{\n    public void SampleMethod(in int i) { }\n    public void SampleMethod(int i) { }\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/keywords/in-parameter-modifier"},"Modificador del par\xe1metro in (referencia de C#)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/547/clases/metodos-con-parametros/"},"M\xe9todos con par\xe1metros"))))),(0,i.yg)("h2",{id:"ref"},"Ref"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La palabra clave ref hace que un argumento se pase por referencia, no por valor. El efecto de pasar por referencia es que cualquier cambio en el par\xe1metro del m\xe9todo llamado se refleja en el m\xe9todo que llama."),(0,i.yg)("li",{parentName:"ul"},"Esto significa que si pasamos cualquier par\xe1metro de m\xe9todo (ya sea tipo de valor o tipo de referencia) usando el par\xe1metro ref, cualquier cambio en el valor del par\xe1metro dentro del m\xe9todo se reflejar\xe1 en el valor real del par\xe1metro.")),(0,i.yg)("h4",{id:"ejemplo-8"},"Ejemplo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Tenemos un m\xe9todo llamado GetData que toma un par\xe1metro entero. Dentro del m\xe9todo, actualizaremos este valor. Luego, llamamos a este m\xe9todo e imprimimos el valor del par\xe1metro: antes de la llamada al m\xe9todo, dentro del m\xe9todo y despu\xe9s de la ejecuci\xf3n del m\xe9todo. Entonces, el c\xf3digo se ver\xe1 as\xed:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args)\n{\n    int a = 4;\n    Console.WriteLine("Value before method call is: " + a);\n    GetData(a);\n    Console.WriteLine("Value after method call is: " + a);\n    Console.ReadKey();\n}\n\npublic static void GetData(int a)\n{\n    a = a + 999;\n    Console.WriteLine("Value inside method is: " + a);\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejecute la aplicaci\xf3n y vea los resultados. El valor del par\xe1metro es diferente dentro del m\xe9todo, pero es el mismo que antes y despu\xe9s de la llamada al m\xe9todo. La salida ser\xe1 :")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Value before method call is: 4\nValue inside method is: 1003\nValue after method call is: 4\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ahora, le asociamos la palabra clave ref a la definici\xf3n del m\xe9todo y al par\xe1metro. Nuevamente llamamos a este m\xe9todo e imprimimos sus valores. Entonces, el c\xf3digo se ver\xe1 as\xed.  ")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},' GetData(ref a);\n\npublic static void GetData(ref int a)\n{\n    a = a + 999;\n    Console.WriteLine("Value inside method is: " + a);\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Para usar un par\xe1metro ref, la definici\xf3n del m\xe9todo y el par\xe1metro del m\xe9todo deben utilizar la palabra clave ref.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejecute la aplicaci\xf3n y vea la diferencia entre este resultado y los resultados de la primera ejecuci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"Value before method call is: 4\nValue inside method is: 1003\nValue after method call is: 1003\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Esta vez, el valor de la variable que se pas\xf3 como par\xe1metro es el mismo que se estableci\xf3 dentro del m\xe9todo."),(0,i.yg)("li",{parentName:"ul"},"La raz\xf3n detr\xe1s es que el uso de la palabra clave ref hace que el par\xe1metro se pase por referencia y no por valor real. En otras palabras, el valor real del par\xe1metro se comparti\xf3 con el m\xe9todo debido al uso de la palabra clave ref. Entonces, cualquier cambio en el valor del par\xe1metro dentro del m\xe9todo tambi\xe9n actualiza el valor original.")))),(0,i.yg)("h4",{id:"otro-ejemplo-2"},"Otro ejemplo"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ahora, intentemos ver lo mismo con un tipo de referencia. Agregamos una nueva clase llamada TestClass y agregamos dos propiedades llamadas Id y Nombre. Cambiamos la firma del m\xe9todo para pasar un par\xe1metro de tipo TestClass, sin la palabra clave ref. Dentro del m\xe9todo, reinicializamos el tipo de clase TestClass y actualizamos los valores de las propiedades. Nuevamente imprimimos los valores antes de la llamada al m\xe9todo, dentro del m\xe9todo y despu\xe9s de la llamada al m\xe9todo. Entonces el c\xf3digo se ver\xe1 as\xed:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args)\n{\n    TestClass testClass = new TestClass()\n    {\n        Id = 1,\n        Name = "Test User"\n    };\n    Console.WriteLine("Before method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n    GetData(testClass);\n    Console.WriteLine("After method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n    Console.ReadKey();\n}\n\npublic static void GetData(TestClass testClass)\n{\n    testClass = new ConsoleApplication1.Program.TestClass();\n    testClass.Id += 999;\n    testClass.Name += "_Updated";\n    Console.WriteLine("Inside method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n}\n\npublic class TestClass\n{\n    public int Id\n    {\n        get;\n        set;\n    }\n\n    public String Name\n    {\n        get;\n        set;\n    }\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejecute el c\xf3digo y vea los resultados.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Antes de la llamada al m\xe9todo, el nombre es: Usuario de prueba y el ID es:1  "),(0,i.yg)("li",{parentName:"ul"},"Llamada al m\xe9todo interno El nombre es: _Updated y el ID es: 999  "),(0,i.yg)("li",{parentName:"ul"},"Despu\xe9s de la llamada al m\xe9todo, el nombre es: usuario de prueba y el ID es: 1   ")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Como sabemos que las variables de tipo de referencia contienen un puntero a los datos y no los datos reales, cuando pasamos el par\xe1metro al m\xe9todo, en realidad compartimos una copia del puntero con el m\xe9todo y no el puntero real. Cuando el par\xe1metro se reinicializa dentro del m\xe9todo, creamos un nuevo puntero que reemplaza la copia del puntero (recibida en la llamada al m\xe9todo). Entonces, los datos cambiaron dentro del m\xe9todo pero permanecieron iguales despu\xe9s de la ejecuci\xf3n del m\xe9todo. Ahora cambiemos el m\xe9todo para pasar el puntero de dato usando la palabra clave ref:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args)\n{\n    TestClass testClass = new TestClass()\n    {\n        Id = 1,\n        Name = "Test User"\n    };\n    Console.WriteLine("Before method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n    GetData(ref testClass);\n    Console.WriteLine("After method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n    Console.ReadKey();\n}\n\npublic static void GetData(ref TestClass testClass)\n{\n    testClass = new ConsoleApplication1.Program.TestClass();\n    testClass.Id += 999;\n    testClass.Name += "_Updated";\n    Console.WriteLine("Inside method call Name is: " + testClass.Name + " and ID is:" + testClass.Id);\n}\n\n')),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Ejecute el c\xf3digo y vea la diferencia en los resultados.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Antes de la llamada al m\xe9todo, el nombre es: Usuario de prueba y el ID es:1  "),(0,i.yg)("li",{parentName:"ul"},"Llamada al m\xe9todo interno El nombre es: _Updated y el ID es: 999  "),(0,i.yg)("li",{parentName:"ul"},"Despu\xe9s de la llamada al m\xe9todo, el nombre es: _Updated y el ID es: 999  ")))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Esta vez, los valores tambi\xe9n cambiaron despu\xe9s de la ejecuci\xf3n del m\xe9todo. La raz\xf3n es que esta vez compartimos el puntero real con el m\xe9todo y no su copia. "),(0,i.yg)("li",{parentName:"ul"},"Entonces, los cambios en el puntero (mediante la reinicializaci\xf3n de TestClass dentro del m\xe9todo) actualizaron el puntero original (instancia de testClass en el m\xe9todo principal)."),(0,i.yg)("li",{parentName:"ul"},"Entonces se imprimieron nuevos valores despu\xe9s de la ejecuci\xf3n del m\xe9todo. Esto es lo que dice msdn, es decir, la palabra clave ref hace que un argumento se pase por referencia, no por valor."),(0,i.yg)("li",{parentName:"ul"},"El efecto de pasar por referencia es que cualquier cambio en el par\xe1metro del m\xe9todo llamado se refleja en el m\xe9todo que llama.")))),(0,i.yg)("h4",{id:"diferencias-con-out"},"Diferencias con out"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Si bien las dos palabras claves se utilizan para lo mismo, tienen algunas diferencias.")),(0,i.yg)("h4",{id:"1--actualizaci\xf3n-de-las-variables-ref-y-out"},"1- Actualizaci\xf3n de las variables Ref y Out"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},'Cuando llamamos a un m\xe9todo con la variable "out", el m\xe9todo tiene que actualizar la variable out dentro de la funci\xf3n y es obligatorio. Pero esto no es obligatorio si utiliza la variable ref. '),(0,i.yg)("li",{parentName:"ul"},'Por ejemplo, eche un vistazo al siguiente c\xf3digo. Aqu\xed, comentamos la segunda declaraci\xf3n de actualizaci\xf3n dentro de las funciones MathRef y MathOut. Si observa dentro de la funci\xf3n MathRef, no obtenemos ning\xfan error de tiempo de compilaci\xf3n. Pero dentro del m\xe9todo MathOut, recibimos un error en tiempo de compilaci\xf3n que dice "El par\xe1metro \u2018out\u2019 debe asignarse antes de que el control abandone el m\xe9todo actual", como se muestra a continuaci\xf3n:')),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/word-image-28463-5.png?ezimgfmt=ng:webp/ngcb1",alt:"c\xf3digo"})),(0,i.yg)("h4",{id:"2--inicializar-variables-ref-y-out"},"2- Inicializar variables Ref y Out"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando pasamos el par\xe1metro ref , es obligatorio inicializar el par\xe1metro ref antes de pasarlo al m\xe9todo; de lo contrario, obtendremos un error de tiempo de compilaci\xf3n. "),(0,i.yg)("li",{parentName:"ul"},"Esto se debe a que con el par\xe1metro ref, actualizar el valor dentro del m\xe9todo es opcional. Entonces, antes de pasar el par\xe1metro ref, se debe inicializar. Por otro lado, inicializar un par\xe1metro de  out es opcional. Si no est\xe1 inicializando el par\xe1metro out, no hay problema, porque el par\xe1metro out se inicializa o actualiza obligatoriamente dentro del m\xe9todo. "),(0,i.yg)("li",{parentName:"ul"},"Para una mejor comprensi\xf3n, eche un vistazo al siguiente c\xf3digo. Aqu\xed no estamos inicializando el segundo par\xe1metro. Para el par\xe1metro SubtractionOut, no recibimos ning\xfan error, pero para SubtractionRef, recibimos un error del compilador que dice Uso de la variable local no asignada 'SubtractionRef' Como se muestra abajo:")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://dotnettutorials.net/wp-content/uploads/2022/07/word-image-28463-6.png?ezimgfmt=ng:webp/ngcb1",alt:"c\xf3digo"})),(0,i.yg)("h4",{id:"3--cu\xe1ndo-es-\xfatil"},"3- \xbfCu\xe1ndo es \xfatil?"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Debe utilizar los par\xe1metros ref cuando desee pasar algunos valores a la funci\xf3n y espera que la funci\xf3n modifique o actualice los valores y se los devuelva. "),(0,i.yg)("li",{parentName:"ul"},"Debo utilizar los par\xe1metros out, cuando no queremos pasar ning\xfan valor a la funci\xf3n y esperamos que la funci\xf3n actualice la variable y devuelva un valor."),(0,i.yg)("li",{parentName:"ul"},"Entonces la palabra clave ref se usa para pasar datos en forma bidireccional y la palabra clave out se usa para pasar los datos de forma  unidireccional, es decir, devolver los datos.")),(0,i.yg)("h4",{id:"resumen-1"},"Resumen"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Ref"),(0,i.yg)("th",{parentName:"tr",align:null},"Out"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},'Los par\xe1metros deben inicializarse antes de pasarlos a "ref".'),(0,i.yg)("td",{parentName:"tr",align:null},'No es necesario inicializar los par\xe1metros antes de pasarlos a "out".')),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"No es necesario inicializar el valor de un par\xe1metro antes de devolverlo en el m\xe9todo de llamada."),(0,i.yg)("td",{parentName:"tr",align:null},"Es necesario inicializar el valor de un par\xe1metro antes de devolverlo en el m\xe9todo de llamada.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},'Pasar un valor a trav\xe9s del par\xe1metro "ref" es \xfatil cuando el m\xe9todo llamado necesita cambiar el valor de ese par\xe1metro.'),(0,i.yg)("td",{parentName:"tr",align:null},"\xdatil cuando un m\xe9todo devuelve m\xfaltiples valores.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},'Cuando se utiliza "ref", el paso de datos es bidireccional.'),(0,i.yg)("td",{parentName:"tr",align:null},'Cuando se utiliza la palabra clave "out", los datos fluyen en una direcci\xf3n.')))),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/ref-keyword-in-c-sharp/"},"C# ref Keyword")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://code-maze.com/cshrap-ref-out-keywords/"},"Difference Between Ref and Out keywords in C#")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/keywords/ref"},"ref (Referencia de C#)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://dotnettutorials.net/lesson/ref-vs-out-in-csharp/#google_vignette"},"Ref vs Out in C#"))))),(0,i.yg)("h2",{id:"m\xe9todos-iteradores"},"M\xe9todos iteradores"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Pr\xe1cticamente todos los programas que escriba tendr\xe1n alguna necesidad de recorrer una colecci\xf3n. Va a escribir c\xf3digo que examine cada elemento de una colecci\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Para esto tendr\xe1 que crear un iterador que es un objeto que recorre un conjunto de datos (listas, colecciones, etc)."),(0,i.yg)("li",{parentName:"ul"},"Tambi\xe9n va a tener que crear m\xe9todos para un iterador, que son los m\xe9todos que contiene un iterador para recorrer los elementos de una clase."),(0,i.yg)("li",{parentName:"ul"},"Los iteradores se pueden usar para:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Enumerar una colecci\xf3n personalizada."),(0,i.yg)("li",{parentName:"ul"},"Extender LINQ u otras bibliotecas."),(0,i.yg)("li",{parentName:"ul"},"Crear una canalizaci\xf3n de datos en la que los datos fluyan de forma eficaz mediante m\xe9todos de iterador.")))),(0,i.yg)("h4",{id:"iteraci\xf3n-con-foreach"},"Iteraci\xf3n con Foreach"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Recorrer una colecci\xf3n es sencillo: la palabra clave foreach recorre una colecci\xf3n, ejecutando la instrucci\xf3n que contiene adentro una vez para cada elemento de la colecci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"foreach (var item in collection)\n{\n    Console.WriteLine(item?.ToString());\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La instrucci\xf3n foreach no es m\xe1gica. Depende de dos interfaces gen\xe9ricas definidas en la biblioteca de .NET Core para generar el c\xf3digo necesario para recorrer en iteraci\xf3n una colecci\xf3n: IEnumerable","<","T> e IEnumerator","<","T>. ")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Ambas interfaces tienen tambi\xe9n una versi\xf3n no gen\xe9rica: IEnumerable e IEnumerator. Para el c\xf3digo moderno se prefieren las versiones gen\xe9ricas.")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Cuando se genera una secuencia de forma asincr\xf3nica, puede usar la instrucci\xf3n await foreach para consumir la secuencia de forma asincr\xf3nica:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"await foreach (var item in asyncSequence)\n{\nConsole.WriteLine(item?.ToString());\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Cuando una secuencia es System.Collections.Generic.IEnumerable","<","T>, se usa foreach. "),(0,i.yg)("li",{parentName:"ul"},"Cuando una secuencia es System.Collections.Generic.IAsyncEnumerable","<","T>, se usa await foreach. En el \xfaltimo caso, la secuencia se genera de forma asincr\xf3nica.")))),(0,i.yg)("h4",{id:"m\xe9todo-iterador"},"M\xe9todo iterador"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Otra magn\xedfica caracter\xedstica del lenguaje C# permite generar m\xe9todos que crean un origen para una colecci\xf3n."),(0,i.yg)("li",{parentName:"ul"},"Estos m\xe9todos se conocen como m\xe9todos de iterador."),(0,i.yg)("li",{parentName:"ul"},"Un m\xe9todo de iterador define c\xf3mo generar/mostrar los elementos de una secuencia (conjunto de datos como por ejemplo listas) cuando se solicita."),(0,i.yg)("li",{parentName:"ul"},"Para definir un m\xe9todo de iterador se usan las palabras clave yield return."),(0,i.yg)("li",{parentName:"ul"},"Podr\xeda escribir este m\xe9todo para generar la secuencia de enteros de 0 a 9:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public IEnumerable<int> GetSingleDigitNumbers()\n{\n    yield return 0;\n    yield return 1;\n    yield return 2;\n    yield return 3;\n    yield return 4;\n    yield return 5;\n    yield return 6;\n    yield return 7;\n    yield return 8;\n    yield return 9;\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"El c\xf3digo anterior resaltar el hecho de que se pueden usar varias palabras claves yield return en un m\xe9todo de iterador. ")))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Se puede simplificar el c\xf3digo de un m\xe9todo de iterador. La definici\xf3n del m\xe9todo siguiente genera la misma secuencia de n\xfameros:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public IEnumerable<int> GetSingleDigitNumbersLoop()\n{\n    int index = 0;\n    while (index < 10)\n        yield return index++;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"No tiene que elegir entre una y otra. Puede tener tantas instrucciones yield return como sea necesario para satisfacer las necesidades del m\xe9todo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public IEnumerable<int> GetSetsOfNumbers()\n{\n    int index = 0;\n    while (index < 10)\n        yield return index++;\n\n    yield return 50;\n\n    index = 100;\n    while (index < 110)\n        yield return index++;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Todos estos ejemplos anteriores tendr\xedan una versi\xf3n asincr\xf3nica. En cada caso, reemplazar\xeda el tipo de valor devuelto de IEnumerable","<","T> por un elemento IAsyncEnumerable","<","T>. Por ejemplo, el ejemplo anterior tendr\xeda la siguiente versi\xf3n asincr\xf3nica:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"\npublic async IAsyncEnumerable<int> GetSetsOfNumbersAsync()\n{\n    int index = 0;\n    while (index < 10)\n        yield return index++;\n    await Task.Delay(500);\n    yield return 50;\n    await Task.Delay(500);\n    index = 100;\n    while (index < 110)\n        yield return index++;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Hay una restricci\xf3n importante en los m\xe9todos de iterador: no puede tener una instrucci\xf3n return y una instrucci\xf3n yield return en el mismo m\xe9todo. El c\xf3digo siguiente no se compilar\xe1:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public IEnumerable<int> GetSingleDigitNumbers()\n{\n    int index = 0;\n    while (index < 10)\n        yield return index++;\n\n    yield return 50;\n\n    //Genera un errror\n    var items = new int[] {100, 101, 102, 103, 104, 105, 106, 107, 108, 109 };\n    return items;\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Normalmente esta restricci\xf3n no supone un problema. Tiene la opci\xf3n de usar yield return en todo el m\xe9todo o de separar el m\xe9todo original en varios m\xe9todos, unos con return y otros con yield return."),(0,i.yg)("li",{parentName:"ul"},"A veces, la respuesta correcta es dividir un m\xe9todo de iterador en dos m\xe9todos distintos. Uno que use return y un segundo que use yield return. Imagine una situaci\xf3n en la que quiera devolver una colecci\xf3n vac\xeda, o los cinco primeros n\xfameros impares, bas\xe1ndose en un argumento booleano. Eso se podr\xeda escribir como estos dos m\xe9todos:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"public IEnumerable<int> GetSingleDigitOddNumbers(bool getCollection)\n{\n    if (getCollection == false)\n        return new int[0];\n    else\n        return IteratorMethod();\n}\n\nprivate IEnumerable<int> IteratorMethod()\n{\n    int index = 0;\n    while (index < 10)\n    {\n        if (index % 2 == 1)\n            yield return index;\n        index++;\n    }\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Observe los m\xe9todos anteriores. El primero usa la instrucci\xf3n est\xe1ndar return para devolver una colecci\xf3n vac\xeda o el iterador creado por el segundo m\xe9todo. El segundo m\xe9todo usa la instrucci\xf3n yield return para crear la secuencia solicitada.")))),(0,i.yg)("h4",{id:"profundizar-foreach"},"Profundizar Foreach"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La instrucci\xf3n foreach se expande en un elemento est\xe1ndar que usa las interfaces IEnumerable","<","T> e IEnumerator","<","T> para recorrer en iteraci\xf3n todos los elementos de una colecci\xf3n. Tambi\xe9n minimiza los errores cometidos por los desarrolladores al no administrar correctamente los recursos."),(0,i.yg)("li",{parentName:"ul"},"El compilador traduce el bucle foreach que se muestra en el primer ejemplo en algo similar a esta construcci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"IEnumerator<int> enumerator = collection.GetEnumerator();\nwhile (enumerator.MoveNext())\n{\n    var item = enumerator.Current;\n    Console.WriteLine(item.ToString());\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El c\xf3digo exacto generado por el compilador es m\xe1s complicado y controla las situaciones en las que el objeto devuelto por GetEnumerator() implementa la interfaz IDisposable. La expansi\xf3n completa genera c\xf3digo m\xe1s parecido al siguiente:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"{\n    var enumerator = collection.GetEnumerator();\n    try\n    {\n        while (enumerator.MoveNext())\n        {\n            var item = enumerator.Current;\n            Console.WriteLine(item.ToString());\n        }\n    }\n    finally\n    {\n        // dispose of enumerator.\n    }\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El compilador traduce el primer ejemplo asincr\xf3nico en algo similar a esta construcci\xf3n:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"{\n    var enumerator = collection.GetAsyncEnumerator();\n    try\n    {\n        while (await enumerator.MoveNextAsync())\n        {\n            var item = enumerator.Current;\n            Console.WriteLine(item.ToString());\n        }\n    }\n    finally\n    {\n        // dispose of async enumerator.\n    }\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"La manera en que el enumerador se elimina depende de las caracter\xedsticas del tipo de enumerator. En el caso sincr\xf3nico general, la cl\xe1usula finally se expande a:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"finally\n{\n   (enumerator as IDisposable)?.Dispose();\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"El caso asincr\xf3nico general se expande a:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"finally\n{\n    if (enumerator is IAsyncDisposable asyncDisposable)\n        await asyncDisposable.DisposeAsync();\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Sin embargo, si el tipo de enumerator es un tipo  sealed y no hay conversi\xf3n impl\xedcita del tipo de enumerator a IDisposable o IAsyncDisposable, la cl\xe1usula finally se expande en un bloque vac\xedo:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"finally\n{\n}\n\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Si hay una conversi\xf3n impl\xedcita del tipo de enumerator a IDisposable, y enumerator es un tipo de valor que no acepta valores Null, la cl\xe1usula finally se expande en:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},"finally\n{\n   ((IDisposable)enumerator).Dispose();\n}\n\n")),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},"Afortunadamente, no es necesario recordar todos estos detalles. La instrucci\xf3n foreach controla todos esos matices. El compilador generar\xe1 el c\xf3digo correcto para cualquiera de estas construcciones.")))),(0,i.yg)("h4",{id:"ejemplo-iterador"},"Ejemplo iterador"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-csharp"},'static void Main()\n{\n    foreach (int number in SomeNumbers())\n    {\n        Console.Write(number.ToString() + " ");\n    }\n    // Output: 3 5 8\n    Console.ReadKey();\n}\n\npublic static System.Collections.IEnumerable SomeNumbers()\n{\n    yield return 3;\n    yield return 5;\n    yield return 8;\n}\n\n')),(0,i.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("ul",{parentName:"div"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/iterators"},"Iterators")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/programming-guide/concepts/iterators"},"Iteradores (C#)"))))))}u.isMDXComponent=!0}}]);