"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[2503],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=t.createContext({}),i=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},d=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=i(a),m=o,v=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return a?t.createElement(v,c(c({ref:n},d),{},{components:a})):t.createElement(v,c({ref:n},d))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,c=new Array(r);c[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var i=2;i<r;i++)c[i]=a[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1817:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_position:9},c="Redux",s={unversionedId:"React/redux",id:"React/redux",title:"Redux",description:"- Es un conjunto de patrones de como debes tratar el estado de tu app.",source:"@site/docs/React/redux.md",sourceDirName:"React",slug:"/React/redux",permalink:"/documentacion/docs/React/redux",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/React/redux.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"React",previous:{title:"Reducer",permalink:"/documentacion/docs/React/reducer"},next:{title:"Proyecto",permalink:"/documentacion/docs/React/proyecto"}},l={},i=[{value:"Conceptos",id:"conceptos",level:2},{value:"Action",id:"action",level:3},{value:"type",id:"type",level:4},{value:"payload",id:"payload",level:4},{value:"Dispatcher",id:"dispatcher",level:3},{value:"Store",id:"store",level:3},{value:"Subscriber",id:"subscriber",level:3},{value:"Reducers",id:"reducers",level:3},{value:"vista",id:"vista",level:3},{value:"Estado",id:"estado",level:3},{value:"Selectores",id:"selectores",level:3},{value:"flujo de datos unidireccional",id:"flujo-de-datos-unidireccional",level:3},{value:"Sin react",id:"sin-react",level:2},{value:"Store",id:"store-1",level:2},{value:"Suscribirse",id:"suscribirse",level:2},{value:"Migrando a React",id:"migrando-a-react",level:2},{value:"Extension",id:"extension",level:2},{value:"Configuracion",id:"configuracion",level:3},{value:"Empezar con  React-redux",id:"empezar-con--react-redux",level:2},{value:"Carpetas a crear en src",id:"carpetas-a-crear-en-src",level:3},{value:"carpeta actions",id:"carpeta-actions",level:4},{value:"carpeta types",id:"carpeta-types",level:4},{value:"carpeta reducers",id:"carpeta-reducers",level:4},{value:"carpeta store",id:"carpeta-store",level:4},{value:"App.jsx",id:"appjsx",level:2},{value:"Contador",id:"contador",level:2},{value:"useSelector",id:"useselector",level:2},{value:"hook useDispatch",id:"hook-usedispatch",level:2}],d={toc:i};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"redux"},"Redux"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es un conjunto de patrones de como debes tratar el estado de tu app.")),(0,o.kt)("h2",{id:"conceptos"},"Conceptos"),(0,o.kt)("h3",{id:"action"},"Action"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Una acci\xf3n es un objeto simple de JavaScript  con 2 propiedades"),(0,o.kt)("li",{parentName:"ul"},"Puede pensar en una acci\xf3n como un evento que describe algo que sucedi\xf3 en la aplicaci\xf3n ."),(0,o.kt)("li",{parentName:"ul"},"Las acciones(actions) , son los eventos que ocurren en la aplicaci\xf3n seg\xfan la entrada del usuario y desencadenan actualizaciones en el estado")),(0,o.kt)("h4",{id:"type"},"type"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es una propiedad del objeto"),(0,o.kt)("li",{parentName:"ul"},'Debe ser una cadena que le d\xe9 a esta acci\xf3n un nombre descriptivo, como "todos/todoAdded". Por lo general, escribimos ese tipo de cadena como "domain/eventName", donde la primera parte es la funci\xf3n o categor\xeda a la que pertenece esta acci\xf3n, y la segunda parte especifica que sucedi\xf3.')),(0,o.kt)("h4",{id:"payload"},"payload"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es una propiedad del objeto "),(0,o.kt)("li",{parentName:"ul"},"Un objeto de acci\xf3n puede tener otros campos con informaci\xf3n adicional sobre lo que sucedi\xf3. Por convenci\xf3n, ponemos esa informaci\xf3n en un campo llamado payload.")),(0,o.kt)("p",null,"Un objeto de action t\xedpico podr\xeda verse as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const addTodoAction = {\n  type: 'todos/todoAdded',\n  payload: 'Buy milk'\n}\n\n")),(0,o.kt)("h3",{id:"dispatcher"},"Dispatcher"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ejecuta una acci\xf3n que actualizara el State"),(0,o.kt)("li",{parentName:"ul"},"Sirve para enviar acciones"),(0,o.kt)("li",{parentName:"ul"},"La tienda(store) Redux tiene un m\xe9todo llamado dispatch. La \xfanica forma de actualizar el estado es llamar a store.dispatch() y pasarle un objeto de acci\xf3n . La tienda ejecutar\xe1 su funci\xf3n de reducci\xf3n y guardar\xe1 el nuevo valor de estado dentro, y podemos llamar getState() para recuperar el valor actualizado:"),(0,o.kt)("li",{parentName:"ul"},'Puede pensar en enviar acciones como "desencadenar un evento" en la aplicaci\xf3n. Algo sucedi\xf3 y queremos que la tienda lo sepa. Los reductores act\xfaan como oyentes de eventos, y cuando escuchan una acci\xf3n que les interesa, actualizan el estado en respuesta.')),(0,o.kt)("h3",{id:"store"},"Store"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contiene el state(estado) de la aplicacion que a su vez puede tener varios estados"),(0,o.kt)("li",{parentName:"ul"},"Solo puede existir UN store por aplicaci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"El estado actual de la aplicaci\xf3n  vive en un objeto llamado store "),(0,o.kt)("li",{parentName:"ul"},"La tienda se crea pasando un reductor y tiene un m\xe9todo llamado getState() que devuelve el valor del estado actual")),(0,o.kt)("h3",{id:"subscriber"},"Subscriber"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es un manejador de eventos para el State")),(0,o.kt)("h3",{id:"reducers"},"Reducers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Son funciones que gestionan los actions"),(0,o.kt)("li",{parentName:"ul"},"Un reductor es una funci\xf3n que recibe un state(estado) y un objeto action , decide c\xf3mo actualizar el estado si es necesario y devuelve el nuevo estado: (state, action) => newState"),(0,o.kt)("li",{parentName:"ul"},"Puede pensar en un reductor como un detector de eventos que maneja los eventos en funci\xf3n del tipo de acci\xf3n (evento) recibido."),(0,o.kt)("li",{parentName:"ul"},"Los reductores siempre deben seguir unas reglas espec\xedficas:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Solo deben calcular el nuevo valor de estado en funci\xf3n de los argumentos State y action"),(0,o.kt)("li",{parentName:"ul"},"No se les permite modificar el existente state. En su lugar, deben realizar actualizaciones inmutables , copiando los valores existentes  en State y realizando cambios en los valores copiados."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'No deben hacer ninguna l\xf3gica as\xedncrona, calcular valores aleatorios o causar otros "efectos secundarios".\n')))))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'Mutable" significa "cambiable". Si algo es "inmutable", nunca se puede cambiar.'))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"La l\xf3gica dentro de las funciones del reductor normalmente sigue la misma serie de pasos:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Verifique si al reductor le importa esta acci\xf3n",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Si es as\xed, haga una copia del estado, actualice la copia con nuevos valores y devu\xe9lvala"))),(0,o.kt)("li",{parentName:"ol"},"De lo contrario, devuelve el estado existente sin cambios.")),(0,o.kt)("h3",{id:"vista"},"vista"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"La interfaz de usuario basada en el estado actual")),(0,o.kt)("h3",{id:"estado"},"Estado"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"El estado , la fuente de verdad que impulsa nuestra aplicaci\xf3n;")),(0,o.kt)("h3",{id:"selectores"},"Selectores"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Los selectores son funciones que saben c\xf3mo extraer informaci\xf3n espec\xedfica de un valor de estado de almacenamiento. A medida que una aplicaci\xf3n crece, esto puede ayudar a evitar repetir la l\xf3gica, ya que diferentes partes de la aplicaci\xf3n necesitan leer los mismos datos")),(0,o.kt)("h3",{id:"flujo-de-datos-unidireccional"},"flujo de datos unidireccional"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"El estado describe la condici\xf3n de la aplicaci\xf3n en un momento espec\xedfico"),(0,o.kt)("li",{parentName:"ul"},"La interfaz de usuario se representa en funci\xf3n de ese estado"),(0,o.kt)("li",{parentName:"ul"},"Cuando sucede algo (como que un usuario haga clic en un bot\xf3n), el estado se actualiza en funci\xf3n de lo que ocurri\xf3"),(0,o.kt)("li",{parentName:"ul"},"La interfaz de usuario se vuelve a renderizar en funci\xf3n del nuevo estado"),(0,o.kt)("li",{parentName:"ul"},'Sin embargo, la simplicidad puede colapsar cuando tenemos m\xfaltiples componentes que necesitan compartir y usar el mismo estado , especialmente si esos componentes est\xe1n ubicados en diferentes partes de la aplicaci\xf3n. A veces, esto se puede resolver "elevando el estado" a los componentes principales, pero eso no siempre ayuda.'),(0,o.kt)("li",{parentName:"ul"},'Una forma de resolver esto es extraer el estado compartido de los componentes y colocarlo en una ubicaci\xf3n centralizada fuera del \xe1rbol de componentes. Con esto, nuestro \xe1rbol de componentes se convierte en una gran "vista", y cualquier componente puede acceder al estado o desencadenar acciones, sin importar d\xf3nde se encuentren en el \xe1rbol.'),(0,o.kt)("li",{parentName:"ul"},"Al definir y separar los conceptos involucrados en la administraci\xf3n del estado y hacer cumplir las reglas que mantienen la independencia entre las vistas y los estados, le damos a nuestro c\xf3digo m\xe1s estructura y mantenibilidad."),(0,o.kt)("li",{parentName:"ul"},"Esta es la idea b\xe1sica detr\xe1s de Redux: un \xfanico lugar centralizado para contener el estado global en su aplicaci\xf3n y patrones espec\xedficos a seguir al actualizar ese estado para que el c\xf3digo sea predecible.")),(0,o.kt)("h2",{id:"sin-react"},"Sin react"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creamos ul contador con  reducer y actions")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"   /*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\n   const contadorReduce = (state, action) => {\n    const { type } = action;\n    if (type === '@counter/incremented') {\n        return state + 1;\n    }\n    if (type === '@counter/decremented') {\n        return state - 1;\n    }\n    if (type === '@counter/reset') {\n        return 0;\n    }\n\n};\nconst actionIncremented = {\n    type: '@counter/incremented'\n}\nconst actionDecremented = {\n    type: '@counter/decremented'\n}\nconst actionReset = {\n    type: '@counter/reset'\n}\n    // El contador arrranca en 1 y le  suma uno\n  console.log(contadorReduce(1 , actionIncremented));\n // El contador arrranca en 1 y le  resta uno\n         console.log(contadorReduce(1, actionDecremented));\n// el contador arranca en 5 , pero se resetea y vuelve a 0\n            console.log(contadorReduce(5, actionReset));\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Aunque se suele utilizer con switch")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"    /*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\n    const contadorReduce = (state, action) => {\n        \n        switch (action.type) {\n             case '@counter/incremented':\n                 return state + 1; \n                 case '@counter/decremented':\n                 return state - 1; \n                 case '@counter/reset':\n                 return 0\n \n         }\n \n \n     };\n     const actionIncremented = {\n         type: '@counter/incremented'\n     }\n     const actionDecremented = {\n         type: '@counter/decremented'\n     }\n     const actionReset = {\n         type: '@counter/reset'\n     }\n         // El contador arrranca en 1 y le  suma uno\n       console.log(contadorReduce(1 , actionIncremented));\n      // El contador arrranca en 1 y le  resta uno\n              console.log(contadorReduce(1, actionDecremented));\n    // el contador arranca en 5 , pero se resetea y vuelve a 0\n                 console.log(contadorReduce(5, actionReset));\n\n")),(0,o.kt)("h2",{id:"store-1"},"Store"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es un objeto que contiene(almacena) los actions y Reducers como si fueran uno solo."),(0,o.kt)("li",{parentName:"ul"},"Es un objeto que contiene los estados y las diferentes acciones que se puede realizar en el."),(0,o.kt)("li",{parentName:"ul"},"El store se encarga de llamar a las acciones"),(0,o.kt)("li",{parentName:"ul"},"Permiten: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Actualizar el estado de la app"),(0,o.kt)("li",{parentName:"ul"},"Leer el estado de la app"),(0,o.kt)("li",{parentName:"ul"},"Contener(Almacenar) el estado de la app.")))),(0,o.kt)("p",null,"Lo instalamos "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"npm install redux\n")),(0,o.kt)("p",null,"package.json "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nos aseguramos que estamos trabajando con type:module")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "name": "prueba-2",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "type": "module",\n  "scripts": {\n    "start": "node index.js"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "redux": "^4.1.2"\n  }\n}\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createStore } from 'redux';\n    /*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\n    const contadorReduce = (state, action) => {\n        \n        switch (action.type) {\n             case '@counter/incremented':\n                 return state + 1; \n                 case '@counter/decremented':\n                 return state - 1; \n                 case '@counter/reset':\n                 return 0\n \n         }\n \n \n     };\n     const actionIncremented = {\n         type: '@counter/incremented'\n     }\n     const actionDecremented = {\n         type: '@counter/decremented'\n     }\n     const actionReset = {\n         type: '@counter/reset'\n     }\n\n   // Creamos un store\n   // createStore(reducer)\n   // la Store sabe como debe actualizar el Estado ahora\n   const store = createStore(contadorReduce);\n    \n \n    // Le enviamos un evento a la store\n     store.dispatch(actionIncremented)\n    console.log(store.getState());\n     \n\n")),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Devuelve  Nam ya que nunca le especificamos el valor del estado , nunca lo inicializamos."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createStore } from 'redux';\n    /*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\n    const contadorReduce = (state = 0, action) => {\n        \n        switch (action.type) {\n             case '@counter/incremented':\n                 return state + 1; \n                 case '@counter/decremented':\n                 return state - 1; \n                 case '@counter/reset':\n                 return 0\n \n         }\n \n \n     };\n     const actionIncremented = {\n         type: '@counter/incremented'\n     }\n     const actionDecremented = {\n         type: '@counter/decremented'\n     }\n     const actionReset = {\n         type: '@counter/reset'\n     }\n\n   // Creamos un store\n   // createStore(reducer)\n   // la Store sabe como debe actualizar el Estado ahora\n   const store = createStore(contadorReduce);\n    \n \n    // Le enviamos un evento a la store\n    // Suma 1\n     store.dispatch(actionIncremented)\n     // Devuelve 1\n     // Recuperamos el estado\n    console.log(store.getState());\n     // Le enviamos un evento a la store\n     // Suma 1\n     store.dispatch(actionIncremented)\n     // Devuelve 2\n    // Recuperamos el estado\n    console.log(store.getState());\n\n")),(0,o.kt)("h2",{id:"suscribirse"},"Suscribirse"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Cada vez que detecta un cambio , ejecutara una funcion.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { createStore } from 'redux';\n/*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\nconst contadorReduce = (state = 0, action) => {\n    \n    switch (action.type) {\n         case '@counter/incremented':\n             return state + 1; \n             case '@counter/decremented':\n             return state - 1; \n             case '@counter/reset':\n             return 0\n\n     }\n\n };\n const actionIncremented = {\n     type: '@counter/incremented'\n }\n const actionDecremented = {\n     type: '@counter/decremented'\n }\n const actionReset = {\n     type: '@counter/reset'\n }\n\n// Creamos un store\n// createStore(reducer)\n// la Store sabe como debe actualizar el Estado ahora\nconst store = createStore(contadorReduce);\n//subscribe(callback)\n//Por cada cambio del estado , ejecuta el callback\nstore.subscribe(() => {\n    // Recuperamos el estado\n   console.log(store.getState());\n})\n\n// Le enviamos un evento a la store\n// Suma 1\n store.dispatch(actionIncremented)\n // Le enviamos un evento a la store\n // Suma 1\n store.dispatch(actionIncremented)\n\n")),(0,o.kt)("h2",{id:"migrando-a-react"},"Migrando a React"),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Acordate del type:modules en el package.json"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"npm install redux\n")),(0,o.kt)("p",null,"app.jsx"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport { createStore } from 'redux';\nconst App = () => {\n    const actionIncremented = {\n        type: '@counter/incremented'\n    }\n    const actionDecremented = {\n        type: '@counter/decremented'\n    }\n    const actionReset = {\n        type: '@counter/reset'\n    }\n    /*El reducer es una funci\xf3n pura que toma el estado anterior y una acci\xf3n, y devuelve en nuevo estado. */\n    const contadorReduce = (state = 0, action) => {\n       \n        switch (action.type) {\n            case '@counter/incremented':\n                return state + 1;\n            case '@counter/decremented':\n                return state - 1;\n            case '@counter/reset':\n                return 0\n            default: \n               return state;\n\n        }\n\n    };\n\n    // Creamos un store\n    // createStore(reducer)\n    // la Store sabe como debe actualizar el Estado ahora\n    const store = createStore(contadorReduce);\n    //subscribe(callback)\n    //Por cada cambio del estado , ejecuta el callback\n\n    store.subscribe(() => {\n        // Recuperamos el estado\n        console.log(store.getState());\n    })\n\n  \n\n    return (\n        <div>\n            <h1>{store.getState()}</h1>\n        </div>\n    )\n}\n\nexport default App\n\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"Si desea que se renderize el DOM lo pones en el index.js y en la suscripci\xf3n renderizas todo por cada cambio del Estado.")))),(0,o.kt)("h2",{id:"extension"},"Extension"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=es"},"Redux Devtools")),(0,o.kt)("li",{parentName:"ul"},"Te permite depurar el codigo y viajar en el tiempo ")),(0,o.kt)("h3",{id:"configuracion"},"Configuracion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Al crear el store, hay que poner el siguiente valor como segundo parametro")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Creamos un store\n    // createStore(reducer)\n    // la Store sabe como debe actualizar el Estado ahora\n    const store = createStore(contadorReduce ,\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n")),(0,o.kt)("h2",{id:"empezar-con--react-redux"},"Empezar con  React-redux"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://react-redux.js.org/"},"Lo instalas a traves de npm")),(0,o.kt)("li",{parentName:"ul"},"Se utiliza cuando el proyecto es mediano o grande.")),(0,o.kt)("h3",{id:"carpetas-a-crear-en-src"},"Carpetas a crear en src"),(0,o.kt)("h4",{id:"carpeta-actions"},"carpeta actions"),(0,o.kt)("h4",{id:"carpeta-types"},"carpeta types"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"index.js va a contener todos los tipos de accion")),(0,o.kt)("h4",{id:"carpeta-reducers"},"carpeta reducers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"index.js va a contener todos los reducers")),(0,o.kt)("p",null,"reducers/index.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {combineReducers} from 'redux';\n// junta todos los reducers en uno\n// recibe un objeto donde cada propiedad es un reducer\nconst reducer = combineReducers({})\nexport default reducer;\n\n")),(0,o.kt)("h4",{id:"carpeta-store"},"carpeta store"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"index.js "),(0,o.kt)("li",{parentName:"ul"},"Todos los reducers se almacenan  como uno solo que contiene a todos en la store")),(0,o.kt)("p",null,"store/index.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {createStore} from 'redux';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n    console.log(store);\n})\n\nexport default store;\n\n")),(0,o.kt)("h2",{id:"appjsx"},"App.jsx"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Renderizamos el componente Provider de react redux alrededor de toda nuestra app , para compartir el estado."),(0,o.kt)("li",{parentName:"ul"},"El componente tiene un props cuyo valor es el Store (estado \xfanico), para compartirlo con toda la app.")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observacion")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Si el archivo se llama index.js no hace falta especificar el archivo , lo toma solo si seleccionas la carpeta"))),(0,o.kt)("p",null,"components/Contador.jsx"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\n\nconst Contador = () => {\n  return (\n    <div>Contador</div>\n  )\n}\n\nexport default Contador\n\n")),(0,o.kt)("p",null,"App.jsx"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const App = () => {\n  \n    \n    return (\n       <Provider store={store}>\n        <div>\n           <h1>App</h1>\n           <Contador/>\n        </div>\n        </Provider>\n    )\n}\n\n")),(0,o.kt)("h2",{id:"contador"},"Contador"),(0,o.kt)("p",null,"type/index.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Va todos los types (tipo de accion)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'\nexport const INCREMENT = "INCREMENT";\nexport const DECREMENT = "DECREMENT";\nexport const DECREMENT_5 = "DECREMENT_5";\n\n')),(0,o.kt)("p",null,"actions/ contadorAction.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Son funciones que devuelven un objeto action ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { DECREMENT, DECREMENT_5, INCREMENT } from "../types";\n\nexport const sumar = () => ({type:INCREMENT})\nexport const restar = () => ({type:DECREMENT})\nexport const restar_5 = () => ({type:DECREMENT_5 , payload:5})\n\n')),(0,o.kt)("p",null,"reducers/contadorReducer.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es la funcion reducer junto con el valor inicial")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { DECREMENT, DECREMENT_5, INCREMENT } from "../types";\n\nconst initialState = 0;\nexport default function contadorReducer(state = initialState , action) {\n    switch(action.type) {\n        case INCREMENT:\n            return state + 1;\n        case DECREMENT: \n            return state - 1 ;\n        case  DECREMENT_5:\n           return state - action.payload;\n        default:\n            return state;\n    }\n}\n\n')),(0,o.kt)("p",null,"reducers/index.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Aca juntamos todos los reducers, ya que redux  acepta solo UN ESTADO.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {combineReducers} from 'redux';\nimport contadorReducer from './contadorReducer';\n// junta todos los reducers en uno\n// recibe un objeto donde cada propiedad es un reducer\n// el valor de cada propiedad es un reducer\nconst reducer = combineReducers({ contador: contadorReducer})\nexport default reducer;\n\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"El reducer que creamos al juntar todo , lo lee Store"))),(0,o.kt)("h2",{id:"useselector"},"useSelector"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es un hook de react-redux"),(0,o.kt)("li",{parentName:"ul"},"Es como el useState pero para redux"),(0,o.kt)("li",{parentName:"ul"},"useSelector es un Hook que nos permite extraer datos del store de Redux utilizando una funci\xf3n selectora, \xe9sta debe ser pura ya que es potencialmente invocada m\xfaltiples veces"),(0,o.kt)("li",{parentName:"ul"},"Contiene un callback que recibe el estado que se almacena en la store y devuelve el estado entero o parte de ese.")),(0,o.kt)("p",null,"Contador.jsx"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport { useSelector } from 'react-redux'\n \nconst Contador = () => {\n    // state es un objeto  , con todas las propiedades  de reducers/index.js\n    //el parametro state del callback es el estado(store)\n    const state = useSelector(state => state)\n  return (\n    <div> \n        <h1>Contador</h1>\n        <button>+5</button>\n        <button>+1</button>\n        <button>-1</button>\n        {/* state.contador tiene el reducer del contador (fijarte en el index.js) */}\n        <h3>{state.contador}</h3>\n    </div>\n  )\n}\n\nexport default Contador\n\n")),(0,o.kt)("h2",{id:"hook-usedispatch"},"hook useDispatch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Es un hook de react-redux"),(0,o.kt)("li",{parentName:"ul"},"Sirve para enviar acciones  a la Store"),(0,o.kt)("li",{parentName:"ul"},"Cuando se envia una accion a la Store , el Estado se modifica")),(0,o.kt)("p",null,"Contador.jsx"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { restar, restar_5, sumar } from '../actions/contadorAction';\n\nconst Contador = () => {\n   // state es un objeto  , con todas las propiedades  de reducers/index.js\n   //useSelector(funcion);\n   //el parametro state del callback es el estado(store)\n   const state = useSelector(state => state)\n  // useDispatch()\n   const dispatch = useDispatch();\n return (\n   <div> \n       <h1>Contador</h1>\n       <button onClick={() => dispatch(sumar())}>+1</button>\n       <button onClick={() => dispatch(restar())}>-1</button>\n       <button onClick={() => dispatch(restar_5())}>-5</button>\n       {/* state.contador tiene el reducer del contador (fijarte en el index.js) */}\n       <h3>{state.contador}</h3>\n   </div>\n )\n}\n\nexport default Contador\n\n")))}u.isMDXComponent=!0}}]);