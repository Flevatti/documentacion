"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[5022],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var i=n(6540);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function t(e,a){if(null==e)return{};var n,i,o=function(e,a){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var a=i.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=c(e.components);return i.createElement(l.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},p=i.forwardRef((function(e,a){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=t(e,["components","mdxType","originalType","parentName"]),u=c(n),p=o,g=u["".concat(l,".").concat(p)]||u[p]||m[p]||r;return n?i.createElement(g,s(s({ref:a},d),{},{components:n})):i.createElement(g,s({ref:a},d))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=p;var t={};for(var l in a)hasOwnProperty.call(a,l)&&(t[l]=a[l]);t.originalType=e,t[u]="string"==typeof e?e:o,s[1]=t;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6977:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var i=n(8168),o=(n(6540),n(5680));const r={sidebar_position:16},s="C# 11",t={unversionedId:"C--/C11",id:"C--/C11",title:"C# 11",description:"11",source:"@site/docs/C--/C11.md",sourceDirName:"C--",slug:"/C--/C11",permalink:"/documentacion/docs/C--/C11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/C11.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"C",previous:{title:"C# 10",permalink:"/documentacion/docs/C--/C10"}},l={},c=[{value:"Required",id:"required",level:2},{value:"Patrones en lista",id:"patrones-en-lista",level:2},{value:"Coincidencia de elementos espec\xedficos",id:"coincidencia-de-elementos-espec\xedficos",level:4},{value:"Coincidencia con un n\xfamero espec\xedfico de elementos",id:"coincidencia-con-un-n\xfamero-espec\xedfico-de-elementos",level:4},{value:"Uso de patrones de longitud",id:"uso-de-patrones-de-longitud",level:4},{value:"Patrones de &quot;resto&quot;",id:"patrones-de-resto",level:4},{value:"Capturar los primeros tres valores de una lista",id:"capturar-los-primeros-tres-valores-de-una-lista",level:4},{value:"Switch",id:"switch",level:4},{value:"Modificador de acceso file",id:"modificador-de-acceso-file",level:2},{value:"Detalles del Modificador de Acceso file",id:"detalles-del-modificador-de-acceso-file",level:4},{value:"Ejemplo de Uso",id:"ejemplo-de-uso",level:4},{value:"Strings",id:"strings",level:2},{value:"Strings literales",id:"strings-literales",level:4},{value:"Un solo s\xedmbolo de d\xf3lar",id:"un-solo-s\xedmbolo-de-d\xf3lar",level:4},{value:"Dos s\xedmbolos de d\xf3lar",id:"dos-s\xedmbolos-de-d\xf3lar",level:4},{value:"Tres s\xedmbolos de d\xf3lar",id:"tres-s\xedmbolos-de-d\xf3lar",level:4},{value:"Concatenar c\xf3digo",id:"concatenar-c\xf3digo",level:4},{value:"UTF-8",id:"utf-8",level:4},{value:"Ref struct",id:"ref-struct",level:2},{value:"Consideraciones al usar ref struct dentro de otro",id:"consideraciones-al-usar-ref-struct-dentro-de-otro",level:4},{value:"Struct",id:"struct",level:2},{value:"\xbfQu\xe9 Implica Esta Caracter\xedstica?",id:"qu\xe9-implica-esta-caracter\xedstica",level:4},{value:"Generic Math",id:"generic-math",level:2},{value:"Operadores Est\xe1ticos y Virtuales",id:"operadores-est\xe1ticos-y-virtuales",level:4},{value:"Operadores en Tipos Gen\xe9ricos",id:"operadores-en-tipos-gen\xe9ricos",level:4},{value:"Atributos gen\xe9ricos",id:"atributos-gen\xe9ricos",level:2},{value:"\xbfQu\xe9 son los atributos en C#?",id:"qu\xe9-son-los-atributos-en-c",level:4},{value:"Limitaci\xf3n antes de C# 11",id:"limitaci\xf3n-antes-de-c-11",level:4},{value:"Introducci\xf3n de Atributos Gen\xe9ricos en C# 11",id:"introducci\xf3n-de-atributos-gen\xe9ricos-en-c-11",level:4},{value:"Definici\xf3n del Atributo Gen\xe9rico",id:"definici\xf3n-del-atributo-gen\xe9rico",level:4},{value:"Uso del Atributo Gen\xe9rico",id:"uso-del-atributo-gen\xe9rico",level:4},{value:"Null Parameter Checking (Todavia no se admite)",id:"null-parameter-checking-todavia-no-se-admite",level:2},{value:"\xbfC\xf3mo funciona?",id:"c\xf3mo-funciona",level:4},{value:"\xbfQu\xe9 ocurre en tiempo de ejecuci\xf3n?",id:"qu\xe9-ocurre-en-tiempo-de-ejecuci\xf3n",level:4},{value:"Comparaci\xf3n con m\xe9todos tradicionales",id:"comparaci\xf3n-con-m\xe9todos-tradicionales",level:4},{value:"Consideraciones",id:"consideraciones",level:4}],d={toc:c},u="wrapper";function m(e){let{components:a,...n}=e;return(0,o.yg)(u,(0,i.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"c-11"},"C# 11"),(0,o.yg)("h2",{id:"required"},"Required"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C# 11, la palabra clave required se usa para indicar que una propiedad o campo debe ser obligatoriamente inicializado. Esto significa que cuando se marque un miembro con required, el compilador forzar\xe1 al desarrollador a proporcionar un valor para ese miembro en el momento de la inicializaci\xf3n, ya sea en el constructor o usando inicializadores de objetos."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo b\xe1sico:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Persona\n{\n    public required string Nombre { get; init; }\n    public int Edad { get; set; }\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"La propiedad Nombre est\xe1 marcada como required, lo que significa que cualquier instancia de la clase Persona deber\xe1 proporcionar un valor para Nombre al crearse. Si intentas crear una instancia de Persona sin establecer el valor de Nombre, el compilador generar\xe1 un error.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ejemplo de uso correcto:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var persona = new Persona\n{\n    Nombre = \"Juan\", // Es requerido\n    Edad = 25\n};\n//Error de compilaci\xf3n:\n//Si intentas hacer esto sin establecer Nombre, obtendr\xe1s un error:\nvar persona = new Persona\n{\n    Edad = 25\n};\n// Error del compilador: la propiedad 'Nombre' es requerida y no se ha inicializado.\n\n")),(0,o.yg)("h2",{id:"patrones-en-lista"},"Patrones en lista"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C# 11, los patrones de listas (List Patterns) son una extensi\xf3n del pattern matching (coincidencia de patrones) que permite trabajar con colecciones (como arreglos o listas) de una manera m\xe1s intuitiva y concisa. "),(0,o.yg)("li",{parentName:"ul"},"Caracter\xedsticas principales de los patrones de listas:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Coincidencia por elementos espec\xedficos: Puedes comprobar si una lista contiene ciertos elementos en posiciones espec\xedficas."),(0,o.yg)("li",{parentName:"ul"},'Patrones de "resto": Permiten coincidir con un elemento de la lista y capturar el resto de los elementos.'),(0,o.yg)("li",{parentName:"ul"},"Patrones de longitud: Puedes comprobar la longitud de una lista, es decir, si tiene un n\xfamero espec\xedfico de elementos.")))),(0,o.yg)("h4",{id:"coincidencia-de-elementos-espec\xedficos"},"Coincidencia de elementos espec\xedficos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes verificar si una lista comienza con ciertos elementos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int[] numeros = { 1, 2, 3, 4 };\n\nif (numeros is [1, 2, ..])\n{\n    Console.WriteLine("La lista comienza con 1 y 2.");\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este ejemplo, el patr\xf3n  verifica si el primer elemento es 1 y el segundo es 2. El ",(0,o.yg)("inlineCode",{parentName:"li"},"..")," indica que pueden haber m\xe1s elementos despu\xe9s de estos dos.")))),(0,o.yg)("h4",{id:"coincidencia-con-un-n\xfamero-espec\xedfico-de-elementos"},"Coincidencia con un n\xfamero espec\xedfico de elementos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes verificar si una lista tiene un n\xfamero espec\xedfico de elementos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int[] numeros = { 1, 2, 3 };\n\nif (numeros is [1, 2, 3])\n{\n    Console.WriteLine("La lista tiene exactamente los elementos 1, 2 y 3.");\n}\n\n')),(0,o.yg)("h4",{id:"uso-de-patrones-de-longitud"},"Uso de patrones de longitud"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes verificar si una lista tiene un tama\xf1o espec\xedfico y capturar elementos de la misma:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int[] numeros = { 1, 2, 3, 4 };\n\nif (numeros is [_, _, .. var resto])\n{\n    Console.WriteLine($"Los dos primeros elementos son ignorados y el resto son: {string.Join(", ", resto)}");\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Aqu\xed, ",(0,o.yg)("inlineCode",{parentName:"li"},"  _, _")," ignora los dos primeros elementos y ",(0,o.yg)("inlineCode",{parentName:"li"},".. var resto")," captura el resto de la lista en la variable resto.")))),(0,o.yg)("h4",{id:"patrones-de-resto"},'Patrones de "resto"'),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Supongamos que tienes una lista de enteros y quieres verificar si comienza con un n\xfamero espec\xedfico, y luego capturar el resto de los n\xfameros en una nueva variable:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numeros = { 10, 20, 30, 40, 50 };\n\n        // Verificar si la lista comienza con 10 y capturar el resto\n        if (numeros is [10, .. var resto])\n        {\n            Console.WriteLine("La lista comienza con 10.");\n            Console.WriteLine($"El resto de los elementos son: {string.Join(", ", resto)}");\n        }\n        else\n        {\n            Console.WriteLine("La lista no comienza con 10.");\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En la condici\xf3n if, usamos el patr\xf3n ",(0,o.yg)("inlineCode",{parentName:"li"},"[10, .. var resto]"),":",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"10")," es el primer elemento que estamos verificando."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},".. var resto")," captura todos los elementos restantes en la lista en una variable llamada resto."),(0,o.yg)("li",{parentName:"ul"},"Si la lista coincide con el patr\xf3n, se ejecutan las instrucciones dentro del bloque if, donde se imprime que la lista comienza con 10 y se muestra el resto de los elementos.")))))),(0,o.yg)("h4",{id:"capturar-los-primeros-tres-valores-de-una-lista"},"Capturar los primeros tres valores de una lista"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numeros = { 1, 2, 3, 4, 5, 6 };\n\n        // Verificar si la lista tiene al menos tres elementos y capturar los primeros tres\n        if (numeros is [int primero, int segundo, int tercero, ..])\n        {\n            Console.WriteLine($"Primer valor: {primero}");\n            Console.WriteLine($"Segundo valor: {segundo}");\n            Console.WriteLine($"Tercer valor: {tercero}");\n            Console.WriteLine("Se han descartado los valores restantes.");\n        }\n        else\n        {\n            Console.WriteLine("La lista no tiene suficientes elementos.");\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n del c\xf3digo")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En la condici\xf3n if, usamos el patr\xf3n ",(0,o.yg)("inlineCode",{parentName:"li"},"[int primero, int segundo, int tercero, ..]"),":",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"int primero"),", ",(0,o.yg)("inlineCode",{parentName:"li"},"int segundo")," y ",(0,o.yg)("inlineCode",{parentName:"li"},"int tercero")," capturan los primeros tres elementos de la lista."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"..")," se usa para ignorar cualquier elemento adicional en la lista."))),(0,o.yg)("li",{parentName:"ul"},"Si la lista tiene al menos tres elementos, se ejecuta el bloque de c\xf3digo donde se imprimen los tres primeros valores. Si no, se imprime un mensaje indicando que no hay suficientes elementos.")))),(0,o.yg)("h4",{id:"switch"},"Switch"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes usar patrones de listas en las expresiones switch. Esto te permite comprobar y actuar sobre listas de manera concisa dentro de un bloque switch. "),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numeros = { 1, 2, 3, 4 };\n\n        switch (numeros)\n        {\n            case [1, 2, ..]:\n                Console.WriteLine("La lista comienza con 1 y 2.");\n                break;\n            case [3, 4, ..]:\n                Console.WriteLine("La lista comienza con 3 y 4.");\n                break;\n            case [.. var resto]:\n                Console.WriteLine($"La lista tiene otros elementos. Total: {resto.Length}");\n                break;\n            default:\n                Console.WriteLine("La lista no coincide con ning\xfan patr\xf3n.");\n                break;\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n del c\xf3digo")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En el switch, cada case utiliza patrones de listas:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"case [1, 2, ..]:")," verifica si la lista comienza con 1 y 2."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"case [3, 4, ..]:")," verifica si la lista comienza con 3 y 4."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"case [.. var resto]:")," captura cualquier lista que no coincida con los casos anteriores y almacena el resto en resto.")))))),(0,o.yg)("h2",{id:"modificador-de-acceso-file"},"Modificador de acceso file"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C# 11, se introdujo el modificador de acceso file. Este modificador se utiliza para restringir la visibilidad de una clase, estructura o interfaz a solo el archivo en el que se declara. Es \xfatil para organizar el c\xf3digo y controlar el acceso a los miembros en un \xe1mbito m\xe1s limitado.")),(0,o.yg)("h4",{id:"detalles-del-modificador-de-acceso-file"},"Detalles del Modificador de Acceso file"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Visibilidad Limitada: Los miembros de una clase, estructura o interfaz marcada con file son accesibles solo dentro del archivo donde est\xe1n definidos. Esto es diferente de los modificadores de acceso tradicionales como public, private, protected, y internal, que tienen diferentes niveles de visibilidad en funci\xf3n del contexto."),(0,o.yg)("li",{parentName:"ul"},"Simplicidad en la Organizaci\xf3n del C\xf3digo: El uso de file permite a los desarrolladores encapsular detalles de implementaci\xf3n y evita la exposici\xf3n innecesaria de clases y miembros en otros archivos."),(0,o.yg)("li",{parentName:"ul"},"Uso Ideal para Clases de Ayuda: Es particularmente \xfatil para clases o estructuras que solo se utilizan en un archivo espec\xedfico, evitando as\xed que se filtren al espacio de nombres global.")),(0,o.yg)("h4",{id:"ejemplo-de-uso"},"Ejemplo de Uso"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Aqu\xed hay un ejemplo que ilustra c\xf3mo usar el modificador de acceso file:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Ejemplo.cs"',title:'"Ejemplo.cs"'},'// Archivo: Ejemplo.cs\n\nfile class ClaseInterna\n{\n    public void MetodoInterno()\n    {\n        Console.WriteLine("Este m\xe9todo es accesible solo dentro de este archivo.");\n    }\n}\n\npublic class ClasePublica\n{\n    public void MetodoPublico()\n    {\n        var claseInterna = new ClaseInterna();\n        claseInterna.MetodoInterno();\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ol",{parentName:"div"},(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("inlineCode",{parentName:"li"},"file class ClaseInterna"),": Esta clase solo es accesible dentro del archivo Ejemplo.cs. No se puede acceder a ella desde otros archivos."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("inlineCode",{parentName:"li"},"public class ClasePublica"),": Esta clase es p\xfablica y puede ser utilizada en otros archivos. Dentro de ella, puedes crear una instancia de ClaseInterna y llamar a su m\xe9todo."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("inlineCode",{parentName:"li"},"M\xe9todo MetodoInterno"),": Este m\xe9todo solo puede ser llamado dentro de Ejemplo.cs porque ClaseInterna es una clase de acceso file.")))),(0,o.yg)("h2",{id:"strings"},"Strings"),(0,o.yg)("h4",{id:"strings-literales"},"Strings literales"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En  C# 11 se permite la creaci\xf3n de cadenas literales (Strings) de m\xfaltiples l\xedneas utilizando la sintaxis de comillas triples (tres comillas dobles). Esto simplifica la escritura de cadenas largas y mejora la legibilidad."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string textoMultilinea = """\nEste es un ejemplo\nde un literal de cadena\nde m\xfaltiples l\xedneas.\n""";\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se han introducido literales de cadena (string) sin procesar (raw string literals), que permiten incluir caracteres especiales y comillas sin necesidad de escapar. Estos literales son \xfatiles para trabajar con cadenas que contienen muchos caracteres especiales, como rutas de archivo o expresiones regulares."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string rutaArchivo = r"""\nC:\\Archivos\\MiArchivo.txt\n""";\n\nstring expresionRegular = r"""\n\\d{3}-\\d{2}-\\d{4}\n""";\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este caso, el prefijo r indica que el literal de cadena es sin procesar, por lo que no es necesario escapar los caracteres.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Adem\xe1s de los literales sin procesar, los literales de cadena verbatim tambi\xe9n est\xe1n disponibles, permiten incluir caracteres especiales y m\xfaltiples l\xedneas sin necesidad de escapar la mayor\xeda de los caracteres. Se crean utilizando el s\xedmbolo @ antes de las comillas dobles que delimitan la cadena."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string textoVerbatim = @"Este es un texto\nque ocupa m\xfaltiples l\xedneas\ny tiene una ruta: C:\\Archivos\\MiArchivo.txt.";\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"C# 11 tambi\xe9n permite el uso de caracteres de espacio y tabulaci\xf3n dentro de los literales de cadena de m\xfaltiples l\xedneas, mejorando a\xfan m\xe1s la legibilidad. Puedes usar tabulaciones o espacios para alinear el texto de manera m\xe1s efectiva."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string textoAlineado = """\n    Nombre: Juan\n    Edad: 30\n    Ciudad: Ciudad de M\xe9xico\n""";\n\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Hay tres niveles de interpolaci\xf3n a su vez que se pueden usar con las tres comillas.")),(0,o.yg)("h4",{id:"un-solo-s\xedmbolo-de-d\xf3lar"},"Un solo s\xedmbolo de d\xf3lar"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes incluir variables dentro de llaves {}."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int x = 5;\nstring message = $"""\n    El valor de x es {x}.\n    Este es un mensaje multil\xednea.\n""";\nSystem.Console.WriteLine(message);\n\n')),(0,o.yg)("h4",{id:"dos-s\xedmbolos-de-d\xf3lar"},"Dos s\xedmbolos de d\xf3lar"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes incluir variables dentro de dos llaves ",(0,o.yg)("inlineCode",{parentName:"li"},"{{}}"),". Las ",(0,o.yg)("inlineCode",{parentName:"li"},"{}")," son tratadas como caracteres literales."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int x = 5;\nstring message = $$"""\n    El valor de x es {x} . El valor de x es {{x}}\n    Este es un mensaje multil\xednea.\n""";\nSystem.Console.WriteLine(message);\n\n')),(0,o.yg)("h4",{id:"tres-s\xedmbolos-de-d\xf3lar"},"Tres s\xedmbolos de d\xf3lar"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puedes incluir variables dentro de tres llaves ",(0,o.yg)("inlineCode",{parentName:"li"},"{{{}}}"),". Las ",(0,o.yg)("inlineCode",{parentName:"li"},"{}")," y ",(0,o.yg)("inlineCode",{parentName:"li"},"{{}}")," son tratadas como caracteres literales."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int x = 5;\nstring message = $$$"""\n    El valor de x es {x} . El valor de x es {{x}}. El valor de x es {{{x}}}\n    Este es un mensaje multil\xednea.\n""";\nSystem.Console.WriteLine(message);\n\n')),(0,o.yg)("h4",{id:"concatenar-c\xf3digo"},"Concatenar c\xf3digo"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Podemos concatenar c\xf3digo, por ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int edad = 25;\n\n// Concatenaci\xf3n con interpolaci\xf3n y expresi\xf3n switch\nstring mensaje = $"Tienes {edad}, lo que significa que eres {(edad switch\n{\n    < 18 => "menor de edad",\n    >= 18 and < 65 => "adulto",\n    >= 65 => "persona mayor"\n})}.";\n\nConsole.WriteLine(mensaje);\n\n')),(0,o.yg)("h4",{id:"utf-8"},"UTF-8"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C#, las cadenas (string) utilizan por defecto la codificaci\xf3n UTF-16. Esto significa que cada car\xe1cter en una cadena se representa como un conjunto de 16 bits (2 bytes), lo que permite representar una amplia gama de caracteres de diferentes alfabetos, incluidos caracteres no latinos. UTF-16 tiende a ocupar m\xe1s espacio que UTF-8 en ciertas situaciones, especialmente cuando se trata de caracteres que se pueden representar con menos bytes en UTF-8."),(0,o.yg)("li",{parentName:"ul"},"En C# 11, puedes crear un STRING UTF-8 usando el sufijo u8. Esto convierte autom\xe1ticamente una cadena en una representaci\xf3n de bytes de tipo ReadOnlySpan","<","byte>, que es m\xe1s eficiente que convertir manualmente una cadena en un arreglo de bytes."),(0,o.yg)("li",{parentName:"ul"},"Sintaxis de Cadena UTF-8 en C# 11:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'// Literal de cadena UTF-8\nReadOnlySpan<byte> saludoUtf8 = "Hola, \xbfc\xf3mo est\xe1s?"u8;\n\n// Tambi\xe9n podr\xedas convertir una cadena normal a UTF-8\nstring saludo = "Hola, \xbfc\xf3mo est\xe1s?";\nReadOnlySpan<byte> saludoUtf8FromString = saludo.AsSpan().ToArray();\n\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ejemplo Usando UTF-8:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'// Literal de cadena UTF-8\nReadOnlySpan<byte> mensajeUtf8 = "\xa1Hola, mundo!"u8;\n\nforeach (byte b in mensajeUtf8)\n{\n    Console.Write($"{b} ");\n}\n\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El metodo u8.toArray() crea un nuevo arreglo de bytes (byte[]) que contiene todos los bytes de la cadena en codificaci\xf3n UTF-8:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Byte[] mensaje = "Esto es una frase de ejemplo"u8.ToArray();\n\nConsole.WriteLine(mensaje);\n\n')),(0,o.yg)("h2",{id:"ref-struct"},"Ref struct"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C# 11, puedes definir un ref struct que contenga otro ref struct. Sin embargo, hay ciertas consideraciones y reglas a tener en cuenta al hacerlo."),(0,o.yg)("li",{parentName:"ul"},"Aqu\xed tienes un ejemplo que ilustra c\xf3mo se puede definir un ref struct que contiene otro ref struct:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public ref struct Punto\n{\n    public int X;\n    public int Y;\n\n    public Punto(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n\npublic ref struct Rectangulo\n{\n    public Punto EsquinaInferiorIzquierda; // Contiene un ref struct\n    public Punto EsquinaSuperiorDerecha;\n\n    public Rectangulo(Punto esquinaInferiorIzquierda, Punto esquinaSuperiorDerecha)\n    {\n        EsquinaInferiorIzquierda = esquinaInferiorIzquierda;\n        EsquinaSuperiorDerecha = esquinaSuperiorDerecha;\n    }\n\n    public void Imprimir()\n    {\n        Console.WriteLine($"Rect\xe1ngulo: ({EsquinaInferiorIzquierda.X}, {EsquinaInferiorIzquierda.Y}) " +\n                          $"a ({EsquinaSuperiorDerecha.X}, {EsquinaSuperiorDerecha.Y})");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Punto p1 = new Punto(1, 2);\n        Punto p2 = new Punto(5, 6);\n        Rectangulo rectangulo = new Rectangulo(p1, p2);\n        \n        rectangulo.Imprimir(); // Salida: Rect\xe1ngulo: (1, 2) a (5, 6)\n    }\n}\n\n')),(0,o.yg)("h4",{id:"consideraciones-al-usar-ref-struct-dentro-de-otro"},"Consideraciones al usar ref struct dentro de otro"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Uso de ref struct:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Las estructuras de referencia son \xfatiles en situaciones donde se desea evitar la asignaci\xf3n de memoria en el heap, ya que se almacenan en la pila(stack)."),(0,o.yg)("li",{parentName:"ul"},"Esto puede mejorar el rendimiento en ciertas situaciones, especialmente en aplicaciones de alto rendimiento o en el manejo de datos en tiempo real."))),(0,o.yg)("li",{parentName:"ol"},"Restricciones:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"ref struct tiene restricciones espec\xedficas, como no permitir ser asignadas a variables de tipo object o ser utilizadas como campos de clases, entre otras."),(0,o.yg)("li",{parentName:"ul"},"Aunque puedes anidar ref struct, ten cuidado al manipular los datos, ya que podr\xeda haber implicaciones en la gesti\xf3n de la memoria y el alcance de las variables."))),(0,o.yg)("li",{parentName:"ol"},"Compatibilidad:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Aseg\xfarate de entender c\xf3mo estas estructuras se comportan en diferentes contextos, como la interoperabilidad con otros tipos y m\xe9todos.")))),(0,o.yg)("h2",{id:"struct"},"Struct"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"A partir de C# 11, se ha introducido una caracter\xedstica que permite a los struct inicializar sus campos a valores por defecto cuando se crean instancias. Esto significa que puedes tener un struct que, al ser instanciado, garantiza que todos sus campos tengan valores predeterminados.")),(0,o.yg)("h4",{id:"qu\xe9-implica-esta-caracter\xedstica"},"\xbfQu\xe9 Implica Esta Caracter\xedstica?"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Valores por Defecto:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Cada tipo en C# tiene un valor por defecto. Por ejemplo, los tipos num\xe9ricos como int se inicializan a 0, los bool a false, y las cadenas (string) a null."),(0,o.yg)("li",{parentName:"ul"},"Con esta nueva caracter\xedstica, cuando se crea un struct, sus campos se inicializan autom\xe1ticamente a sus valores por defecto."))),(0,o.yg)("li",{parentName:"ol"},"C\xf3digo M\xe1s Limpio:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Esta funcionalidad permite escribir c\xf3digo m\xe1s limpio y evitar inicializaciones expl\xedcitas innecesarias. Al definir un struct, no es necesario inicializar cada campo en un constructor si deseas que tengan sus valores por defecto.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public struct Punto\n{\n    public int X;\n    public int Y;\n}\n\nclass Programa\n{\n    static void Main()\n    {\n        Punto p = new Punto(); // Los campos X e Y se inicializan a 0 por defecto.\n\n        Console.WriteLine($"X: {p.X}, Y: {p.Y}"); // Salida: X: 0, Y: 0\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Se define un struct llamado Punto que tiene dos campos, X e Y."),(0,o.yg)("li",{parentName:"ul"},"Al crear una instancia de Punto, sus campos X e Y se inicializan autom\xe1ticamente a 0 (su valor por defecto para int).")))),(0,o.yg)("h2",{id:"generic-math"},"Generic Math"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C# 10 Microsoft introdujo Generic Math, pero la comunidad notaba que faltaban varias caracter\xedsticas que quieren tener disponibles."),(0,o.yg)("li",{parentName:"ul"},"Microsoft ha respondido a las necesidades de la comunidad de desarrolladores al implementar importantes mejoras en C# 11, especialmente en el \xe1rea de Generic Math. ")),(0,o.yg)("h4",{id:"operadores-est\xe1ticos-y-virtuales"},"Operadores Est\xe1ticos y Virtuales"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Static Virtual: En C# 11, los m\xe9todos est\xe1ticos pueden ser declarados como virtuales. Esto permite que las clases derivadas puedan proporcionar su propia implementaci\xf3n de estos m\xe9todos. Este enfoque proporciona una mayor flexibilidad en la creaci\xf3n de tipos num\xe9ricos que pueden personalizar su comportamiento aritm\xe9tico."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public abstract class Numero<T>\n{\n    public static virtual T CrearInstancia() => default;\n}\n\npublic class Entero : Numero<int>\n{\n    public static override int CrearInstancia() => 0; // Sobreescribiendo el m\xe9todo\n}\n\npublic class Decimal : Numero<decimal>\n{\n    public static override decimal CrearInstancia() => 0.0m; // Sobreescribiendo el m\xe9todo\n}\n\nclass Programa\n{\n    static void Main()\n    {\n        int entero = Entero.CrearInstancia(); // Devuelve 0\n        decimal decimalValue = Decimal.CrearInstancia(); // Devuelve 0.0\n\n        Console.WriteLine($"Entero: {entero}, Decimal: {decimalValue}");\n    }\n}\n\n')),(0,o.yg)("h4",{id:"operadores-en-tipos-gen\xe9ricos"},"Operadores en Tipos Gen\xe9ricos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los operadores aritm\xe9ticos, como +, -, *, y /, ahora pueden ser utilizados directamente en tipos gen\xe9ricos que implementen las interfaces apropiadas como INumber","<","T>. Esto hace que las funciones y algoritmos matem\xe1ticos sean mucho m\xe1s f\xe1ciles de escribir y mantener:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public static T Sumar<T>(T a, T b) where T : INumber<T>\n{\n    return a + b; // Usa el operador + directamente\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"INumber es una interfaz que representa un valor num\xe9rico.  Proporciona un conjunto de m\xe9todos gen\xe9ricos para realizar operaciones aritm\xe9ticas, como sumar, restar, multiplicar y dividir. Estos m\xe9todos se pueden utilizar con cualquier tipo num\xe9rico que implemente la interfaz."),(0,o.yg)("li",{parentName:"ul"},"La interfaz est\xe1 dise\xf1ada para ser implementada por varios tipos num\xe9ricos, incluyendo int, long, float, double y decimal.")))),(0,o.yg)("h2",{id:"atributos-gen\xe9ricos"},"Atributos gen\xe9ricos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los atributos gen\xe9ricos introducidos en C# 11 permiten definir atributos que aceptan par\xe1metros gen\xe9ricos. Esto mejora la flexibilidad y reutilizaci\xf3n del c\xf3digo, ya que puedes aplicar un solo atributo a diferentes tipos de datos o clases sin tener que escribir m\xfaltiples versiones del atributo.")),(0,o.yg)("h4",{id:"qu\xe9-son-los-atributos-en-c"},"\xbfQu\xe9 son los atributos en C#?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En C#, los atributos son una forma de agregar metadatos a las clases, m\xe9todos, propiedades, y otros elementos del c\xf3digo. Estos metadatos pueden ser utilizados en tiempo de compilaci\xf3n o en tiempo de ejecuci\xf3n para modificar el comportamiento del c\xf3digo.")),(0,o.yg)("h4",{id:"limitaci\xf3n-antes-de-c-11"},"Limitaci\xf3n antes de C# 11"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Antes de C# 11, no pod\xedas usar gen\xe9ricos en la declaraci\xf3n de atributos, lo que te obligaba a definir m\xfaltiples versiones de un atributo si quer\xedas que funcionara con diferentes tipos de datos.")),(0,o.yg)("h4",{id:"introducci\xf3n-de-atributos-gen\xe9ricos-en-c-11"},"Introducci\xf3n de Atributos Gen\xe9ricos en C# 11"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Con C# 11, ahora puedes definir atributos gen\xe9ricos que aceptan tipos gen\xe9ricos como par\xe1metros. Esto permite que los atributos sean m\xe1s reutilizables y vers\xe1tiles, ya que puedes aplicar el mismo atributo a diferentes tipos sin tener que duplicar el c\xf3digo.")),(0,o.yg)("h4",{id:"definici\xf3n-del-atributo-gen\xe9rico"},"Definici\xf3n del Atributo Gen\xe9rico"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"\npublic class ValidarTipo<T> : Attribute\n{\n    public string Mensaje { get; }\n\n    public ValidarTipo(string mensaje)\n    {\n        Mensaje = mensaje;\n    }\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este ejemplo:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Se define un atributo gen\xe9rico ValidarTipo","<","T>, que puede aceptar cualquier tipo T."),(0,o.yg)("li",{parentName:"ul"},"El atributo tambi\xe9n tiene un constructor que acepta un mensaje de error o validaci\xf3n.")))))),(0,o.yg)("h4",{id:"uso-del-atributo-gen\xe9rico"},"Uso del Atributo Gen\xe9rico"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ahora puedes usar este atributo en diferentes tipos de clases o m\xe9todos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},' [ValidarTipo<int>("El valor debe ser un entero v\xe1lido.")]\npublic class ClaseEntero\n{\n    // C\xf3digo de la clase\n}\n\n[ValidarTipo<string>("El valor debe ser una cadena de texto v\xe1lida.")]\npublic class ClaseString\n{\n    // C\xf3digo de la clase\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este caso, el mismo atributo ValidarTipo","<","T> se aplica a diferentes clases, pero con diferentes tipos gen\xe9ricos (int y string)."),(0,o.yg)("li",{parentName:"ul"},"Cada clase tiene un mensaje de validaci\xf3n personalizado basado en el tipo."),(0,o.yg)("li",{parentName:"ul"},"Al aplicar ValidarTipo","<","T>, hay algunas restricciones como, por ejemplo:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"No puedes usar un tipo gen\xe9rico como par\xe1metro en otro tipo gen\xe9rico:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"No puedes definir un atributo gen\xe9rico con otro tipo gen\xe9rico como argumento. Por ejemplo, no es v\xe1lido tener ValidarTipo","<","T> donde T tambi\xe9n sea gen\xe9rico, como ValidarTipo","<","T","<","U>>. C# no permite anidaciones de tipos gen\xe9ricos en los atributos."))),(0,o.yg)("li",{parentName:"ul"},"No puedes usar dynamic como argumento de tipo gen\xe9rico en atributos:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Aunque dynamic es un tipo especial en C#, que permite la evaluaci\xf3n en tiempo de ejecuci\xf3n, no se puede utilizar como un argumento de tipo en un atributo gen\xe9rico. Por ejemplo, ValidarTipo","<","dynamic> no es permitido, ya que los gen\xe9ricos se resuelven en tiempo de compilaci\xf3n y dynamic no tiene un tipo fijo en ese momento."))),(0,o.yg)("li",{parentName:"ul"},"No puedes usar tipos Nullable como argumento de tipo gen\xe9rico en atributos:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"No se pueden utilizar tipos Nullable","<","T> como par\xe1metros gen\xe9ricos en atributos. Esto es una limitaci\xf3n porque los gen\xe9ricos en los atributos deben ser tipos fuertemente tipados, y Nullable","<","T> introduce ambig\xfcedad al permitir null como valor."))),(0,o.yg)("li",{parentName:"ul"},"No puedes usar tuplas (Tuple) como argumento de tipo gen\xe9rico en atributos:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Las tuplas tambi\xe9n est\xe1n excluidas de ser usadas como tipos gen\xe9ricos en atributos. Por ejemplo, no puedes tener algo como ValidarTipo<(int, string)>, ya que las tuplas est\xe1n dise\xf1adas para ser m\xe1s flexibles y de uso en tiempo de ejecuci\xf3n, lo cual no es compatible con las reglas estrictas de los atributos gen\xe9ricos."))))),(0,o.yg)("li",{parentName:"ul"},"Estas limitaciones se deben al hecho de que los atributos son metadatos que deben ser conocidos y fijos antes de ejecutar el programa. Los tipos como dynamic, Nullable","<","T>, y tuplas a\xf1aden un nivel de flexibilidad que no es adecuado para los atributos ya que reci\xe9n se resuelve su tipo en tiempo de ejecuci\xf3n. Los atributos no son evaluados en tiempo de ejecuci\xf3n, por lo que el compilador necesita conocer el tipo exacto de los argumentos que reciben.")))),(0,o.yg)("h2",{id:"null-parameter-checking-todavia-no-se-admite"},"Null Parameter Checking (Todavia no se admite)"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'El "Null Parameter Checking" o verificaci\xf3n de par\xe1metros nulos fue introducido en C# 11. Esta caracter\xedstica permite que el compilador verifique autom\xe1ticamente si los par\xe1metros de un m\xe9todo son null, sin que el desarrollador tenga que escribir expl\xedcitamente las validaciones en el cuerpo del m\xe9todo.')),(0,o.yg)("h4",{id:"c\xf3mo-funciona"},"\xbfC\xf3mo funciona?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Al colocar el operador ",(0,o.yg)("inlineCode",{parentName:"li"},"!!")," despu\xe9s del nombre del par\xe1metro en la declaraci\xf3n del m\xe9todo, C# generar\xe1 autom\xe1ticamente una excepci\xf3n si ese par\xe1metro recibe un valor null. Es una forma m\xe1s concisa de evitar la validaci\xf3n manual."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public void MiMetodo(string nombre!!)\n{\n    Console.WriteLine(nombre);\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este ejemplo, si nombre es null al llamar a MiMetodo, el compilador generar\xe1 autom\xe1ticamente una excepci\xf3n ArgumentNullException, sin que tengas que escribirlo expl\xedcitamente.")))),(0,o.yg)("h4",{id:"qu\xe9-ocurre-en-tiempo-de-ejecuci\xf3n"},"\xbfQu\xe9 ocurre en tiempo de ejecuci\xf3n?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Si un par\xe1metro marcado con ",(0,o.yg)("inlineCode",{parentName:"li"},"!!")," es null, se lanzar\xe1 una excepci\xf3n ArgumentNullException en tiempo de ejecuci\xf3n. Esto asegura que los m\xe9todos no reciban valores null inadvertidamente.")),(0,o.yg)("h4",{id:"comparaci\xf3n-con-m\xe9todos-tradicionales"},"Comparaci\xf3n con m\xe9todos tradicionales"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Anteriormente, tendr\xedas que realizar una comprobaci\xf3n manual:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public void MiMetodo(string nombre)\n{\n    if (nombre == null)\n    {\n        throw new ArgumentNullException(nameof(nombre));\n    }\n    Console.WriteLine(nombre);\n}\n\n")),(0,o.yg)("h4",{id:"consideraciones"},"Consideraciones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Esta caracter\xedstica es \xfatil para asegurar que los par\xe1metros no sean null sin la necesidad de validaciones adicionales."),(0,o.yg)("li",{parentName:"ul"},"No se puede aplicar a tipos de valor, ya que los tipos de valor no pueden ser null (a menos que sean Nullable","<","T>)."),(0,o.yg)("li",{parentName:"ul"},"No confundir con \u201c!\u201d que e usa para marcar un par\xe1metro que se espera que nunca sea null, pero no genera una excepci\xf3n autom\xe1ticamente.")))}m.isMDXComponent=!0}}]);