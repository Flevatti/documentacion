"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[2464],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var i=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,i,r=function(e,a){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var t=i.createContext({}),c=function(e){var a=i.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=c(e.components);return i.createElement(t.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},p=i.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,t=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,g=u["".concat(t,".").concat(p)]||u[p]||m[p]||o;return n?i.createElement(g,s(s({ref:a},d),{},{components:n})):i.createElement(g,s({ref:a},d))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var t in a)hasOwnProperty.call(a,t)&&(l[t]=a[t]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7015:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(8168),r=(n(6540),n(5680));const o={sidebar_position:11},s='Conceptos de "C#" - Parte 6',l={unversionedId:"C--/guiaC6",id:"C--/guiaC6",title:'Conceptos de "C#" - Parte 6',description:'" - Parte 6',source:"@site/docs/C--/guiaC6.md",sourceDirName:"C--",slug:"/C--/guiaC6",permalink:"/documentacion/docs/C--/guiaC6",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/guiaC6.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"C",previous:{title:'Conceptos de "C#" - Parte 5',permalink:"/documentacion/docs/C--/guiaC5"},next:{title:"API con .NET Core",permalink:"/documentacion/docs/C--/API"}},t={},c=[{value:"Palabra clave virtual",id:"palabra-clave-virtual",level:2},{value:"\xbfPor qu\xe9 usar virtual?",id:"por-qu\xe9-usar-virtual",level:4},{value:"C\xf3mo funciona virtual",id:"c\xf3mo-funciona-virtual",level:4},{value:"Minimal API",id:"minimal-api",level:2},{value:"Ventajas de las Minimal APIs",id:"ventajas-de-las-minimal-apis",level:4},{value:"Diferencias con los Controladores",id:"diferencias-con-los-controladores",level:4},{value:"Ejemplo de Minimal API",id:"ejemplo-de-minimal-api",level:4},{value:"Subconjuntos/rangos",id:"subconjuntosrangos",level:2},{value:"Caracter\xedsticas Clave de los Rangos y Subconjuntos",id:"caracter\xedsticas-clave-de-los-rangos-y-subconjuntos",level:4},{value:"C\xf3mo Trabajar con Rangos e \xcdndices",id:"c\xf3mo-trabajar-con-rangos-e-\xedndices",level:4},{value:"Uso de \xcdndices desde el Final",id:"uso-de-\xedndices-desde-el-final",level:4},{value:"Combinar \xcdndices y Rangos",id:"combinar-\xedndices-y-rangos",level:4},{value:"Desestructuraci\xf3n",id:"desestructuraci\xf3n",level:2},{value:"\xbfC\xf3mo Funciona la Desestructuraci\xf3n?",id:"c\xf3mo-funciona-la-desestructuraci\xf3n",level:4},{value:"Desestructuraci\xf3n de Tuplas",id:"desestructuraci\xf3n-de-tuplas",level:4},{value:"Desestructuraci\xf3n en Records",id:"desestructuraci\xf3n-en-records",level:4},{value:"Desestructuraci\xf3n con Clases Personalizadas",id:"desestructuraci\xf3n-con-clases-personalizadas",level:4}],d={toc:c},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.yg)(u,(0,i.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"conceptos-de-c---parte-6"},'Conceptos de "C#" - Parte 6'),(0,r.yg)("h2",{id:"palabra-clave-virtual"},"Palabra clave virtual"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"La palabra clave virtual en C# se utiliza para permitir que un m\xe9todo, propiedad, \xedndice o evento en una clase base pueda ser anulado (sobrescrito) en una clase derivada. Esto es parte del mecanismo de polimorfismo en la programaci\xf3n orientada a objetos y permite que una clase derivada proporcione una implementaci\xf3n espec\xedfica de un m\xe9todo que ya est\xe1 definido en su clase base.")),(0,r.yg)("h4",{id:"por-qu\xe9-usar-virtual"},"\xbfPor qu\xe9 usar virtual?"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Flexibilidad: Permite que las clases derivadas personalicen el comportamiento de los m\xe9todos de la clase base. Esto es especialmente \xfatil cuando deseas que las subclases se comporten de manera diferente sin cambiar la implementaci\xf3n de la clase base."),(0,r.yg)("li",{parentName:"ul"},"Polimorfismo: La palabra clave virtual es esencial para el polimorfismo, ya que permite que se invoquen m\xe9todos de las clases derivadas a trav\xe9s de referencias de la clase base.")),(0,r.yg)("h4",{id:"c\xf3mo-funciona-virtual"},"C\xf3mo funciona virtual"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Cuando declaras un m\xe9todo como virtual en una clase base, cualquier clase que herede de esa clase puede anular (sobrescribir) ese m\xe9todo usando la palabra clave override. Esto significa que puedes cambiar el comportamiento del m\xe9todo en la clase derivada."),(0,r.yg)("li",{parentName:"ul"},"Aqu\xed hay un ejemplo que ilustra c\xf3mo se utiliza la palabra clave virtual:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Animal\n{\n    public virtual void HacerSonido()\n    {\n        Console.WriteLine("El animal hace un sonido.");\n    }\n}\n\npublic class Perro : Animal\n{\n    public override void HacerSonido()\n    {\n        Console.WriteLine("El perro ladra.");\n    }\n}\n\npublic class Gato : Animal\n{\n    public override void HacerSonido()\n    {\n        Console.WriteLine("El gato maulla.");\n    }\n}\n\nclass Programa\n{\n    static void Main()\n    {\n        Animal miAnimal;\n\n        miAnimal = new Perro();\n        miAnimal.HacerSonido(); // Imprime "El perro ladra."\n\n        miAnimal = new Gato();\n        miAnimal.HacerSonido(); // Imprime "El gato maulla."\n    }\n}\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Detalles del ejemplo")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Clase Base: La clase Animal tiene un m\xe9todo HacerSonido() marcado como virtual. Esto significa que cualquier clase que herede de Animal puede anular(sobrescribir) este m\xe9todo."),(0,r.yg)("li",{parentName:"ul"},"Clases Derivadas: Las clases Perro y Gato heredan de Animal y anulan (sobrescriben) el m\xe9todo HacerSonido() con la palabra clave override, proporcionando su propia implementaci\xf3n."),(0,r.yg)("li",{parentName:"ul"},"Uso en el Programa Principal: En el m\xe9todo Main, se declara una variable de tipo Animal, pero se le asignan instancias de Perro y Gato. Cuando se llama a HacerSonido(), se invoca la implementaci\xf3n correcta del m\xe9todo en funci\xf3n del tipo real del objeto (Perro o Gato), demostrando el concepto de polimorfismo.")))),(0,r.yg)("h2",{id:"minimal-api"},"Minimal API"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Las Minimal APIs en C# son una forma simplificada de construir APIs utilizando ASP.NET Core. Se introdujeron en .NET 6 y permiten crear aplicaciones HTTP de manera m\xe1s ligera y menos estructurada que el enfoque tradicional basado en controladores. "),(0,r.yg)("li",{parentName:"ul"},"Las Minimal APIs permiten construir aplicaciones HTTP sin la necesidad de crear un controlador y una clase de configuraci\xf3n separada. En su lugar, puedes definir endpoints de manera directa en el archivo de inicio de tu aplicaci\xf3n, lo que resulta en menos c\xf3digo y una sintaxis m\xe1s concisa.")),(0,r.yg)("h4",{id:"ventajas-de-las-minimal-apis"},"Ventajas de las Minimal APIs"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Simplicidad: Permiten un enfoque m\xe1s directo para definir rutas y manejadores de solicitudes sin la sobrecarga de los controladores."),(0,r.yg)("li",{parentName:"ol"},"Menos C\xf3digo: Reducen la cantidad de c\xf3digo necesario para crear una API, lo que puede ser especialmente \xfatil para prototipos o aplicaciones peque\xf1as."),(0,r.yg)("li",{parentName:"ol"},"Desarrollo R\xe1pido: Facilitan un desarrollo m\xe1s r\xe1pido al eliminar la necesidad de la estructura tradicional de controladores.")),(0,r.yg)("h4",{id:"diferencias-con-los-controladores"},"Diferencias con los Controladores"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Aspecto"),(0,r.yg)("th",{parentName:"tr",align:null},"Controladores"),(0,r.yg)("th",{parentName:"tr",align:null},"Minimal APIs"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Estructura"),(0,r.yg)("td",{parentName:"tr",align:null},"Requiere clases de controlador."),(0,r.yg)("td",{parentName:"tr",align:null},"Directamente en el archivo de inicio.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"C\xf3digo"),(0,r.yg)("td",{parentName:"tr",align:null},"M\xe1s c\xf3digo, ya que cada acci\xf3n es un m\xe9todo en un controlador."),(0,r.yg)("td",{parentName:"tr",align:null},"Menos c\xf3digo, usando una sintaxis m\xe1s directa.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Uso"),(0,r.yg)("td",{parentName:"tr",align:null},"Ideal para aplicaciones m\xe1s grandes y complejas."),(0,r.yg)("td",{parentName:"tr",align:null},"Ideal para aplicaciones peque\xf1as o prototipos.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Configuraci\xf3n"),(0,r.yg)("td",{parentName:"tr",align:null},"Necesita un archivo de configuraci\xf3n m\xe1s elaborado."),(0,r.yg)("td",{parentName:"tr",align:null},"Configuraci\xf3n sencilla y directa.")))),(0,r.yg)("h4",{id:"ejemplo-de-minimal-api"},"Ejemplo de Minimal API"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Agregar servicios al contenedor, si es necesario\nbuilder.Services.AddEndpointsApiExplorer();\n\nvar app = builder.Build();\n\n// Definici\xf3n de un endpoint\napp.MapGet("/saludo", () => "\xa1Hola, mundo!");\n\napp.MapGet("/persona/{nombre}", (string nombre) => \n{\n    return $"\xa1Hola, {nombre}!";\n});\n\napp.Run();\n\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n del ejemplo")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ol",{parentName:"div"},(0,r.yg)("li",{parentName:"ol"},"Configuraci\xf3n del Servidor: Se inicia creando un WebApplicationBuilder y configurando los servicios. Aqu\xed puedes a\xf1adir servicios si es necesario, aunque para este ejemplo no se necesitan."),(0,r.yg)("li",{parentName:"ol"},"Creaci\xf3n de la Aplicaci\xf3n: Se crea la instancia de la aplicaci\xf3n web con builder.Build()."),(0,r.yg)("li",{parentName:"ol"},"Definici\xf3n de Endpoints:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},'app.MapGet("/saludo", () => "\xa1Hola, mundo!"); define un endpoint que responde a solicitudes GET en la ruta /saludo y devuelve un saludo simple.'),(0,r.yg)("li",{parentName:"ul"},'app.MapGet("/persona/{nombre}", (string nombre) => ...) define un segundo endpoint que toma un par\xe1metro en la URL (nombre) y devuelve un saludo personalizado.'))),(0,r.yg)("li",{parentName:"ol"},"Ejecutar la Aplicaci\xf3n: Finalmente, app.Run(); inicia el servidor web."),(0,r.yg)("li",{parentName:"ol"},"Para ejecutar esta Minimal API, necesitar\xe1s un entorno de desarrollo de ASP.NET Core. Al iniciar la aplicaci\xf3n y hacer una solicitud GET a http://localhost:","<",'puerto>/saludo, recibir\xe1s la respuesta "\xa1Hola, mundo!". Si accedes a http://localhost:',"<",'puerto>/persona/Ana, obtendr\xe1s "\xa1Hola, Ana!".')))),(0,r.yg)("h2",{id:"subconjuntosrangos"},"Subconjuntos/rangos"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"En C#, los subconjuntos o rangos (subranges) son una caracter\xedstica que permite trabajar con partes de una colecci\xf3n (como arrays o listas) de manera m\xe1s sencilla y expresiva. Esta funcionalidad se introdujo en C# 8.0 y ofrece una manera compacta de seleccionar una porci\xf3n de una secuencia de elementos usando un \xedndice de inicio y un \xedndice de final.")),(0,r.yg)("h4",{id:"caracter\xedsticas-clave-de-los-rangos-y-subconjuntos"},"Caracter\xedsticas Clave de los Rangos y Subconjuntos"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Rangos: Los rangos permiten seleccionar un subconjunto de una colecci\xf3n usando la sintaxis de \u201c..\u201d para definir el rango de \xedndices. Por ejemplo, 1..4 selecciona los elementos desde el \xedndice 1 hasta el \xedndice 3 (el final es exclusivo)."),(0,r.yg)("li",{parentName:"ol"},"\xcdndices: Los \xedndices en C# ahora tienen una nueva funcionalidad llamada Index. Con la sintaxis de ^, puedes contar los elementos desde el final de la colecci\xf3n. Por ejemplo, ^1 es el \xfaltimo elemento, ^2 es el pen\xfaltimo, y as\xed sucesivamente."),(0,r.yg)("li",{parentName:"ol"},"Sintaxis Limpia: Utilizando rangos e \xedndices, puedes crear subconjuntos de una colecci\xf3n de manera m\xe1s clara y concisa que utilizando bucles o llamadas a m\xe9todos como Array.Copy.")),(0,r.yg)("h4",{id:"c\xf3mo-trabajar-con-rangos-e-\xedndices"},"C\xf3mo Trabajar con Rangos e \xcdndices"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Con la nueva funcionalidad de rangos, puedes crear subconjuntos f\xe1cilmente de arrays o listas utilizando la sintaxis ",(0,r.yg)("inlineCode",{parentName:"li"},".. "),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = { 1, 2, 3, 4, 5, 6 };\n\n// Extraer un subconjunto desde el \xedndice 1 al \xedndice 3 (no inclusivo del \xedndice 4)\nint[] subset = numeros[1..4]; // Resultado: { 2, 3, 4 }\n\nforeach (var num in subset)\n{\n    Console.WriteLine(num);\n}\n\n")),(0,r.yg)("h4",{id:"uso-de-\xedndices-desde-el-final"},"Uso de \xcdndices desde el Final"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"El operador ^ te permite contar \xedndices desde el final de la colecci\xf3n. Esto es \xfatil cuando necesitas acceder a elementos al final de una lista sin conocer su longitud exacta:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"int[] numeros = { 1, 2, 3, 4, 5, 6 };\n\n// Acceder al \xfaltimo elemento\nint ultimo = numeros[^1]; // Resultado: 6\n\n// Acceder al pen\xfaltimo elemento\nint penultimo = numeros[^2]; // Resultado: 5\n\n")),(0,r.yg)("h4",{id:"combinar-\xedndices-y-rangos"},"Combinar \xcdndices y Rangos"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Puedes combinar rangos con \xedndices negativos para obtener subconjuntos que empiecen desde el principio o el final de la colecci\xf3n:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},"\nint[] numeros = { 1, 2, 3, 4, 5, 6 };\n\n// Seleccionar desde el tercer elemento hasta el \xfaltimo\nint[] subsetDesdeElTercero = numeros[2..^0]; // Resultado: { 3, 4, 5, 6 }\n\n// Seleccionar desde el primer elemento hasta el pen\xfaltimo\nint[] subsetSinElUltimo = numeros[0..^1]; // Resultado: { 1, 2, 3, 4, 5 }\n\n")),(0,r.yg)("h2",{id:"desestructuraci\xf3n"},"Desestructuraci\xf3n"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"La desestructuraci\xf3n en C# es una caracter\xedstica que permite descomponer (o desestructurar) una instancia de un objeto o una tupla en variables individuales, de manera que puedes acceder a las propiedades o valores de forma m\xe1s sencilla. Esto es especialmente \xfatil cuando est\xe1s trabajando con objetos complejos o tuplas, ya que te permite acceder r\xe1pidamente a sus valores sin necesidad de referencias expl\xedcitas a las propiedades o \xedndices.")),(0,r.yg)("h4",{id:"c\xf3mo-funciona-la-desestructuraci\xf3n"},"\xbfC\xf3mo Funciona la Desestructuraci\xf3n?"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"En C#, puedes desestructurar:",(0,r.yg)("ol",{parentName:"li"},(0,r.yg)("li",{parentName:"ol"},"Tuplas."),(0,r.yg)("li",{parentName:"ol"},"Objetos personalizados, como records o clases, siempre y cuando implementen un m\xe9todo de desestructuraci\xf3n.")))),(0,r.yg)("h4",{id:"desestructuraci\xf3n-de-tuplas"},"Desestructuraci\xf3n de Tuplas"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Una de las formas m\xe1s comunes de desestructuraci\xf3n es con tuplas. Las tuplas son colecciones de valores agrupados, y puedes descomponerlas en variables individuales de forma muy sencilla:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'// Crear una tupla con tres elementos\n(string nombre, int edad, string ciudad) persona = ("Juan", 30, "Madrid");\n\n// Desestructuraci\xf3n de la tupla\nvar (nombre, edad, ciudad) = persona;\n\n// Ahora tenemos tres variables individuales\nConsole.WriteLine($"Nombre: {nombre}, Edad: {edad}, Ciudad: {ciudad}");\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ol",{parentName:"div"},(0,r.yg)("li",{parentName:"ol"},'Tupla: Se define una tupla con los valores "Juan", 30, y "Madrid".'),(0,r.yg)("li",{parentName:"ol"},"Desestructuraci\xf3n: Con la l\xednea var (nombre, edad, ciudad) = persona;, descomponemos la tupla en tres variables: nombre, edad, y ciudad."),(0,r.yg)("li",{parentName:"ol"},"Uso: Ahora puedes usar estas variables de manera individual.")))),(0,r.yg)("h4",{id:"desestructuraci\xf3n-en-records"},"Desestructuraci\xf3n en Records"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Otra forma de desestructuraci\xf3n en C# es cuando trabajas con records, que son tipos de objetos inmutables introducidos en C# 9.0. Los records proporcionan una funcionalidad integrada para la desestructuraci\xf3n:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'public record Persona(string Nombre, int Edad, string Ciudad);\n\nvar persona = new Persona("Ana", 25, "Barcelona");\n\n// Desestructurar el record en variables individuales\nvar (nombre, edad, ciudad) = persona;\n\nConsole.WriteLine($"Nombre: {nombre}, Edad: {edad}, Ciudad: {ciudad}");\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ol",{parentName:"div"},(0,r.yg)("li",{parentName:"ol"},"Record: Se define el record Persona con tres propiedades: Nombre, Edad, y Ciudad."),(0,r.yg)("li",{parentName:"ol"},"Desestructuraci\xf3n: Al utilizar var (nombre, edad, ciudad) = persona;, descomponemos el record persona en variables individuales, como si estuvi\xe9ramos trabajando con una tupla."),(0,r.yg)("li",{parentName:"ol"},"Uso: Las variables nombre, edad, y ciudad ahora contienen los valores de la instancia del record.")))),(0,r.yg)("h4",{id:"desestructuraci\xf3n-con-clases-personalizadas"},"Desestructuraci\xf3n con Clases Personalizadas"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Puedes habilitar la desestructuraci\xf3n en tus propias clases implementando un m\xe9todo llamado Deconstruct. Este m\xe9todo se encarga de descomponer la instancia en varios componentes. Aqu\xed tienes un ejemplo:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Punto\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Punto(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    // M\xe9todo Deconstruct\n    public void Deconstruct(out int x, out int y)\n    {\n        x = X;\n        y = Y;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var punto = new Punto(5, 10);\n\n        // Desestructurar la instancia de Punto\n        var (x, y) = punto;\n\n        Console.WriteLine($"X: {x}, Y: {y}");\n    }\n}\n\n')),(0,r.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("ul",{parentName:"div"},(0,r.yg)("li",{parentName:"ul"},"Clase Punto: Creamos una clase con dos propiedades: X y Y."),(0,r.yg)("li",{parentName:"ul"},"M\xe9todo Deconstruct: Este m\xe9todo toma dos par\xe1metros out, uno para cada valor que queremos desestructurar. Cuando desestructuramos, este m\xe9todo es invocado impl\xedcitamente para extraer las propiedades."),(0,r.yg)("li",{parentName:"ul"},"Los par\xe1metros del m\xe9todo Deconstruct representan los miembros que quieres extraer (ya sean propiedades o campos) de la clase, y eso es lo que especificas entre par\xe9ntesis cuando realizas la desestructuraci\xf3n. Dentro del m\xe9todo, t\xfa decides qu\xe9 valor se asignar\xe1 a cada uno de esos \u201cmiembros\u201d."),(0,r.yg)("li",{parentName:"ul"},"Al hacer la desestructuraci\xf3n, puedes extraer cualquiera de las variables out que se definieron en el m\xe9todo Deconstruct. Dentro de ese m\xe9todo, se especifica el valor que va a contener cada una de esas variables."),(0,r.yg)("li",{parentName:"ul"},"Cuando se usa la desestructuraci\xf3n, el compilador sabe que tiene que llamar al m\xe9todo Deconstruct para obtener los valores de los miembros de la clase y asignarlos a las variables correspondientes.")))))}m.isMDXComponent=!0}}]);