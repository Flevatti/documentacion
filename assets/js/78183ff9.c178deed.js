"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[5445],{5680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>g});var i=n(6540);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,i,o=function(e,a){if(null==e)return{};var n,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var t=i.createContext({}),c=function(e){var a=i.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},p=function(e){var a=c(e.components);return i.createElement(t.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},u=i.forwardRef((function(e,a){var n=e.components,o=e.mdxType,s=e.originalType,t=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,g=d["".concat(t,".").concat(u)]||d[u]||m[u]||s;return n?i.createElement(g,l(l({ref:a},p),{},{components:n})):i.createElement(g,l({ref:a},p))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=u;var r={};for(var t in a)hasOwnProperty.call(a,t)&&(r[t]=a[t]);r.originalType=e,r[d]="string"==typeof e?e:o,l[1]=r;for(var c=2;c<s;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1955:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=n(8168),o=(n(6540),n(5680));const s={sidebar_position:7},l='Conceptos de "C#" - Parte 2',r={unversionedId:"C--/guiaC2",id:"C--/guiaC2",title:'Conceptos de "C#" - Parte 2',description:'" - Parte 2',source:"@site/docs/C--/guiaC2.md",sourceDirName:"C--",slug:"/C--/guiaC2",permalink:"/documentacion/docs/C--/guiaC2",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/C--/guiaC2.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"C",previous:{title:'Conceptos de "C#"',permalink:"/documentacion/docs/C--/guiaC"},next:{title:'Conceptos de "C#" - Parte 3',permalink:"/documentacion/docs/C--/guiaC3"}},t={},c=[{value:"Action, Func Y Predicate",id:"action-func-y-predicate",level:2},{value:"Func y Action",id:"func-y-action",level:4},{value:"Action",id:"action",level:4},{value:"Func",id:"func",level:4},{value:"\xbfCu\xe1ntos par\xe1metros como m\xe1ximo puede tener un Action&lt;&gt; o Func&lt;&gt;?",id:"cu\xe1ntos-par\xe1metros-como-m\xe1ximo-puede-tener-un-action-o-func",level:4},{value:"Predicate",id:"predicate",level:4},{value:"M\xe9todos an\xf3nimos Y Lambda",id:"m\xe9todos-an\xf3nimos-y-lambda",level:2},{value:"M\xe9todo an\xf3nimo",id:"m\xe9todo-an\xf3nimo",level:4},{value:"Lambda",id:"lambda",level:4},{value:"Ejemplo",id:"ejemplo",level:5},{value:"Otro  ejemplo",id:"otro--ejemplo",level:5},{value:"Dynamic",id:"dynamic",level:2},{value:"Usos",id:"usos",level:4},{value:"Objeto dinamico",id:"objeto-dinamico",level:4},{value:"Expresiones Linq",id:"expresiones-linq",level:2},{value:"\xbfQu\xe9 es LINQ?",id:"qu\xe9-es-linq",level:4},{value:"Select",id:"select",level:4},{value:"Where",id:"where",level:4},{value:"First/Last",id:"firstlast",level:4},{value:"OrderBy",id:"orderby",level:4},{value:"Sum",id:"sum",level:4},{value:"Max/Min",id:"maxmin",level:4},{value:"Average",id:"average",level:4},{value:"All/Any",id:"allany",level:4},{value:"Sintaxis integrada",id:"sintaxis-integrada",level:4},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas",level:4},{value:"Desventajas",id:"desventajas",level:5},{value:"Ventajas",id:"ventajas",level:5},{value:"Resumiendo",id:"resumiendo",level:4},{value:"Tipo an\xf3nimo",id:"tipo-an\xf3nimo",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"Enviar un tipo an\xf3nimo como parametro",id:"enviar-un-tipo-an\xf3nimo-como-parametro",level:4},{value:"Limitaciones",id:"limitaciones",level:4},{value:"Arboles de expresiones",id:"arboles-de-expresiones",level:2},{value:"\xbfY luego?",id:"y-luego",level:4},{value:"Trabajando con la expresi\xf3n",id:"trabajando-con-la-expresi\xf3n",level:4},{value:"Arboles de expresiones",id:"arboles-de-expresiones-1",level:4},{value:"Usos en la vida real",id:"usos-en-la-vida-real",level:4},{value:"Palabra clave &quot;Var&quot;",id:"palabra-clave-var",level:2},{value:"Tipos an\xf3nimos",id:"tipos-an\xf3nimos",level:4},{value:"Foreach",id:"foreach",level:2},{value:"Ejemplo",id:"ejemplo-2",level:4},{value:"M\xe9todos de extensi\xf3n",id:"m\xe9todos-de-extensi\xf3n",level:2},{value:"Ejemplo",id:"ejemplo-3",level:4},{value:"Extendiendo a Persona",id:"extendiendo-a-persona",level:6},{value:"As",id:"as",level:2},{value:"Sintaxis",id:"sintaxis",level:4},{value:"Ejemplo",id:"ejemplo-4",level:4},{value:"Otro ejemplo",id:"otro-ejemplo",level:4},{value:"Reflexi\xf3n",id:"reflexi\xf3n",level:2},{value:"Otros ejemplos",id:"otros-ejemplos",level:4},{value:"Usos de la reflexi\xf3n",id:"usos-de-la-reflexi\xf3n",level:4},{value:"ExpandObject",id:"expandobject",level:2},{value:"Adici\xf3n de propiedades din\xe1micas",id:"adici\xf3n-de-propiedades-din\xe1micas",level:4},{value:"Acceso din\xe1mico a la propiedad",id:"acceso-din\xe1mico-a-la-propiedad",level:4},{value:"Eliminaci\xf3n din\xe1mica de propiedades",id:"eliminaci\xf3n-din\xe1mica-de-propiedades",level:4},{value:"Enumeraci\xf3n din\xe1mica de propiedades",id:"enumeraci\xf3n-din\xe1mica-de-propiedades",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Gen\xe9rico",id:"gen\xe9rico",level:2},{value:"Parametro de tipo gen\xe9rico",id:"parametro-de-tipo-gen\xe9rico",level:4},{value:"Caracter\xedsticas",id:"caracter\xedsticas",level:4},{value:"1- Default values",id:"1--default-values",level:4},{value:"2- Constraints",id:"2--constraints",level:4},{value:"3- Inheritance",id:"3--inheritance",level:4},{value:"4- Static members",id:"4--static-members",level:4},{value:"Ejemplos",id:"ejemplos",level:4},{value:"Interfaces",id:"interfaces",level:5},{value:"M\xe9todos",id:"m\xe9todos",level:5},{value:"Delegados",id:"delegados",level:5},{value:"Is",id:"is",level:2},{value:"Sintaxis",id:"sintaxis-1",level:4},{value:"Ejemplo",id:"ejemplo-5",level:4},{value:"Coincidencia de patrones",id:"coincidencia-de-patrones",level:2},{value:"Patrones",id:"patrones",level:4},{value:"Patr\xf3n constante",id:"patr\xf3n-constante",level:4},{value:"Patr\xf3n de declaraci\xf3n",id:"patr\xf3n-de-declaraci\xf3n",level:4},{value:"Patr\xf3n de propiedad",id:"patr\xf3n-de-propiedad",level:4},{value:"Patr\xf3n var",id:"patr\xf3n-var",level:4},{value:"Patr\xf3n posicional",id:"patr\xf3n-posicional",level:4},{value:"Patr\xf3n de tuplas",id:"patr\xf3n-de-tuplas",level:4},{value:"Patr\xf3n relacional",id:"patr\xf3n-relacional",level:4},{value:"Tipo patr\xf3n",id:"tipo-patr\xf3n",level:4},{value:"Patrones l\xf3gicos",id:"patrones-l\xf3gicos",level:4},{value:"\xbfCu\xe1les son las diferentes formas de hacer coincidir patrones?",id:"cu\xe1les-son-las-diferentes-formas-de-hacer-coincidir-patrones",level:4},{value:"Declaraci\xf3n switch",id:"declaraci\xf3n-switch",level:4},{value:"Expresi\xf3n switch",id:"expresi\xf3n-switch",level:4},{value:"Switch",id:"switch",level:2},{value:"Declaraci\xf3n",id:"declaraci\xf3n",level:4},{value:"Ejemplo",id:"ejemplo-6",level:4},{value:"Podes hacer la misma acci\xf3n en diferentes case",id:"podes-hacer-la-misma-acci\xf3n-en-diferentes-case",level:4},{value:"Expresi\xf3n",id:"expresi\xf3n",level:4},{value:"Ejemplo",id:"ejemplo-7",level:4},{value:"Con declaraci\xf3n",id:"con-declaraci\xf3n",level:5},{value:"Con expresi\xf3n",id:"con-expresi\xf3n",level:5},{value:"Tuplas",id:"tuplas",level:2},{value:"Creando tuplas",id:"creando-tuplas",level:4},{value:"Accediento a los miembros",id:"accediento-a-los-miembros",level:4},{value:"Tuplas de 8 elementos",id:"tuplas-de-8-elementos",level:4},{value:"Ejemplos de usos",id:"ejemplos-de-usos",level:4},{value:"Palabra clave Where",id:"palabra-clave-where",level:2}],p={toc:c},d="wrapper";function m(e){let{components:a,...n}=e;return(0,o.yg)(d,(0,i.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"conceptos-de-c---parte-2"},'Conceptos de "C#" - Parte 2'),(0,o.yg)("h2",{id:"action-func-y-predicate"},"Action, Func Y Predicate"),(0,o.yg)("h4",{id:"func-y-action"},"Func y Action"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los delegados m\xe1s comunes en C# son el delegado Func y el delegado Action."),(0,o.yg)("li",{parentName:"ul"},"Estas herramientas son extremadamente \xfatiles a la hora de reducir c\xf3digo duplicado, pero para aplicarlas con sabidur\xeda debemos comprenderlas."),(0,o.yg)("li",{parentName:"ul"},"Ambos son tipos de referencia que encapsulan un m\xe9todo. "),(0,o.yg)("li",{parentName:"ul"},"Ambos aceptar\xe1n cero o muchos par\xe1metros, y podemos utilizarlos con expresiones lambda o m\xe9todos an\xf3nimos.")),(0,o.yg)("h4",{id:"action"},"Action"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Action","<","T>, es un delegado gen\xe9rico que encapsula un m\xe9todo que posee un solo argumento y no retorna un valor. "),(0,o.yg)("li",{parentName:"ul"},'Analicemos la parte simple de la oraci\xf3n, "un m\xe9todo que tiene un solo argumento y no retorna un valor". Es decir, un m\xe9todo void.'),(0,o.yg)("li",{parentName:"ul"},"Es decir, un Action","<","T> nos permite crear un delegado especificando solo el tipo de dato del argumento."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'delegate void PrintResult(double num);\n\nvoid EjemploMetodo(double num){\n Console.WriteLine("El resultado es:{0}",num);\n}\n\n\nPrintResult operation = EjemploMetodo;\n\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En cambio, con un action, solo necesitas especificar el tipo de dato del argumento:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Action<double> op = EjemploMetodo;\n")),(0,o.yg)("h4",{id:"func"},"Func"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Func, es un delegado que encapsula un m\xe9todo con (o sin) par\xe1metros que devuelve un valor."),(0,o.yg)("li",{parentName:"ul"},"Una Func es muy parecida a una action","<","T>, de hecho, ambos son delegados gen\xe9ricos, la diferencia es que en el caso de la Func","<","T>, esta devuelve un valor."),(0,o.yg)("li",{parentName:"ul"},"Ve\xe1moslo en un ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Calculator\n{\n    public int Add(int a, int b) => a + b;\n    public int Subtract(int a, int b) => a - b;\n    public int Multiply(int a, int b) => a * b;\n    public int Divide(int a, int b) => a / b;\n}\n\nvar FuncCalculator = new Calculator();\n\nFunc<int, int, int> add = FuncCalculator.Add;\nFunc<int, int, int> subtract = FuncCalculator.Subtract;\nFunc<int, int, int> multiply = FuncCalculator.Multiply;\nFunc<int, int, int> divide = FuncCalculator.Divide;\n\nConsole.WriteLine($"Addition result: {add(4, 2)}");\nConsole.WriteLine($"Subtraction result: {subtract(4, 2)}");\nConsole.WriteLine($"Multiplication result: {multiply(4, 2)}");\nConsole.WriteLine($"Division result: {divide(4, 2)}");\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"El ultimo tipo de dato que especificamos ser\xe1 el tipo de dato que devuelve la funci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Si solo hay un tipo de dato, es porque no hay par\xe1metros y solo se especifica el tipo de dato que se devuelve.")))),(0,o.yg)("h4",{id:"cu\xe1ntos-par\xe1metros-como-m\xe1ximo-puede-tener-un-action-o-func"},"\xbfCu\xe1ntos par\xe1metros como m\xe1ximo puede tener un Action","<","> o Func","<",">?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Es posible incluir tantos par\xe1metros como necesitemos."),(0,o.yg)("li",{parentName:"ul"},"Por ejemplo, si quisi\xe9ramos guardar la referencia de un m\xe9todo que recibe dos par\xe1metros, una cadena y una fecha, pero no devuelve ning\xfan valor, nuestro delegado seria as\xed por ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Action<string,DateTime> metodo = (x,y) => Console.WriteLine(x);\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Sin embargo, si quisi\xe9ramos guardar la referencia a una operaci\xf3n aritm\xe9tica:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Func<int,int,double> operacion = (x,y) => return x/y;\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Como puedes ver, en el caso del delegado Func","<",">, el ultimo tipo de dato que especificamos ser\xe1 el tipo de dato de retorno de la funci\xf3n y el resto ser\xe1n los tipos de datos de los par\xe1metros."))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.somostechies.com/entendiendo-los-delegados-func-action/"},"Entendiendo los delegados Func","<","> y Action","<",">")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.action-1?view=net-7.0"},"Action","<","T> Delegate")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.func-2?view=net-7.0"},"Func","<","T,TResult> Delegate")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.tutorialsteacher.com/csharp/csharp-action-delegate"},"C# - Action Delegate")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.freecodecamp.org/news/action-and-func-delegates-in-c-sharp/"},"Action and Func Delegates in C# \u2013 Explained with Examples"))))),(0,o.yg)("h4",{id:"predicate"},"Predicate"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un predicado es un delegado que acepta uno o m\xe1s par\xe1metros gen\xe9ricos y devuelve un valor booleano."),(0,o.yg)("li",{parentName:"ul"},"Los delegados de predicado se utilizan normalmente para realizar operaciones de b\xfasqueda basadas en un conjunto de criterios."),(0,o.yg)("li",{parentName:"ul"},"Esta es la sintaxis de un delegado de predicado:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Predicate<T>\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Tenga en cuenta que Predicate","<","T> es b\xe1sicamente equivalente a Func","<","T,bool>."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'class PredicateExample {\n  \n    public static bool fun(string mystring)\n    {\n        if (mystring.Length < 7)\n        {\n            return true;\n        }\n        else \n        {\n            return false;\n        }\n    }\n  \n    static public void Main()\n    {\n        Predicate<string> val = fun;\n        Console.WriteLine(val("This is an Example"));\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.infoworld.com/article/3057152/how-to-work-with-action-func-and-predicate-delegates-in-c-sharp.html"},"How to work with Action, Func, and Predicate delegates in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.dotnetperls.com/predicate"},"Predicate")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://bytespider.eu/como-trabajar-con-delegados-action-func-y-predicate-en-c/"},"C\xf3mo trabajar con delegados Action, Func y Predicate en C#.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates"},"Variance in Delegates (C#)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.codingninjas.com/studio/library/c-predicate-delegate"},"C# Predicate Delegate")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.predicate-1?view=net-7.0"},"Predicate","<","T> Delegate"))))),(0,o.yg)("h2",{id:"m\xe9todos-an\xf3nimos-y-lambda"},"M\xe9todos an\xf3nimos Y Lambda"),(0,o.yg)("h4",{id:"m\xe9todo-an\xf3nimo"},"M\xe9todo an\xf3nimo"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un m\xe9todo an\xf3nimo es un m\xe9todo, el cual carece de un nombre."),(0,o.yg)("li",{parentName:"ul"},"Lo que contiene es el cuerpo del m\xe9todo que es lo que ejecutaremos. "),(0,o.yg)("li",{parentName:"ul"},"De hecho, un m\xe9todo an\xf3nimo nos ofrece la posibilidad de pasar un bloque de c\xf3digo a un delegado."),(0,o.yg)("li",{parentName:"ul"},"Para lograr todo esto, declararemos el delegado y su firma, y posteriormente indicaremos el c\xf3digo del mismo."),(0,o.yg)("li",{parentName:"ul"},"Tambi\xe9n debemos tener en cuenta que no tenemos por qu\xe9 especificar el tipo de dato que devolver\xe1, ya que ser\xe1 inferido dentro del cuerpo del m\xe9todo que lancemos."),(0,o.yg)("li",{parentName:"ul"},"A continuaci\xf3n, la sintaxis correcta para crear un m\xe9todo an\xf3nimo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"delegate([par\xe1metros de entrada]){ C\xf3digo; }\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ejemplo con un Predicate:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public void TestPredicate()\n{\n   Predicate<string> predicate = new Predicate<string>(\n                     delegate(string email)\n                     {\n                       string pattern = @"^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$";\n                       return Regex.IsMatch(email, pattern);\n                      });\n\n   var validEmails = emails.FindAll(predicate);\n\n   foreach (var item in validEmails)\n   {\n     Console.WriteLine(item);\n   }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Usamos el constructor de la clase Predicate para crear una instancia de esta."),(0,o.yg)("li",{parentName:"ul"},"En el constructor, especificamos el m\xe9todo an\xf3nimo que contendr\xe1 el predicate."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo an\xf3nimo tiene el argumento email y el bloque de c\xf3digo definido por las llaves (\u201c{}\u201d).")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Puede tener la cantidad de argumentos que quieras."))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Otro ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace AnonymousMethods\n{\n\n    public class Program\n    {\n\n        private delegate double Mathematical(double value);\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine("Started");\n            Console.WriteLine();\n\n            Mathematical doublePower = delegate (double value) { return Math.Pow(value, 2); };\n            Mathematical halfValue = delegate (double value) { return value / 2; };\n\n            Console.WriteLine(doublePower(3));\n            Console.WriteLine(halfValue(3));\n\n            Console.WriteLine();\n            Console.WriteLine("Press any key to close");\n            Console.ReadKey();\n        }\n\n    }\n\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Si observamos este ejemplo, veremos que hemos declarado un delegado (Mathematical), y hemos declarado dos m\xe9todos dentro de Main que utilizan el mismo delegado, realiza dos c\xe1lculos diferentes. Uno el valor elevado a 2, y otro el valor dividido por 2, obteniendo 9 y 1.5."))),(0,o.yg)("h4",{id:"lambda"},"Lambda"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una expresi\xf3n lambda es una funci\xf3n o m\xe9todo an\xf3nimo con el que podemos crear  delegados y \xe1rboles de expresiones."),(0,o.yg)("li",{parentName:"ul"},"Las expresiones lambda suelen usarse para crear expresiones LINQ."),(0,o.yg)("li",{parentName:"ul"},"Como caracter\xedsticas generales a la hora de utilizar y crear expresiones lambda, hay que tener en cuenta que debemos indicar los par\xe1metros de entrada."),(0,o.yg)("li",{parentName:"ul"},"Las expresiones lambda nos permiten utilizar una sintaxis concisa y m\xe1s corta para escribir m\xe9todos an\xf3nimos."),(0,o.yg)("li",{parentName:"ul"},"A continuaci\xf3n la sintaxis correcta para escribir una expresi\xf3n lambda:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"() => expression;\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Los par\xe9ntesis vac\xedos representan la lista de argumentos del m\xe9todo an\xf3nimo (en este caso no tiene argumentos ya que esta vac\xeda)."),(0,o.yg)("li",{parentName:"ul"},"\u201c=>\u201d Indica que se trata de una expresi\xf3n lambda."),(0,o.yg)("li",{parentName:"ul"},"En este caso la expresi\xf3n lambda es de una sola instrucci\xf3n.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Si el m\xe9todo necesita m\xe1s de una instrucci\xf3n se deben agregar \u201c{} \u201cde la siguiente manera:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"() => \n{\n  // Instrucci\xf3n 1;\n  // Instrucci\xf3n 2;\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Pasar par\xe1metros de entrada a un m\xe9todo an\xf3nimo con sintaxis de expresi\xf3n lambda es sumamente sencillo, debemos agregar los argumentos dentro de los par\xe9ntesis de la expresi\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Cuando es un solo argumento podemos omitir los par\xe9ntesis y escribir \xfanicamente el nombre del \xfanico argumento."),(0,o.yg)("li",{parentName:"ul"},"Otro punto importante es el tipo de los argumentos, podemos agregarlos o dejar que la caracter\xedstica de inferencia de tipos de C# haga el trabajo.")))),(0,o.yg)("h5",{id:"ejemplo"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'// Pasando un solo par\xe1metro\nAction<string> action1 = (nombre) => Console.WriteLine($"Hola {nombre}");\n\n// Pasando un solo par\xe1metro sin los par\xe9ntesis\nAction<string> action2 = nombre => Console.WriteLine($"Hola {nombre}");\n\n// Pasando dos par\xe1metros sin especificar el tipo\nAction<int, int> action3 = (a, b) => Console.WriteLine(a + b);\n\n// Pasando dos par\xe1metros especificando el tipo\nAction<int, int> action4 = (int a, int b) => Console.WriteLine(a + b);\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Mejores Pr\xe1cticas")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Incluir los par\xe9ntesis, aunque solo necesitemos un par\xe1metro de entrada para una expresi\xf3n lambda es una buena pr\xe1ctica ya que hace m\xe1s legible el c\xf3digo. Naturalmente las expresiones lambda ya son bastante confusas por lo que muchos desarrolladores las incluyen, aunque no sean necesarias."))),(0,o.yg)("h5",{id:"otro--ejemplo"},"Otro  ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace AnonymousMethods\n{\n\n    public class Program\n    {\n\n        private delegate double Mathematical(double value);\n\n        public static void Main(string[] args)\n        {\n            Console.WriteLine("Started");\n            Console.WriteLine();\n\n            Mathematical doublePower = (double value) => { return Math.Pow(value, 2); };\n            Mathematical halfValue = (double value) => { return value / 2; };\n\n            Console.WriteLine(doublePower(3));\n            Console.WriteLine(halfValue(3));\n\n            Console.WriteLine();\n            Console.WriteLine("Press any key to close");\n            Console.ReadKey();\n        }\n\n    }\n\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"No obstante, las expresiones lambda de este ejemplo, tambi\xe9n podr\xedan ser sustituidas por estas otras:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"Mathematical doublePower = value => Math.Pow(value, 2);\nMathematical halfValue = value => value / 2;\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},(0,o.yg)("a",{parentName:"p",href:"https://flevatti.github.io/documentacion/docs/Javascript/basico-2#arrow-functions"},"B\xe1sicamente son parecidas a las funciones flechas de Javascript.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://geeks.ms/jorge/2017/09/21/metodos-anonimos-y-expresiones-lambda-en-c/#:~:text=Un%20m%C3%A9todo%20an%C3%B3nimo%20es%20un,como%20un%20par%C3%A1metro%20de%20delegado"},"M\xe9todos an\xf3nimos y expresiones lambda en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://dev.to/ebarrioscode/pildoras-de-c-delegates-metodos-anonimos-expresiones-lambda-y-eventos-3ah8"},"P\xedldoras de C#: Delegates, M\xe9todos An\xf3nimos, Expresiones Lambda y Eventos")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.w3big.com/es/csharp/csharp-anonymous-methods.html#gsc.tab=0"},"C # m\xe9todo an\xf3nimo"))))),(0,o.yg)("h2",{id:"dynamic"},"Dynamic"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"C# o .net implementa un tipo de dato llamado Dynamic el cual, como su propio nombre indica nos permite asignarle un valor de forma din\xe1mica. "),(0,o.yg)("li",{parentName:"ul"},"Como sabemos, cuando creamos una variable debemos indicar el tipo de variable que va a ser, o podemos utilizar la palabra clave \u201cvar\u201d, la cual se convertir\xe1 en tiempo de compilaci\xf3n en el tipo de variable - la cual denominamos variable impl\xedcita."),(0,o.yg)("li",{parentName:"ul"},"En el caso de las variables din\xe1micas, en vez de determinar su valor en tiempo de compilaci\xf3n se determina durante el tiempo de ejecuci\xf3n, o runtime. ")),(0,o.yg)("h4",{id:"usos"},"Usos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Para declarar una variable din\xe1mica es tan f\xe1cil como indicar la palabra clave dynamic, el nombre de la variable y su asignaci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"dynamic variableTest = 1;\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Del mismo modo, podemos asignarle un string o cualquier otro tipo de dato a una variable de tipo dynamic, como podemos observar.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"dynamic variableTest = 1;\nvariableTest = \u201ctest\u201d;\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Cuando el compilador pasa por la variable lo que hace es convertir ese tipo de dato en Object en la gran mayor\xeda de los casos. "),(0,o.yg)("li",{parentName:"ul"},"Lo que quiere decir que cada vez que le asignamos un valor, cambiar\xe1 tambi\xe9n el tipo de variable(clase) que utiliza el objeto, podemos verlo utilizando la siguiente l\xednea de c\xf3digo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"dynamicVariable.GetType().ToString();\n")),(0,o.yg)("h4",{id:"objeto-dinamico"},"Objeto dinamico"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La palabra clave Dynamic se puede usar para un objeto an\xf3nimo.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'dynamic user = new\n{\n    Name = "John Doe",\n    Age = 42\n};\nConsole.WriteLine(user.Name + " is " + user.Age + " years old");\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Esto le permite crear un objeto sin definir primero una clase para \xe9l. "),(0,o.yg)("li",{parentName:"ul"},"La palabra clave dynamic se puede utilizar para contenerla, pero tambi\xe9n la palabra clave var , que podr\xeda ser m\xe1s adecuada en muchas situaciones.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Con dynamic, puedes agregarle propiedades m\xe1s adelante, de esta manera:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'\ndynamic user = new\n{\n    Name = "John Doe",\n    Age = 42\n};\nuser.HomeTown = "New York";\n\n')),(0,o.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Como no se realiza ninguna comprobaci\xf3n en tiempo de compilaci\xf3n en un tipo de dato dynamic, este c\xf3digo realmente se ejecuta, porque el compilador no valida la existencia de la propiedad HomeTown, pero tan pronto como se alcanza la \xfaltima l\xednea, te lanzar\xe1 una excepci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Un tipo din\xe1mico ES muy din\xe1mico, pero no le permite agregar din\xe1micamente nuevas propiedades. Para eso, puede usar un ExpandObject.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/dynamic-type-csharp"},"Tipo din\xe1mico en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/405/tipos-de-datos-/el-tipo-dinamico/"},"El tipo din\xe1mico")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/dynamic-type-in-c-sharp/"},"Dynamic Type in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interop/using-type-dynamic"},"https://www.geeksforgeeks.org/dynamic-type-in-c-sharp/"))))),(0,o.yg)("h2",{id:"expresiones-linq"},"Expresiones Linq"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como programadores, es muy habitual tener que trabajar sobre colecciones de datos por un motivo u otro, seleccionar datos, agruparlos, sumarlos ..."),(0,o.yg)("li",{parentName:"ul"},"Una manera muy socorrida de trabajar con este tipo de dato es recorrer la colecci\xf3n. De hecho, es la soluci\xf3n para la gran mayor\xeda de los lenguajes y la que mejor rendimiento nos ofrece."),(0,o.yg)("li",{parentName:"ul"},"Suponiendo que tenemos una lista de enteros, si queremos sumarlos podr\xedamos hacer algo as\xed:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var valores = new List<int> {1,2,3,4,5,6,7,8,9};\nvar suma = 0;\nforeach (var valor in valores)\n{\n    suma += valor;\n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"O si por ejemplo, queremos buscar los n\xfameros que sean pares:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var valores = new List<int> {1,2,3,4,5,6,7,8,9};\nvar pares = new List<int>();\nforeach (var valor in valores)\n{\n    if (valor % 2 == 0)\n    {\n        pares.Add(valor);\n    }\n}\n\n")),(0,o.yg)("h4",{id:"qu\xe9-es-linq"},"\xbfQu\xe9 es LINQ?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Dicho de manera sencilla, LINQ (Language Integrated Query) es un conjunto de extensiones integradas en el lenguaje C#, que nos permite trabajar de manera c\xf3moda y r\xe1pida con colecciones de datos, como si de una base de datos se tratase. Es decir, podemos llevar a cabo inserciones, selecciones y borrados, as\xed como operaciones sobre sus elementos."),(0,o.yg)("li",{parentName:"ul"},'Todas estas operaciones las vamos a conseguir muy f\xe1cilmente gracias a los m\xe9todos de extensi\xf3n para colecciones que nos ofrece el espacio de nombres "System.Linq" y a las expresiones lambda. Sin ir m\xe1s lejos, los dos ejemplos anteriores se podr\xedan hacer as\xed:')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var valores = new List<int> {1,2,3,4,5,6,7,8,9};\nvar suma = valores.Sum();\nvar pares = valores.Where(x => x % 2 == 0).ToList();\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Seguramente te hayas fijado en el ToList() del segundo caso. Esto es porque LINQ siempre nos va a devolver un objeto de tipo IEnumerable","<","T>, el cual debemos iterar. "),(0,o.yg)("li",{parentName:"ul"},"Hasta que no lo iteremos, la consulta no se ha ejecutado todav\xeda, y solo tenemos una expresi\xf3n sobre una colecci\xf3n, por eso invocamos ToList() para forzar la ejecuci\xf3n de la consulta.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Usaremos este ejemplo para explicar las operaciones que se puede hacer con LINQ:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public class Alumno\n{\n    public string Nombre { get; set; }\n\n    public int Nota { get; set; }\n}\nvar alumnos = new List<Alumno>\n{\n    new Alumno {Nombre = "Pedro",Nota = 5},\n    new Alumno {Nombre = "Jorge",Nota = 8},\n    new Alumno {Nombre = "Andres",Nota = 3}\n};\n\n')),(0,o.yg)("h4",{id:"select"},"Select"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Nos va a permitir hacer una selecci\xf3n sobre la colecci\xf3n de datos, ya sea seleccion\xe1ndolos todos, solo una parte o transform\xe1ndolos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var nombresAlumnos = alumnos.Select(x => x.Nombre).ToList();\n")),(0,o.yg)("h4",{id:"where"},"Where"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Nos permite seleccionar una colecci\xf3n que cumpla las condiciones especificadas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var alumnosAprobados = alumnos.Where(x => x.Nota >= 5).ToList();\n")),(0,o.yg)("h4",{id:"firstlast"},"First/Last"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Esta extensi\xf3n nos va a permitir obtener respectivamente el primer y el \xfaltimo objeto de la colecci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Esto es especialmente \xfatil si la colecci\xf3n est\xe1 ordenada:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var primero = alumnos.First();\nvar ultimo = alumnos.Last();\n\n")),(0,o.yg)("h4",{id:"orderby"},"OrderBy"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Gracias a este m\xe9todo, vamos a poder ordenar la colecci\xf3n en base a un criterio de ordenaci\xf3n que le indicamos mediante una expresi\xf3n lambda. "),(0,o.yg)("li",{parentName:"ul"},"An\xe1logamente, tambi\xe9n existe OrderByDescending, el cual va a ordenar la colecci\xf3n de manera inversa seg\xfan el criterio:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var ordenadoMenorAMayor = alumnos.OrderBy(x => x.Nota).ToList();\nvar ordenadoMayorAMenos = alumnos.OrderByDescending(x => x.Nota).ToList();\n\n")),(0,o.yg)("h4",{id:"sum"},"Sum"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como hemos visto m\xe1s arriba, nos va a permitir sumar la colecci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var sumaNotas = alumnos.Sum(x => x.Nota);\n")),(0,o.yg)("h4",{id:"maxmin"},"Max/Min"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Gracias a esta extensi\xf3n, vamos a poder obtener los valores m\xe1ximo y m\xednimo de la colecci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var notaMaxima = alumnos.Max(x => x.Nota);\nvar notaMinima = alumnos.Min(x => x.Nota);\n\n")),(0,o.yg)("h4",{id:"average"},"Average"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Este m\xe9todo nos va a devolver la media aritm\xe9tica de los valores (num\xe9ricos) de los elementos que le indiquemos de la colecci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var media = alumnos.Average(x => x.Nota);\n")),(0,o.yg)("h4",{id:"allany"},"All/Any"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Con este \xfaltimo operador, vamos a poder comprobar si todos o alguno de los valores de la colecci\xf3n cumplen el criterio que le indiquemos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var todosAprobados = alumnos.All(x => x.Nota >= 5);\nvar algunAprobado = alumnos.Any(x => x.Nota >= 5);\n\n")),(0,o.yg)("h4",{id:"sintaxis-integrada"},"Sintaxis integrada"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Aunque en los ejemplos anteriores hemos visto el uso directo de los m\xe9todos de extensi\xf3n, otra de las grandes ventajas que tiene LINQ es que permite crear expresiones directamente en el c\xf3digo, de manera similar a si escribi\xe9semos SQL directamente en C#. Por ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var resultado = from alumno in alumnos\n                where alumno.Nota >= 5\n                orderby alumno.Nota\n                select alumno;\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Nos devolver\xe1 la lista de alumnos que tienen una nota superior a o igual a 5, ordenados por nota ascendentemente.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"SQL")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"S\xed est\xe1 familiarizado con SQL, habr\xe1 observado que el orden de las cl\xe1usulas se invierte respecto al orden de SQL. "),(0,o.yg)("li",{parentName:"ul"},"La cl\xe1usula from especifica que \u201cvariable\u201d va a contener cada \u201cfila(elemento)\u201d de la colecci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"La cl\xe1usula in especifica el origen de datos (la colecci\xf3n), la cl\xe1usula where aplica el filtro y la cl\xe1usula select especifica que datos queremos obtener de la colecci\xf3n (es como un getter).")))),(0,o.yg)("h4",{id:"ventajas-y-desventajas"},"Ventajas y Desventajas"),(0,o.yg)("h5",{id:"desventajas"},"Desventajas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La principal y \xfanica desventaja que tiene, es que es un poco m\xe1s lenta que si utiliz\xe1semos bucles for o foreach para iterar la colecci\xf3n y hacer la operaci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Por supuesto esto no es apreciable en pr\xe1cticamente ninguna situaci\xf3n convencional, pero en entornos donde cada milisegundo cuenta, debes conocer que tiene un impacto.")),(0,o.yg)("h5",{id:"ventajas"},"Ventajas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Por otro lado, las ventajas que nos aporta LINQ son principalmente que el c\xf3digo es m\xe1s legible, ya que utiliza una sintaxis muy declarativa de lo que est\xe1 haciendo, y sobre todo, nos ofrece una manera unificada de acceder a datos, sean el tipo que sean, y tengan el origen que tengan. Por ejemplo, podemos utilizar LINQ para trabajar con bases de datos, con XML, con Excel, con objetos en memoria, \xa1y hasta con Twitter!")),(0,o.yg)("h4",{id:"resumiendo"},"Resumiendo"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Pese a que en esta secci\xf3n solo hemos hecho una peque\xf1a introducci\xf3n con un resumen reducido de las extensiones m\xe1s frecuentes que nos aporta LINQ (cr\xe9eme que muy peque\xf1o... te recomiendo mirar el espacio de nombres y ver todas sus opciones), es una herramienta muy potente. Tanto, que otros lenguajes la han implementado tambi\xe9n.")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/introduccion-rapida-a-linq-con-c-sharp.aspx"},"Introducci\xf3n r\xe1pida a LINQ con C#: manejar informaci\xf3n en memoria nunca fue tan sencillo")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/linq/query-expression-basics"},"Conceptos b\xe1sicos de las expresiones de consultas")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/programming-guide/concepts/linq/introduction-to-linq-queries"},"Introducci\xf3n a las consultas LINQ (C#)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/linq/write-linq-queries"},"Escribir consultas LINQ en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/linq/"},"Language-Integrated Query (LINQ)"))))),(0,o.yg)("h2",{id:"tipo-an\xf3nimo"},"Tipo an\xf3nimo"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un tipo an\xf3nimo es una clase que no tiene nombre, lo cual quiere decir que no tenemos esa clase como tal en el c\xf3digo. "),(0,o.yg)("li",{parentName:"ul"},"La gran mayor\xeda de las veces, utilizaremos tipos an\xf3nimos cuando realizamos queries. Pero tambi\xe9n podemos utilizarlos fuera de las queries, para crear un tipo an\xf3nimo."),(0,o.yg)("li",{parentName:"ul"},"Un tipo an\xf3nimo se inicializa usando el operador new, en combinaci\xf3n con un inicializador de objetos - en ese sentido, es muy parecido a instanciar una clase, s\xf3lo que se omite el nombre de la clase.")),(0,o.yg)("h4",{id:"ejemplo-1"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var equipo = new { Nombre = "Real Betis", Ligas = 1 };\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Como podemos observar el objeto que hemos creado es un objeto llamado equipo el cual tiene dos propiedades, Nombre y Ligas."),(0,o.yg)("li",{parentName:"ul"},"Cuando asignamos un valor a estas propiedades, el compilador autom\xe1ticamente detecta el tipo que van a ser bas\xe1ndose en el valor que asignamos a la propiedad. En este caso nombre ser\xe1 un string y Ligas ser\xe1 un int.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Posteriormente si queremos acceder a sus propiedades \xfanicamente debemos escribir el nombre de la variable y su propiedad utilizando el punto:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"string nombreEquipo = Equipo.Nombre;\n")),(0,o.yg)("h4",{id:"enviar-un-tipo-an\xf3nimo-como-parametro"},"Enviar un tipo an\xf3nimo como parametro"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los tipos an\xf3nimos no tienen tipo como tal, por lo que, para enviarlo a un m\xe9todo, debemos utilizar en ese m\xe9todo el tipo dynamic pero nos puede dar muchos errores en tiempo de ejecuci\xf3n, ya que el compilador no comprueba que el tipo que pasemos sea el correcto. "),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public void test(dynamic equipo)\n{\n    var t = equipo.Nombre;\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Enviar tipos an\xf3nimos como par\xe1metro no es una buena pr\xe1ctica que se deba hacer. ")))),(0,o.yg)("h4",{id:"limitaciones"},"Limitaciones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Hay varias limitaciones que debe tener en cuenta cuando considere la posibilidad de utilizar un tipo an\xf3nimo en lugar de definir una clase:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"A diferencia de una clase real, un tipo an\xf3nimo no puede tener campos o m\xe9todos - s\xf3lo propiedades."),(0,o.yg)("li",{parentName:"ul"},"Una vez que el objeto ha sido inicializado, no puedes a\xf1adirle nuevas propiedades."),(0,o.yg)("li",{parentName:"ul"},"Las propiedades son de s\xf3lo lectura - tan pronto como el objeto se ha inicializado, no se pueden cambiar sus valores.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Pero dicho esto, los tipos an\xf3nimos siguen siendo extremadamente pr\xe1cticos para muchas tareas. Un escenario de uso com\xfan es cuando se tiene un objeto complejo (de una clase definida) y se necesita simplificarlo, por ejemplo, porque que tengas que mantener el objeto lo m\xe1s peque\xf1o posible para enviarlo a un navegador o tal vez porque el objeto completo tiene informaci\xf3n sensible que no se quiere exponer al consumidor. Los tipos an\xf3nimos son excelentes para esto, como se ilustra en el siguiente ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.IO;\n\nnamespace AnonymousTypes\n{\n    class Program\n    {\n    static void Main(string[] args)\n    {\n        string pathOfExe = System.Reflection.Assembly.GetEntryAssembly().Location;\n        FileInfo fileInfo = new FileInfo(pathOfExe);\n        var simpleFileInfo = new\n        {\n        Filename = fileInfo.Name,\n        FileSize = fileInfo.Length\n        };\n        Console.WriteLine("File name: " + simpleFileInfo.Filename + ". Size: " + simpleFileInfo.FileSize + " bytes");\n    }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"La primera l\xednea simplemente nos dar\xe1 el nombre del archivo que se est\xe1 ejecutando actualmente, es decir, nuestra propia aplicaci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Lo usamos para crear una instancia de la clase FileInfo, que luego contendr\xe1 MUCHA informaci\xf3n sobre este archivo espec\xedfico. "),(0,o.yg)("li",{parentName:"ul"},"No queremos toda esa informaci\xf3n, as\xed que creamos una versi\xf3n simplificada de la misma con un tipo an\xf3nimo, usando la informaci\xf3n de la instancia original de FileInfo. "),(0,o.yg)("li",{parentName:"ul"},"En la \xfaltima l\xednea, usamos esta informaci\xf3n para obtener una salida b\xe1sica.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Probablemente han notado que damos un nombre a cada una de las propiedades definidas en nuestro tipo an\xf3nimo (Filename and FileSize) - eso tiene bastante sentido, ya que queremos acceder a ellas m\xe1s tarde."),(0,o.yg)("li",{parentName:"ul"},"Sin embargo, cuando basamos nuestro objeto en informaci\xf3n de un objeto existente, podemos dejar de lado nuestro propio nombre y dejar que el compilador utilice el nombre de la propiedad que le asignamos, as\xed:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var simpleFileInfo = new\n{\n    fileInfo.Name,\n    fileInfo.Length\n};\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Ahora, tenemos dos propiedades llamadas Name y Length, en lugar de Filename y FileSize. Una muy buena conveniencia, si no te importan los nombres o tal vez m\xe1s probable: Si realmente prefieres los mismos nombres que el objeto original."))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/tipos-anonimos-csharp"},"Tipos an\xf3nimos en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types"},"Anonymous types")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/410/tipos-de-datos-/tipos-anonimos-/"},"Tipos An\xf3nimos")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://thatcsharpguy.com/post/tipos-anonimos-en-c"},"Tipos an\xf3nimos en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/visualstudio/ide/reference/convert-anonymous-type-to-class?view=vs-2022"},"Conversi\xf3n de un tipo an\xf3nimo en clase"))))),(0,o.yg)("h2",{id:"arboles-de-expresiones"},"Arboles de expresiones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El tipo de dato ",(0,o.yg)("strong",{parentName:"li"},"Expression")," no es un tipo de dato convencional, no es algo que le mostrar\xe1s al usuario final de tu app en la pantalla. M\xe1s bien es un tipo de dato dise\xf1ado para ser usado por otros desarrolladores. "),(0,o.yg)("li",{parentName:"ul"},"Este tipo de dato fue introducido junto con LINQ en .NET 3.5. Seguramente tu mismo lo has usado sin darte cuenta, el lugar m\xe1s com\xfan para encontrarlo es como par\xe1metro del m\xe9todo de extensi\xf3n Where de cualquier colecci\xf3n que implementa la interfaz IQueryable:")),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://thatcsharpguy.github.io/postimages//aprende-c-sharp/expressions/inwhere.jpg",alt:"Expression"})),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\xbfNo es una expresi\xf3n lambda?")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"\u201c\xa1Pero si eso es una expresi\xf3n lambda!\u201d podr\xedas decirme\u2026 y tendr\xedas toda la raz\xf3n, sin embargo, existe una conversi\xf3n impl\xedcita entre Expression","<","TipoDeDelegate> y una expresi\xf3n lambda, que es lo que generalmente vemos nosotros como desarrolladores."))),(0,o.yg)("h4",{id:"y-luego"},"\xbfY luego?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Las expresiones permiten inspeccionar el c\xf3digo que forma determinada expresi\xf3n lambda. Por ejemplo, de la imagen anterior podr\xedamos saber que la expresi\xf3n lambda recibe un par\xe1metro llamado a que es del tipo entero, que se realiza una operaci\xf3n y que se compara contra cero el resultado. Todo esto sin necesidad de compilar el c\xf3digo ni nada por el estilo.")),(0,o.yg)("h4",{id:"trabajando-con-la-expresi\xf3n"},"Trabajando con la expresi\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los tipos Expression fueron creados con la intenci\xf3n de ser usados con delegados, as\xed que para comenzar a usarlos es necesario especificar qu\xe9 tipo de delegado est\xe1 esperando la expresi\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Por ahora nosotros vamos a crear un m\xe9todo que inspeccione una expresi\xf3n lambda que recibe un entero como argumento y devuelve un valor booleano:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'void Inspecciona(Expression<Func<int, bool>> expression)\n{\n    Console.WriteLine("== Examinando \\"" + expression + "\\" ==");\n    Console.WriteLine("Expresi\xf3n: " + expression.NodeType);\n    var binaryExpression = expression.Body as BinaryExpression;\n    if(binaryExpression != null)\n    {\n        Console.WriteLine("La expresi\xf3n es " + binaryExpression.NodeType);                  \n        Console.WriteLine("Sus componentes son:");\n        Console.WriteLine("\\tLeft: " + binaryExpression.Left + \n                          " (" +binaryExpression.Left.NodeType  +")");\n        Console.WriteLine("\\tRight: " + binaryExpression.Right +\n                          " (" + binaryExpression.Right.NodeType + ")");\n        return;\n    }\n    var constantExpression = expression.Body as ConstantExpression;\n    if(constantExpression != null)\n    {\n        Console.WriteLine("El cuerpo de la expresi\xf3n es constante");\n        Console.WriteLine("\\tValor: " + constantExpression.Value);\n        return;\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Lo s\xe9, en el c\xf3digo de arriba ocurren muchas cosas, vamos a ver las m\xe1s importantes:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"La expresi\xf3n  Expression<","<","Func","<","int, bool>>  en el argumento del m\xe9todo indica que el m\xe9todo recibe una expresi\xf3n que envuelva a una expresi\xf3n lambda con la firma Func<int, bool>"),(0,o.yg)("li",{parentName:"ul"},"Con la propiedad NodeType podemos conocer con qu\xe9 tipo de expresi\xf3n estamos trabajando. Esta propiedad est\xe1 disponible para cualquier tipo de Expression"),(0,o.yg)("li",{parentName:"ul"},"La propiedad Body nos permite acceder al cuerpo de una expresi\xf3n lambda. Y a su vez, Body es tambi\xe9n una expresi\xf3n, es por eso que primero intento convertirla en una BinaryExpression y luego en una ConstantExpression. Existe una gran lista de tipos de expresiones con los que puedes trabajar."),(0,o.yg)("li",{parentName:"ul"},"Ahora, despu\xe9s de saber si nuestra expresi\xf3n es de determinado tipo, se puede acceder a las propiedades de ese tipo en espec\xedfico. Por ejemplo, las expresiones binarias tienen dos propiedades Left y Right que almacenan referencias a las expresiones que la forman, mientras que una expresi\xf3n constante tiene la propiedad Value que almacena su verdadero valor.")))))),(0,o.yg)("h4",{id:"arboles-de-expresiones-1"},"Arboles de expresiones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En este punto es cuando surgen los \xe1rboles de expresiones, si te das cuenta, podemos ir formando un \xe1rbol a partir de una expresi\xf3n lambda, para tratar de demostrar este punto, mira los siguientes ejemplos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Inspecciona((a) => true);\n// Resultado:\n//== Examinando "a => True" ==\n//Expresi\xf3n: Lambda\n//El cuerpo de la expresi\xf3n es constante\n//  Valor: True\n\n')),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://thatcsharpguy.github.io/postimages//aprende-c-sharp/expressions/constant.png",alt:"Ejemplo 1"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Inspecciona((a) => a % 2 == 0);\n// Resultado:\n//== Examinando "a => ((a % 2) == 0)" ==\n//Expresi\xf3n: Lambda\n//La expresi\xf3n es Equal\n//Sus componentes son:\n//  Left: (a % 2) (Modulo)\n//  Right: 0 (Constant)\n\n\n')),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://thatcsharpguy.github.io/postimages//aprende-c-sharp/expressions/binarysimple.png",alt:"Ejemplo 2"})),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Inspecciona((a) => a % 5 == 0 && Math.Pow(a, 2) % 3 == 0);\n// Resultado:\n//== Examinando "a => (((a % 5) == 0) AndAlso ((Pow(Convert(a, Double), 2) % 3) == 0))" ==\n//Expresi\xf3n: Lambda\n//La expresi\xf3n es AndAlso\n//Sus componentes son:\n//  Left: ((a % 5) == 0) (Equal)\n//  Right: ((Pow(Convert(a, Double), 2) % 3) == 0) (Equal)\n\n\n')),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://thatcsharpguy.github.io/postimages//aprende-c-sharp/expressions/binarycomplex.png",alt:"Ejemplo 3"})),(0,o.yg)("h4",{id:"usos-en-la-vida-real"},"Usos en la vida real"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"S\xed, ya s\xe9 que tal vez no vayas por la vida escribiendo m\xe9todos que inspeccionen expresiones lambda. Pero tan solo es necesario que te pongas a pensar que gracias a los \xe1rboles de expresiones existen cosas como LINQ to SQL, Entity Framework, LinqToTwitter, entre otros."),(0,o.yg)("li",{parentName:"ul"},"Lo que hacen estas librer\xedas es tomar tu c\xf3digo C# en forma de expresiones, inspeccionarlo y \u201ctraducirlo\u201d a SQL para hacer que tus consultas sean lo m\xe1s eficientes posible aprovechando el poder de la base de datos. En el caso de LinqToTwitter sucede algo similar, solo que la \u201ctraducci\xf3n\u201d transforma tu c\xf3digo C# en una URL lista para ser consumida."),(0,o.yg)("li",{parentName:"ul"},"En cierto sentido podr\xedas ver a una Expression","<","TipoDeDelegate> como un bloque de c\xf3digo no compilado del que podemos obtener informaci\xf3n acerca de c\xf3mo se comporta en tiempo de ejecuci\xf3n. Algo parecido a lo que se puede lograr con la reflexi\xf3n pero con la certidumbre de que el c\xf3digo con el que est\xe1s trabajando, es v\xe1lido.")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://thatcsharpguy.github.io/post/expression-trees-c-sharp/"},"\xc1rboles de expresiones en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.elguille.info/net/futuro/firmas_octavio_ArbolesExpresiones.htm"},"Los \xe1rboles de expresiones en C# 3.0")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/advanced-topics/expression-trees/expression-trees-building"},"Creaci\xf3n de \xe1rboles de expresi\xf3n"))))),(0,o.yg)("h2",{id:"palabra-clave-var"},'Palabra clave "Var"'),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"A partir de la versi\xf3n 3.0 de C #, puede usar la palabra clave var, en lugar de declarar expl\xedcitamente el tipo de la variable."),(0,o.yg)("li",{parentName:"ul"},"La palabra clave var permite declarar una variable local (dentro de un m\xe9todo, un bucle, etc) sin indicar expl\xedcitamente el tipo de dato."),(0,o.yg)("li",{parentName:"ul"},"La inicializaci\xf3n de la variable le indicara a C# qu\xe9 tipo de dato es la variable."),(0,o.yg)("li",{parentName:"ul"},"Esto solo es posible dentro de un m\xe9todo, no a nivel de clase, donde siempre se debe especificar el tipo. Veamos c\xf3mo se ve cuando usa la palabra clave var:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'int age = 42; \n\nvar name = "John Doe"; \n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Dos variables - la primera es declarada con el tipo int, mientras que la segunda es declarada con la palabra clave var, en vez de especificarla como string. "),(0,o.yg)("li",{parentName:"ul"},"Observe que en ambos casos se asigna un valor:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Esto no es requerido cuando se declara un tipo espec\xedfico."),(0,o.yg)("li",{parentName:"ul"},"Es requerido cuando se usa la palabra clave var.  La raz\xf3n es que el compilador de C# deducir\xe1 el tipo de dato, mirando lo que est\xe1 tratando de asignar a la variable durante la compilaci\xf3n y luego cambia la palabra clave var al tipo apropiado.")))))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"No hay gastos generales cuando se usa la palabra clave var - es tan r\xe1pido durante el tiempo de ejecuci\xf3n como una variable declarada expl\xedcitamente, porque eso es esencialmente lo que es cuando .NET Framework ejecuta su c\xf3digo."))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una vez que el compilador identifica el tipo de dato, es fijo e inmutable.  Por ejemplo, no puedes asignar un n\xfamero entero a la variable message que  es de tipo  String:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var message = "Hola";\nmessage = 100; // error\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"C# solo permite usar la palabra clave var con una variable que incluye una inicializaci\xf3n. Lo siguiente resultar\xe1 en un error:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var amount;\n")),(0,o.yg)("h4",{id:"tipos-an\xf3nimos"},"Tipos an\xf3nimos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Hasta ahora, los ejemplos que hemos visto con la palabra clave var son agradables de tener y m\xe1s cortos de escribir, pero no son realmente un requisito. Sin embargo, cuando se trabaja con tipos an\xf3nimos, tiene sentido declarar sus objetos con la palabra clave var:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var myObj = new\n{\n    Name = "John Doe",\n    Age = 42\n};\nConsole.WriteLine(myObj.Name);\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables"},"Implicitly typed local variables (C# Programming Guide)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://estradawebgroup.com/Post/-Que-tipo-de-variable-es-var-en-C--y-cuando-usar-/20548#:~:text=Introducci%C3%B3n%20a%20la%20palabra%20clave%20var%20de%20C%23&text=La%20palabra%20clave%20var%20permite,parte%20derecha%20de%20la%20declaraci%C3%B3n"},"Introducci\xf3n a la palabra clave var de C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables"},"Implicitly typed local variables (C# Programming Guide)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/402/tipos-de-datos-/variables-de-tipo-implicito-la-palabra-clave-var/"},"Variables de tipo Impl\xedcito (la palabra clave var)"))))),(0,o.yg)("h2",{id:"foreach"},"Foreach"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El foreach es una herramienta utilizada mayoritariamente para recuperar la informaci\xf3n que contiene las colecciones, arrays o listas, es decir objetos que pueden contener m\xe1s de un valor almacenado, veamos su sintaxis:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"foreach(tipoDato nombre in array/coleccion/lista/etc)\n{\n... instrucciones ...\n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Primero definiremos una variable con un tipo de dato que debe coincidir con el tipo de dato que vamos a recuperar (obtener), por ejemplo, si el array fuera de tipo int la variable debe ser de tipo int, si tuvieramos una lista deberiamos respetar el tipo que le asignamos a la lista, por ejemplo si fuera de tipo string, es decir:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<string> milista;\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Cuando usemos el foreach deber\xeda ser de la siguiente manera:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"foreach(string elemento in milista) { \n... instrucciones ... \n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Su uso es bien simple, un poco menos complejo que en for pero m\xe1s limitado ya que solo se usa para recuperar elementos de una colecci\xf3n.")),(0,o.yg)("h4",{id:"ejemplo-2"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string[] cars = {"Volvo", "BMW", "Ford", "Mazda"};\nforeach (string i in cars) \n{\n  Console.WriteLine(i);\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.w3schools.com/cs/cs_foreach_loop.php"},"C# Foreach Loop")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://tinchicus.com/2020/09/16/c-foreach/"},"C# / foreach"))))),(0,o.yg)("h2",{id:"m\xe9todos-de-extensi\xf3n"},"M\xe9todos de extensi\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un m\xe9todo extensor es una forma de \u201ca\xf1adirle (extender)\u201c m\xe9todos a una clase sin necesidad de hacerlo en la original o en alguna instancia/copia de la misma. No es un reemplazo de la t\xe9cnica formal por medio de herencia, si no una peque\xf1a \u201ctrampa\u201d que nos permite obtener un resultado muy similar."),(0,o.yg)("li",{parentName:"ul"},"Son m\xe9todos est\xe1ticos, pero se les llama como un m\xe9todo de instancia."),(0,o.yg)("li",{parentName:"ul"},"Los m\xe9todos de extensi\xf3n deben definirse en una clase est\xe1tica no gen\xe9rica y estos m\xe9todos deben de ser est\xe1ticos. El primer argumento especifica en que clase funciona el m\xe9todo, y el argumento debe estar precedido del modificador this. Nuestro m\xe9todo de extensi\xf3n no debe coincidir en nombre ni en firma con los m\xe9todos de la propia clase que estamos extendiendo."),(0,o.yg)("li",{parentName:"ul"},"A la hora de definirlos, los m\xe9todos de extensi\xf3n tienen el mismo aspecto que los m\xe9todos est\xe1ticos, con la diferencia de que su primer argumento lleva antepuesta la palabra clave this (que en este contexto no tiene nada que ver con el this que habitualmente utilizamos para tomar una referencia a la instancia actual)."),(0,o.yg)("li",{parentName:"ul"},"A la hora de llamar al m\xe9todo, no escribimos ese par\xe1metro. En su lugar, el compilador toma la instancia del objeto sobre la que estamos llamando al m\xe9todo. ")),(0,o.yg)("h4",{id:"ejemplo-3"},"Ejemplo"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Creamos la Clase Persona:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Persona\n {\n     public string Nombre { get; set; }\n     public int Edad { get; set; }\n }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ahora creamos una clase de comprobaciones en donde generar\xe9 el m\xe9todo  que se llamar\xe1 esCorrecto, recibiendo como par\xe1metro un objeto del tipo Persona. Como ver\xe1s, la primera validaci\xf3n que debo realizar es que persona no sea un objeto nulo. Para ello hago algo tan simple como retornar si el objeto no es nulo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Comprobaciones\n    {\n        public bool esCorrecto(Persona persona)\n        {\n            return persona != null;\n        }\n    }\n\n")),(0,o.yg)("h6",{id:"extendiendo-a-persona"},"Extendiendo a Persona"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Crearemos una clase est\xe1tica llamada Extensores en donde voy a especificar un m\xe9todo est\xe1tico que tiene la particularidad de extender la clase Persona.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public static class Extensores\n    {\n        public static Boolean IsNotNull(this Persona persona)\n        {\n            return persona != null;\n        }\n    }\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo IsNotNull extiende (le a\xf1ade este m\xe9todo) a la clase Persona (lo indicamos mediante la palabra clave this y el nombre de la clase a extender)"),(0,o.yg)("li",{parentName:"ul"},"Entonces seria: \u201cthis nombreClase nombre\u201d. Con el nombre accedemos a un objeto de nombreClase."),(0,o.yg)("li",{parentName:"ul"},"Todo esto, se ubica como primer argumento."),(0,o.yg)("li",{parentName:"ul"},"Ahora un objeto de la clase Persona, puede llamar a IsNotNull() como si fuera un m\xe9todo de instancia.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"A parte del argumento que extiende, se pueden seguir utilizando los argumentos \u201cnormales\u201d")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Para llamar al m\xe9todo no se necesita especificar el primer par\xe1metro (el que contiene el this)."),(0,o.yg)("li",{parentName:"ul"},"El compilador le asigna la instancia con el cual se llama al m\xe9todo, como valor.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"   public class Comprobaciones\n    {\n        public bool esCorrecto(Persona persona)\n        {\n            return persona.IsNotNull();\n        }\n    }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Pero si lo piensas un poco, el saber si una clase es nula o no me puede venir muy bien en toda la aplicaci\xf3n en donde tendr\xe9 muchos m\xe1s objetos a los que hacer la misma comprobaci\xf3n. O sea que con muy poco esfuerzo puedo extender el propio tipo object y as\xed TODOS mis objetos ser\xe1n capaces de devolverme si son nulos o no. Incluyendo todas las clases, estructuras, enumeradores, etc. Ya que en C# todo hereda de object:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"        public static Boolean IsNotNull(this Object objeto)\n        {\n            return objeto != null;\n        }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"As\xed, con un solo m\xe9todo extensor puedo comprobar si la edad o el nombre son nulos de una forma, no solamente sencilla si no muy legible:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"  public class Comprobaciones\n    {\n        public bool esCorrecto(Persona persona)\n        {\n            return persona.Edad.IsNotNull();\n        }\n    }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Pero vamos a darle una peque\xf1a vuelta de tuerca extendiendo otra vez a la clase Persona para realizar la comprobaci\xf3n de que tiene un nombre v\xe1lido. Como todos sabemos, en la \xfaltima versi\xf3n del framework de .NET podemos hacer dos comprobaciones diferenciadas que nos digan si la cadena de texto es nula, est\xe1 vac\xeda o es un espacio en blanco. Por lo cual si quiero comprobar si el nombre es v\xe1lido debo hacer dos llamadas diferenciadas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"    public class Comprobaciones\n    {\n        public bool esCorrecto(Persona persona)\n        {\n            return string.IsNullOrEmpty(persona.Nombre) == false \n                   && string.IsNullOrWhiteSpace(persona.Nombre);\n        }\n    }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ahora creo este m\xe9todo extensor:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"  public static Boolean NoTieneNombre(this Persona persona)\n        {\n            return string.IsNullOrEmpty(persona.Nombre) \n                   && string.IsNullOrWhiteSpace(persona.Nombre);\n        }\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La legibilidad de mi c\xf3digo aumenta mucho y adem\xe1s tengo encapsulado en un solo sitio la l\xf3gica de comprobaci\xf3n del campo."),(0,o.yg)("li",{parentName:"ul"},"Es m\xe1s, as\xed cumplo a rajatabla el concepto de que mi m\xe9todo no debe saber c\xf3mo se hacen las cosas, solamente esperar la respuesta adecuada; en este caso un valor booleano:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"  public class Comprobaciones\n    {\n        public bool esCorrecto(Persona persona)\n        {\n            return persona.NoTieneNombre();\n        }\n    }\n\n")),(0,o.yg)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Todo m\xe9todo de extensi\xf3n debe ser static y debe estar declarado dentro de una clase static:"))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Se puede extender una clase gen\xe9rica."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo puede ser gen\xe9rico.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.genbeta.com/desarrollo/metodos-de-extension-en-c"},"M\xe9todos de extensi\xf3n en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.tutorialesprogramacionya.com/csharpya/detalleconcepto.php?codigo=220"},"M\xe9todos de extensi\xf3n")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://itblogsogeti.com/2017/07/20/metodos-de-extension-para-c/"},"M\xe9todos de extensi\xf3n para C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/Metodos-de-Extension-en-C.aspx"},"M\xe9todos de Extensi\xf3n en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/extension-methods"},"Extension methods en C#"))))),(0,o.yg)("h2",{id:"as"},"As"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"En muchos casos, los desarrolladores necesitan convertir un Objeto (De una clase) en otro Objeto (De otra clase) y, a veces, pueden obtener InvalidCastException."),(0,o.yg)("li",{parentName:"ul"},"Por lo tanto, para superar este tipo de excepciones, C# proporciona la palabra clave as."),(0,o.yg)("li",{parentName:"ul"},"El operador As en C# se utiliza para convertir un tipo (objeto de clase X) en otro tipo (objeto de otra clase)."),(0,o.yg)("li",{parentName:"ul"},"Este operador devuelve el objeto cuando es compatible con el tipo(clase) dado y devuelve nulo si la conversi\xf3n no es posible en lugar de generar una excepci\xf3n.")),(0,o.yg)("h4",{id:"sintaxis"},"Sintaxis"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Expresi\xf3n(variable/valor) as type(tipo de dato , como una clase , etc).\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Convierte la expresi\xf3n en type si es compatible."),(0,o.yg)("li",{parentName:"ul"},"En caso contrario, devuelve null.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La sintaxis anterior es equivalente al c\xf3digo siguiente. Pero la variable de expresi\xf3n se evaluar\xe1 s\xf3lo una vez:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"expression is type ? (type)expression : (type)null\n")),(0,o.yg)("h4",{id:"ejemplo-4"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Text;\nusing System.Collections.Generic;\n \nclass GFG {\n     \n    \n    public static void Main() {\n         \n        // Una variable con un string\n        string str1 = "GFG";\n         \n        // Una variable con un Object\n        object obj1 = str1;\n         \n        // Convertirmos el Object de la variable obj1 a String\n        string str2 = obj1 as string;\n         \n        // Chequeamos si la conversi\xf3n fue exitosa\n        if(str2 != null)\n        {\n            Console.WriteLine("Successfully Cast");\n        }\n         \n        // Ahora intentamos convertir el obj1 a una List<String>\n        List<string> mylist = obj1 as List<string>;\n         \n        // // Chequeamos si la conversi\xf3n fue exitosa\n        if(mylist != null)\n        {\n            Console.WriteLine("Successfully Cast");\n        }\n        else\n        {\n            Console.WriteLine("Not Successful");\n        }\n         \n    }\n}\n\n')),(0,o.yg)("h4",{id:"otro-ejemplo"},"Otro ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var bessie = new Cow();\nvar bessieAnimal = bessie as Animal;\nConsole.WriteLine(bessieAnimal is not null);\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/c-sharp-as-operator-keyword/"},"C# | as Operator Keyword")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/uploadfile/mahesh/as-operator-in-C-Sharp/"},"As Operator in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.pluralsight.com/guides/csharp-is-as-operators-is-expressions"},"It Is What It Is and As It Is: Using the Is and As Operators in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://code-maze.com/csharp-as-is-operators/"},"As and Is Operators in C#"))))),(0,o.yg)("h2",{id:"reflexi\xf3n"},"Reflexi\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La reflexi\xf3n nos permite acceder a la informaci\xf3n de un tipo (tipo de dato) en tiempo de ejecuci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"En C#, la reflexi\xf3n nos permite inspeccionar y manipular clases, constructores, m\xe9todos y campos en tiempo de ejecuci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Cuando estamos escribiendo el c\xf3digo, somos nosotros quienes tenemos una idea general del sistema: sabemos los tipos de dato de las variables, los m\xe9todos que contienen las clases, los miembros de estas y un sin fin de cosas m\xe1s. Otro elemento que conoce todo de nuestro programa es el compilador, ya que sabe si estamos usando los tipos correctos para llamar a los m\xe9todos o tenemos permiso para acceder a determinado miembro de una clase."),(0,o.yg)("li",{parentName:"ul"},"Sin embargo, una vez que se compila, el programa no tiene idea de los tipos de dato, m\xe9todos y dem\xe1s complejidades del programa, por ejemplo, el siguiente programa no sabe que zero es del tipo string:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var zero = "0";\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"No es sino hasta que empleamos la reflexi\xf3n que el programa tiene acceso a esta informaci\xf3n a trav\xe9s de un tipo Type:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Type type = zero.GetType();\nConsole.WriteLine(type); // System.String\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Con el m\xe9todo GetType() Obtenemos el Type de una instancia o un valor.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Type")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Type es una clase que representa: tipos de clase, tipos de interfaz, tipos de matriz, tipos de datos, tipos de enumeraci\xf3n, par\xe1metros de tipo, etc."),(0,o.yg)("li",{parentName:"ul"},"Esta clase describe tipos de datos. Almacena informaci\xf3n de tipos en una (o varias) variable(s), propiedad(es) o campo(s). La clase Type representa los metadatos del programa (su estructura)."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/api/system.type?view=net-7.0"},"Type Class"))))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Tambi\xe9n se puede acceder al ensamblado al que pertenece el tipo String:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Assembly assembly = type.Assembly;\nConsole.WriteLine(type.Assembly); // mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Y a partir de un ensamblado podemos obtener todos sus tipos con el m\xe9todo GetTypes, en este caso, adem\xe1s de obteneros, tambi\xe9n los estamos filtrando, seleccionando solo aquellos cuyo nombre comience con \u201cInt32\u201d:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'foreach (var ty in assembly.GetTypes()\n    .Where(ty.Name.StartsWith("Int32")))\n{\n    Console.WriteLine(ty);\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\xbfQu\xe9 es un assembly? ")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Pues dicho con palabras sencillas, es la unidad m\xednima que el CLR puede ejecutar. Contiene las los m\xf3dulos, las clases, los tipos\u2026 y lo m\xe1s importante, el manifiesto, que es donde se registran todos los metadatos."))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Otro de las cosas que podemos hacer empleando la reflexi\xf3n, es instanciar tipos de dato a partir de una instancia de Type y la clase Activator:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var int32Type = assembly.GetType("System.Int32");\n\nvar createdInt  = Activator.CreateInstance(int32Type);\nConsole.WriteLine(createdInt); // 0\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Tambi\xe9n podemos obtener todos los atributos de una propiedad. Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var phone = new Smartphone();\nphone.IsLocked = true;\nphone.Carrier = "Entel";\n\nvar t = phone.GetType();\n\nvar carrierProperty = t.GetProperty("Carrier");\n\nforeach (var att in carrierProperty.GetCustomAttributes())\n{\n    Console.WriteLine(att);\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El resultado de ejecutar el c\xf3digo anterior es:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"RequiredAttribute\nValidCarrierAttribute\nDisplayAttribute\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Son los atributos que tiene la propiedad Carrier."))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Con los atributos en C# podemos proveer a los programas de metadatos."),(0,o.yg)("li",{parentName:"ul"},"\xa1Investigue!")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Y si queremos, podemos hacer cosas un poco m\xe1s complejas. Por ejemplo, si deseamos encontrar todas las propiedades que tengan DisplayAttribute podemos buscarlas con Linq:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var propertiesWithDisplayName = from prop in t.GetProperties()\nwhere prop.GetCustomAttributes<DisplayAttribute>().Any()\nselect prop;\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Para luego mostrar los valores de una manera \u201camigable\u201d:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'foreach (var property in propertiesWithDisplayName)\n{\n    var attr = property.GetCustomAttribute<DisplayAttribute>();\n    Console.WriteLine(attr.Name + ": " + property.GetValue(phone));\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ejecutar el c\xf3digo anterior dar\xe1 como resultado:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Compa\xf1\xeda: Entel\nBloqueado: true\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ya para terminar, otra de las posibilidades que nos da la reflexi\xf3n en C# es la de modificar los valores de una variable o propiedad en tiempo de ejecuci\xf3n con solo tener su nombre. "),(0,o.yg)("li",{parentName:"ul"},"Toma en cuenta el c\xf3digo siguiente, en donde se solicita al usuario ingresar el nombre de una propiedad y se busca dicha propiedad en el tipo Smartphone:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine("Escribe el nombre de la propiedad a modificar:");\nvar propertyName = Console.ReadLine();\nvar propertyToModify = phoneType.GetProperty(propertyName);\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Despu\xe9s se verifica que la propiedad exista (el m\xe9todo GetProperty regresa null si no encuentra una propiedad con el nombre indicado) y si existe, solicitamos el nuevo valor para la propiedad:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'if (propertyToModify != null)\n{\n    Console.WriteLine("Escribe el valor:");\n    var value = Console.ReadLine();\n    // Efectuar conversi\xf3n ... \n}\nelse\n{\n    Console.WriteLine("La propiedad " + propertyName + " no existe");\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Para efectuar la conversi\xf3n debemos recurrir, nuevamente, a la reflexi\xf3n. A trav\xe9s del m\xe9todo SetValue y la clase Convert:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"propertyToModify.SetValue(phone, Convert.ChangeType(value, propertyToModify.PropertyType));\n")),(0,o.yg)("h4",{id:"otros-ejemplos"},"Otros ejemplos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un c\xf3digo como este nos permitir\xeda saber la versi\xf3n que estamos ejecutando:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Reflection;\n\nnamespace PostReflexion\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var assembly = Assembly.GetAssembly(typeof(Program));\n            Console.WriteLine($"Versi\xf3n: {assembly.GetName().Version}");\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Obtenemos el assembly de otra forma (a traves de la clase estatica Assembly el metodo GetAssembly recibiendo el nombre del progama)")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Tambi\xe9n podemos obtener todos los tipos (clases, interfaces, enumeraciones\u2026.):")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Reflection;\n\nnamespace PostReflexion\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var assembly = Assembly.GetAssembly(typeof(Program));\n            foreach (var type in assembly.DefinedTypes)\n            {\n                Console.WriteLine(type);\n            }\n        }\n    }\n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Creamos instancia de clases:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var assembly = Assembly.LoadFile("ruta a la librer\xeda");\n            \n//Creamos el objeto de manera din\xe1mica\nvar formDinamico = assembly.CreateInstance("Nombre completo de la clase") as Form;\n\n//Si hemos podido crear la instancia, abrimos el formulario\nformDinamico?.ShowDialog();\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Con un assembly podemos crear una instancia (con el metodo CreateInstance)."),(0,o.yg)("li",{parentName:"ul"},"Con la clase estatica  Assembly podemos crear un assembly y mucho mas!")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Obtenemos informaci\xf3n sobre el Enumerable:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Reflection;\nclass Program\n{\n    static void Main()\n    {\n        // get typeof Enumerable and load it to Type variable t     \n        Type t = typeof(Enumerable);\n\n        // the Type class properties return information about the Enumerable Type \n        Console.WriteLine("Name : {0}", t.Name);\n        Console.WriteLine("Namespace : {0}", t.Namespace);\n        Console.WriteLine("Base Type : {0}", t.BaseType);\n\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Obtenemos el Type de otra forma (Asign\xe1ndole  el nombre del tipo de dato a una variable de tipo Type)")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Obtenemos informaci\xf3n sobre un string:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Reflection;\nclass Program\n{\n    static void Main()\n    {\n        // get typeof String and load it to Type variable t     \n        Type t = typeof(String);\n\n        // the Type class properties return information about the String Type \n        Console.WriteLine("Name : {0}", t.Name);\n        Console.WriteLine("Namespace : {0}", t.Namespace);\n        Console.WriteLine("Base Type : {0}", t.BaseType);\n\n    }\n}\n\n')),(0,o.yg)("h4",{id:"usos-de-la-reflexi\xf3n"},"Usos de la reflexi\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Si tu trabajo es el de ser un desarrollador de aplicaciones para usuario final, tal vez no le veas mucho uso a esta poderosa caracter\xedstica, sin embargo, us\xe1ndola se puede:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Acceder a los metadatos y conocer los atributos de cada uno de los componentes de un programa."),(0,o.yg)("li",{parentName:"ul"},"Instanciar clases en tiempo de ejecuci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Tener acceso a m\xe9todos, propiedades y cualquier otro miembro privado de los tipos de dato.")))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Es importante se\xf1alar que en esta gu\xeda doy apenas una m\xednima introducci\xf3n a lo que se puede hacer, esperando despertar tu inter\xe9s. Tambi\xe9n debes saber que hacer uso de la reflexi\xf3n har\xe1 que un programa se ejecute un poco m\xe1s lento que si no se usara, ya que se realizan operaciones un poco m\xe1s complejas."))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://thatcsharpguy.github.io/post/reflexion-c-sharp-es/"},"Reflexi\xf3n en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.fixedbuffer.com/la-potencia-de-la-reflexion-en-c-parte-2-ensamblados/"},"La potencia de la Reflexi\xf3n en C# (Parte 2: Ensamblados)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.w3big.com/es/csharp/csharp-reflection.html#gsc.tab=0"},"C # reflexi\xf3n (Reflexi\xf3n)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.programiz.com/csharp-programming/reflection"},"C# Reflection")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://stackify.com/what-is-c-reflection/"},"How C# Reflection Works With Code Examples"))))),(0,o.yg)("h2",{id:"expandobject"},"ExpandObject"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"ExpandoObject es una clase en C# que proporciona una forma de crear objetos con propiedades din\xe1micas en tiempo de ejecuci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},'Pertenece al espacio de nombres System.Dynamic. El nombre "ExpandoObject" se deriva de "objeto expandible", lo que indica su capacidad de crecer agregando propiedades y m\xe9todos din\xe1micamente.'),(0,o.yg)("li",{parentName:"ul"},"La clase ExpandoObject implementa las interfaces IDictionary","<","string, object> e ICollection","<","KeyValuePair","<","string, object>>, que le permiten comportarse como un diccionario o una colecci\xf3n de pares clave-valor. Proporciona m\xe9todos para agregar, eliminar y acceder a propiedades de forma din\xe1mica."),(0,o.yg)("li",{parentName:"ul"},"Una vez que haya agregado propiedades al ExpandoObject, podr\xe1 acceder a ellas como si sacara cosas de una bolsa. "),(0,o.yg)("li",{parentName:"ul"},"Puede leer los valores de las propiedades o asignarles nuevos valores. Le brinda la flexibilidad de trabajar con datos que pueden cambiar o tener una estructura desconocida.")),(0,o.yg)("h4",{id:"adici\xf3n-de-propiedades-din\xe1micas"},"Adici\xf3n de propiedades din\xe1micas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puede agregar propiedades a un ExpandoObject din\xe1micamente usando la notaci\xf3n de puntos (expandoObject.PropertyName = valor)."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Dynamic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Creamos un objeto con ExpandoObject\n        dynamic expandoObject = new ExpandoObject();\n\n        // Le a\xf1adimos propiedades\n        expandoObject.Name = "John";\n        expandoObject.Age = 25;\n\n        // A\xf1adimos propiedades con un get personalizado\n        ((IDictionary<string, object>)expandoObject).Add("FullName", "John Doe");\n        ((IDictionary<string, object>)expandoObject).Add("Greeting", new Func<string>(() => $"Hello, {expandoObject.FullName}!"));\n\n        Console.WriteLine(expandoObject.Name);\n        Console.WriteLine(expandoObject.Age);\n        Console.WriteLine(expandoObject.FullName);\n        Console.WriteLine(expandoObject.Greeting());\n    }\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"De la misma forma, podes a\xf1adir m\xe9todos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'employee.SayHello = new Action(() =>\n{\n    Console.WriteLine($"Hello, {expando.FirstName }!");\n});\n\n')),(0,o.yg)("h4",{id:"acceso-din\xe1mico-a-la-propiedad"},"Acceso din\xe1mico a la propiedad"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puede acceder a las propiedades de un ExpandoObject din\xe1micamente utilizando la notaci\xf3n de puntos (expandoObject.PropertyName)."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Dynamic;\n\nclass Program\n{\n    static void Main()\n    {\n        dynamic employee = new ExpandoObject();\n\n        // A\xf1adimos propiedades\n        employee.FirstName = "John";\n        employee.LastName = "Doe";\n        employee.Age = 30;\n\n        // Accedemos a una propedad\n        Console.WriteLine($"Employee: {employee.FirstName} {employee.LastName}");\n        Console.WriteLine($"Age: {employee.Age}");\n\n        // A\xf1adimos una propiedad que contiene un objeto\n        employee.Address = new ExpandoObject();\n        employee.Address.Street = "123 Main St";\n        employee.Address.City = "New York";\n        employee.Address.Country = "USA";\n\n        Console.WriteLine($"Address: {employee.Address.Street}, {employee.Address.City}, {employee.Address.Country}");\n    }\n}\n\n')),(0,o.yg)("h4",{id:"eliminaci\xf3n-din\xe1mica-de-propiedades"},"Eliminaci\xf3n din\xe1mica de propiedades"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puede eliminar din\xe1micamente propiedades de un ExpandoObject utilizando el m\xe9todo Remove de la interfaz IDictionary","<","cadena, objeto>."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Dynamic;\n\nclass Program\n{\n    static void Main()\n    {\n        dynamic expandoObject = new ExpandoObject();\n\n    \n        expandoObject.Name = "John";\n        expandoObject.Age = 25;\n\n        // Borramos una propiedad\n        ((IDictionary<string, object>)expandoObject).Remove("Name");\n\n        Console.WriteLine(((IDictionary<string, object>)expandoObject).ContainsKey("Name")); // false\n        Console.WriteLine(expandoObject.Age);\n    }\n}\n\n')),(0,o.yg)("h4",{id:"enumeraci\xf3n-din\xe1mica-de-propiedades"},"Enumeraci\xf3n din\xe1mica de propiedades"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Puede enumerar las propiedades de un ExpandoObject usando foreach o trat\xe1ndolo como un diccionario o colecci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Dynamic;\n\nclass Program\n{\n    static void Main()\n    {\n        dynamic employee = new ExpandoObject();\n\n        employee.FirstName = "John";\n        employee.LastName = "Doe";\n        employee.Age = 30;\n\n        \n\n        IDictionary<string, object> employeeDictionary = (IDictionary<string, object>)employee;\n        foreach (KeyValuePair<string, object> property in employeeDictionary)\n        {\n            Console.WriteLine($"{property.Key}: {property.Value}");\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Tiene todos los m\xe9todos/propiedades/caracteristicas de las dos interfaces."))),(0,o.yg)("h4",{id:"resumen"},"Resumen"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un ExpandoObject es como una bolsa flexible donde puedes agregar, eliminar y acceder din\xe1micamente a diferentes piezas de informaci\xf3n sin tener una estructura predefinida. Es \xfatil cuando necesita trabajar con datos que pueden cambiar o desea tener la libertad de personalizar objetos. Ya sea que trabaje con API din\xe1micas, personalice objetos en tiempo de ejecuci\xf3n o se ocupe de transformaciones de datos din\xe1micas, ExpandoObject puede ser una herramienta valiosa en su programaci\xf3n en C#.")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/blogs/expandoobject-in-c-sharp2"},"ExpandoObject in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://mbarkt3sto.hashnode.dev/c-the-expandoobject"},"C#: The ExpandoObject")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://coding-examples.com/csharp/dynamic-expandoobject-in-c/"},"Dynamic ExpandoObject in C#"))))),(0,o.yg)("h2",{id:"gen\xe9rico"},"Gen\xe9rico"),(0,o.yg)("h4",{id:"parametro-de-tipo-gen\xe9rico"},"Parametro de tipo gen\xe9rico"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Es un contenedor para un tipo de dato espec\xedfico usado al crear una instancia de un objeto. Por convenci\xf3n, los par\xe1metros de tipo gen\xe9rico vienen prefijados con la letra T y deben ser \xfanicos en la declaraci\xf3n para evitar conflictos de nombres en la implementaci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Por ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class List<T> {\n   private T[] elements;\n}\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como podemos observar, se puede usar el par\xe1metro de tipo gen\xe9rico (en nuestro caso T) en cualquier parte en la que se espera un tipo espec\xedfico."),(0,o.yg)("li",{parentName:"ul"},"En este ejemplo la letra es T, pero puede ser cualquiera. "),(0,o.yg)("li",{parentName:"ul"},"As\xed, si definimos una lista de enteros de la siguiente forma:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<int> miLista = new List<int>();\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Dentro de la implementaci\xf3n, nuestro par\xe1metro de tipo gen\xe9rico se sustituye por el tipo espec\xedfico int.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"private int[] elements;\n")),(0,o.yg)("h4",{id:"caracter\xedsticas"},"Caracter\xedsticas"),(0,o.yg)("h4",{id:"1--default-values"},"1- Default values"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"No es posible asignar null a tipos gen\xe9ricos. La raz\xf3n es que un tipo gen\xe9rico tambi\xe9n puede ser instanciado como un tipo por valor, y null est\xe1 permitido solamente con tipos por referencia."),(0,o.yg)("li",{parentName:"ul"},"Para evitar este problema, puede utilizar la palabra clave default. Con la palabra clave default, se asigna null a los reference types y un 0 a los value types."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T> {\n    private T value;\n \n    public T MiMetodo()\n    {\n        value = default(T);\n        return value;\n    }\n}\n\n")),(0,o.yg)("h4",{id:"2--constraints"},"2- Constraints"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se pueden usar restricciones a la hora de definir el par\xe1metro de tipo gen\xe9rico para cuando se instancie  objetos de la clase gen\xe9rica."),(0,o.yg)("li",{parentName:"ul"},"Si a la hora de instanciar una clase, el par\xe1metro de tipo gen\xe9rico no cumple la restricci\xf3n establecida, tendremos un error en tiempo de compilaci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Las restricciones se especifican mediante la palabra clave where."),(0,o.yg)("li",{parentName:"ul"},"En la tabla siguiente se muestran los seis tipos de restricci\xf3n.")),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Restricci\xf3n"),(0,o.yg)("th",{parentName:"tr",align:null},"Explicaci\xf3n"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T: struct"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo debe ser un tipo de valor.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T : class"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo debe ser un tipo de referencia.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T : new()"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo debe tener un constructor p\xfablico sin par\xe1metros.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T : base_class_name"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo debe ser la clase base especificada, o bien debe derivarse de la misma.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T : interface_name"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo debe ser o implementar la interfaz especificada.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},"where T : U"),(0,o.yg)("td",{parentName:"tr",align:null},"El par\xe1metro de tipo proporcionado para T debe ser o derivar del par\xe1metro proporcionado para U.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se pueden combinar varias restricciones, en el siguiente c\xf3digo tenemos que el par\xe1metro de tipo gen\xe9rico debe implementar el interfaz IEjemplo y debe tener un constructor sin par\xe1metros:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T> where T: IEjemplo, new() {}\n")),(0,o.yg)("h4",{id:"3--inheritance"},"3- Inheritance"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una clase puede implementar un interfaz:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T>: IEnumerable<T> {}\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una clase gen\xe9rica puede derivar de una clase base gen\xe9rica a su vez:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Base<T> {}\npublic class MiClase<T>: Base<T> {}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El tipo de la clase base tambi\xe9n puede especificarse:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Base<T> {}\npublic class MiClase<T>: Base<string> {}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se permite definir una clase abstract como clase gen\xe9rica base que es implementada con un tipo concreto en la clase derivada:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Calc<T>;\n{\n    public abstract T Add(T x, T y);\n    public abstract T Sub(T x, T y);\n}\npublic class MiClase: Calc<int>\n{\n    public override int Add(int x, int y)\n    {\n        return x + y;\n    }\n    public override int Sub(int x, int y)\n    {\n        return x \u2014 y;\n    }\n}\n\n")),(0,o.yg)("h4",{id:"4--static-members"},"4- Static members"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Lo miembros est\xe1ticos de clases gen\xe9ricas requieren especial atenci\xf3n. S\xf3lo se comparten miembros est\xe1ticos de una clase gen\xe9rica con ",(0,o.yg)("strong",{parentName:"li"},"una")," instancia de la clase. Un ejemplo de esto es el siguiente c\xf3digo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T> \n{\n    public static int x;\n}\n \nMiClase<string>.x = 4; // Es la primera instancia.\nMiClase<int>.x = 5; // No afecta , ya que no es la primera  instancia.\nConsole.WriteLine(MiClase<string>.x); // escribe 4\n\n")),(0,o.yg)("h4",{id:"ejemplos"},"Ejemplos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Los par\xe1metros de tipo gen\xe9rico, se pueden usar en m\xe9todos, interfaces, clases (como el ejemplo anterior), etc."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo con una Clase:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T>\n{\n   T value;\n \n   public MiClase(T t)\n   {\n      this.value = t;\n   }\n \n   public void Write()\n   {\n     Console.WriteLine(this.value);\n   }\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Como se puede observar, esta clase tiene un m\xe9todo Write() que nos da igual el tipo de dato sobre el que actuar, escribir\xe1 la representaci\xf3n en texto del par\xe1metro enviado al constructor.")))),(0,o.yg)("h5",{id:"interfaces"},"Interfaces"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se pueden definir interfaces que tienen m\xe9todos con par\xe1metros de tipo gen\xe9rico."),(0,o.yg)("li",{parentName:"ul"},"Cuando una interfaz tiene una restricci\xf3n en un par\xe1metro de tipo, s\xf3lo se pueden utilizar los tipos que implementan la interfaz. "),(0,o.yg)("li",{parentName:"ul"},"Las clases que implementan un interfaz gen\xe9rico pueden definirse de las siguientes formas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public interface IEjemplo<T>\n{\n   public T MiMetodo();\n}\npublic class MiClase: IEjemplo<int> {}\npublic class MiClase2<T>: IEjemplo<T> {}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una clase puede implementar varios interfaces gen\xe9ricos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public interface IEjemplo<T> {}\npublic interface IEjemplo2<T> {}\npublic class MiClase<T> where T : IEjemplo<T>, IEjemplo2<T> {}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se puede aplicar la herencia entre interfaces gen\xe9ricos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public interface IEjemplo<T> {}\npublic interface IEjemplo2 : IEjemplo<int> {}\npublic interface IEjemplo3<T> : IEjemplo<int> {}\npublic interface IEjemplo4<T> : IEjemplo<T> {}\n\n")),(0,o.yg)("h5",{id:"m\xe9todos"},"M\xe9todos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un m\xe9todo gen\xe9rico es aquel que en su declaraci\xf3n emplea par\xe1metros de tipo gen\xe9rico."),(0,o.yg)("li",{parentName:"ul"},"Ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public static void MiMetodoGenerico<T>(T t)\n{\n   Console.WriteLine(t);\n}\n \n// para probarlo hacemos\nint a = 0;\nstring b = "Esto es una prueba";\n \nMiMetodoGenerico<int>(a);\nMiMetodoGenerico<string>(b);\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Est\xe1 permitido crear m\xe9todos gen\xe9ricos en clases no gen\xe9ricas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public class MiClase\n{\n   public static void MiMetodoGenerico<T>(T t)\n   {\n      Console.WriteLine(t);\n   }\n}\n \n// para probarlo hacemos\nint a = 0;\nstring b = "Esto es una prueba";\nMiClase miClase = new MiClase();\n \nmiClase.MiMetodoGenerico<int>(a);\nmiClase.MiMetodoGenerico<string>(b);\n\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se pueden usar restricciones en los m\xe9todos para que sean m\xe1s especializados:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public interface IEjemplo<T> {}\npublic static void MiMetodoGenerico<T>(T t) where T : IEjemplo<T>\n{\n   Console.WriteLine(t);\n}\n\n")),(0,o.yg)("h5",{id:"delegados"},"Delegados"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Un delegado puede definir sus propios par\xe1metros de tipo gen\xe9rico pero el c\xf3digo que hace referencia al delegado gen\xe9rico debe especificar el tipo. "),(0,o.yg)("li",{parentName:"ul"},"Supongamos que tenemos un delegado definido de la siguiente manera:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public delegate string GenericDelegate<T>(T t);\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Ahora definimos dos m\xe9todos para que lo maneje nuestro delegado gen\xe9rico:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public static string DecimalToString(decimal d)\n{\n  return d.ToString();\n}  \n \npublic static string IntegerToString(int i)\n{\n  return i.ToString();\n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como veremos en el siguiente ejemplo, instanciamos dos delegados especificando los tipos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"GenericDelegate<decimal> genericDelegateForDecimal = new GenericDelegate<decimal>(DecimalToString);\nConsole.WriteLine(genericDelegateForDecimal(99.78));  \n \nGenericDelegate<int> genericDelegateForInt = new GenericDelegate<int>(IntegerToString);\nConsole.WriteLine(genericDelegateForInt(6));\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://sparraguerra.wordpress.com/2015/07/01/net-que-son-los-generics-y-su-implementacion-en-c-y-ii/"},"[.NET] Qu\xe9 son los Generics y su implementaci\xf3n en C# (y II).")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/generics-csharp#mcetoc_1eg052ei9i"},"Ejemplo de Generics en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://thatcsharpguy.com/post/metodos-genericos-en-c"},"M\xe9todos gen\xe9ricos en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://desarrolloweb.com/articulos/metodos-genericos-c.html"},"M\xe9todos gen\xe9ricos en C#"))))),(0,o.yg)("h2",{id:"is"},"Is"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El operador is se utiliza para comprobar si el tipo (tipo de dato) es compatible con otro tipo."),(0,o.yg)("li",{parentName:"ul"},"Toda esta comprobaci\xf3n se hace en tiempo de ejecuci\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Devuelve verdadero si el objeto  es del mismo tipo (de la misma clase); de lo contrario, devuelve falso. Tambi\xe9n devuelve falso para objetos nulos (null)."),(0,o.yg)("li",{parentName:"ul"},"Tambi\xe9n puede utilizar el operador is para hacer coincidir una expresi\xf3n con un patr\xf3n.")),(0,o.yg)("h4",{id:"sintaxis-1"},"Sintaxis"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Expresi\xf3n (ej: una instancia de alguna clase) is type/patr\xf3n(tipo de dato , como una clase / un patr\xf3n)\n")),(0,o.yg)("h4",{id:"ejemplo-5"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n \nclass Author {\n \n    public string name;\n    public int rank;\n \n    \n    public void details(string n, int r)\n    {\n        name = n;\n        rank = r;\n    }\n}\n \nclass Work {\n \n    public int articl_no;\n    public int improv_no;\n \n    \n    public void totalno(int a, int i)\n    {\n        articl_no = a;\n        improv_no = i;\n    }\n}\n \npublic class GFG {\n \n    static public void Main()\n    {\n \n        Author a = new Author();\n \n        a.details("Ankita", 5);\n \n        Work w = new Work();\n \n        w.totalno(80, 50);\n \n        bool result;\n \n        // la variable \u201ca\u201d es de la clase \u201cAuthor\u201d?\n        result = a is Author;\n        Console.WriteLine("Is a is Author? : {0}", result);\n \n         // la variable \u201cw\u201d es de la clase \u201cAuthor\u201d?\n        result = w is Author;\n        Console.WriteLine("Is w is Author? : {0}", result);\n \n        // Le asigno null a la variable \u201ca\u201d\n        a = null;\n \n    // la variable \u201ca\u201d es de la clase \u201cAuthor\u201d?\n        result = a is Author;\n        Console.WriteLine("Is a is Author? : {0}", result);\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/c-sharp-is-operator-keyword/"},"C# | is Operator Keyword")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.pluralsight.com/guides/csharp-is-as-operators-is-expressions"},"It Is What It Is and As It Is: Using the Is and As Operators in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/is"},"is operator (C# reference)"))))),(0,o.yg)("h2",{id:"coincidencia-de-patrones"},"Coincidencia de patrones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'La coincidencia de patrones es el proceso de tomar una expresi\xf3n y probar si cumple con ciertos criterios, como "ser un tipo espec\xedfico" o "coincidir con un valor constante espec\xedfico".'),(0,o.yg)("li",{parentName:"ul"},"Existen varios patrones diferentes, pero todos los patrones tienen en com\xfan que trabajan con valores booleanos (coincide o no con el patr\xf3n)"),(0,o.yg)("li",{parentName:"ul"},"Las declaraciones is y switch (declaraci\xf3n y expresi\xf3n) admiten la coincidencia de patrones.")),(0,o.yg)("h4",{id:"patrones"},"Patrones"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Hay varias formas diferentes de definir un patr\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Estas son las clases que usaremos en los ejemplos:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public class Rectangle\n{\n  public double Length { get; init; }\n  public double Height {get; init; }\n}\n\npublic class Triangle\n{\n  public double Base { get; init; }\n  public double Height { get; init; }\n}\n\npublic class Circle\n{\n  public double Radius { get; init; }\n}\n\npublic class Square\n{\n  public double Length { get; init; }\n}\n\n")),(0,o.yg)("h4",{id:"patr\xf3n-constante"},"Patr\xf3n constante"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n constante se puede utilizar para probar si una expresi\xf3n es igual a una constante(valor) especificada."),(0,o.yg)("li",{parentName:"ul"},"Un caso de uso popular para el patr\xf3n constante es la comprobaci\xf3n de nulos."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo del siguiente ejemplo utiliza el patr\xf3n constante para determinar si un objeto Rectangle es null:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Rectangle rectangle = new Rectangle { Height = 7, Length = 3 };\n\npublic void IsShapeNull(Rectangle rectangle)\n{\n  if (rectangle is null)\n  {\n    throw new ArgumentNullException(nameof(rectangle));\n  }\n}\n\n")),(0,o.yg)("h4",{id:"patr\xf3n-de-declaraci\xf3n"},"Patr\xf3n de declaraci\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n de declaraci\xf3n se puede utilizar para determinar en tiempo de ejecuci\xf3n si una expresi\xf3n es de un tipo determinado."),(0,o.yg)("li",{parentName:"ul"},"Opcionalmente, se puede incluir una declaraci\xf3n de variable en el patr\xf3n de declaraci\xf3n. "),(0,o.yg)("li",{parentName:"ul"},"Si la expresi\xf3n de prueba coincide con el tipo especificado, la expresi\xf3n se convertir\xe1 a este tipo y luego se asignar\xe1 a la variable (que es opcional)."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo del siguiente ejemplo prueba si shape es de tipo Square. Si shape es Square se convertir\xe1 de object a Square y luego se asignar\xe1 a una variable denominada square. Si no hay una coincidencia de tipo, la  variable square no se crea:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Square { Length = 5 };\n\npublic void IsShapeSquare(object shape)\n{\n  if (shape is Square square)\n  {\n    Console.WriteLine($"Shape is a square with a side of length {square.Length}");\n  }\n  else\n  {\n    Console.WriteLine($"{shape} is not a square");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"patr\xf3n-de-propiedad"},"Patr\xf3n de propiedad"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La coincidencia de patrones se mejor\xf3 a\xfan m\xe1s en C# 8.0 y una nueva incorporaci\xf3n fue el patr\xf3n de propiedad."),(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n de propiedad se puede utilizar para comprobar y comparar valores de propiedades."),(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n de propiedad prueba si las propiedades/campos de una expresi\xf3n coinciden con los valores de las propiedades/campos especificados."),(0,o.yg)("li",{parentName:"ul"},"Cada propiedad o campo correspondiente debe coincidir y la expresi\xf3n no debe ser nula."),(0,o.yg)("li",{parentName:"ul"},"El siguiente ejemplo muestra un patr\xf3n de propiedad que inspecciona las propiedades Base y Height de un objeto Triangle.\nComienza verificando si la entrada es de un tipo espec\xedfico.\nUna vez que el patr\xf3n de propiedad afirma que es un Triangle inspeccionar\xe1 la propiedad Base y la propiedad Height de la entrada. El patr\xf3n coincidir\xe1 con la expresi\xf3n si la entrada es un Triangle con  Base de 4 y  Height de 6:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Triangle triangle = new Triangle { Base = 4, Height = 6 };\n\npublic void IsSpecificTriangle(Triangle triangle)\n{\n  if (triangle is Triangle { Base: 4, Height: 6 } specificTriangle)\n  {\n    Console.WriteLine($"Shape is a triangle wih a base of {specificTriangle.Base} and a height of {specificTriangle.Height}");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"patr\xf3n-var"},"Patr\xf3n var"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n var se puede utilizar para hacer coincidir cualquier expresi\xf3n y luego asignarla a una nueva variable declarada."),(0,o.yg)("li",{parentName:"ul"},"El prop\xf3sito de un patr\xf3n var es asignar una expresi\xf3n a una variable, en lugar de probar una expresi\xf3n en un patr\xf3n."),(0,o.yg)("li",{parentName:"ul"},"Es \xfatil si desea almacenar valores de propiedades en una variable para usarla en otros patrones o expresiones."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo del siguiente ejemplo prueba si la entrada shape es un Rectangle y su propiedad Length es m\xfaltiplo de 3. Aqu\xed, asignamos el valor de la propiedad Length a una variable length y luego probamos esta variable en una expresi\xf3n booleana:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Rectangle { Length = 9, Height = 4};\n\npublic void IsLengthMultipleOfThree(object shape)\n{\n  if (shape is Rectangle { Length: var length } rect && length % 3 == 0)\n  {\n    Console.WriteLine("This shape is a rectangle with a length which is a multiple of 3");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"patr\xf3n-posicional"},"Patr\xf3n posicional"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n posicional es \xfatil cuando se prueba un tipo que se puede deconstruir.   La deconstrucci\xf3n es un proceso de descomprimir tipos en partes y almacenarlas en nuevas variables (deconstrucci\xf3n de objetos)."),(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n posicional puede deconstruir una expresi\xf3n de entrada y luego probar si las variables resultantes coinciden con un patr\xf3n especificado entre par\xe9ntesis."),(0,o.yg)("li",{parentName:"ul"},"C# ofrece soporte integrado para deconstruir los tipos record y tuple. Sin embargo, para otros tipos, el compilador requiere la implementaci\xf3n del m\xe9todo Deconstruct."),(0,o.yg)("li",{parentName:"ul"},"Por ejemplo, podemos cambiar el tipo Rectangle para incluir un m\xe9todo Deconstruct personalizado. Cada valor que se va a deconstruir se espec\xedfica mediante el par\xe1metro out. El m\xe9todo Deconstruct divide el tipo Rectangle y devuelve una variable length y una variable height:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public struct Rectangle\n{\n  public double Length { get; init; }\n  public double Height {get; init; }\n\n  public void Deconstruct(out double length, out double height)\n  {\n    length = Length;\n    height = Height;\n  }\n}\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Luego, puedes deconstruir una instancia de la clase Rectangle nombrada rectangle con una asignaci\xf3n, como se muestra a continuaci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"Rectangle rectangle = new Rectangle { Length = 20, Height = 40 };\nvar (l, h) = rectangle;\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n respeta la posici\xf3n que tiene cada par\xe1metro dentro del m\xe9todo Deconstruct. Entonces, el primer valor que sale del m\xe9todo Deconstruct es el primer valor que vamos a hacer coincidir y as\xed sucesivamente. "),(0,o.yg)("li",{parentName:"ul"},'En el siguiente ejemplo, se deconstruye rectangle y length. Luego lenght se prueba con un patr\xf3n  constante y height se prueba con  "_(patr\xf3n de descarte)" . Entonces, el patr\xf3n coincidir\xe1 si rectangle tiene un length de 20 y un  height de cualquier valor:')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'if (rectangle is (20, _) rect)\n{\n  Console.WriteLine("The rectangle has a length of 20");\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Se puede utilizar el patron de descarte (con el signo \u201c_\u201d) cuando se acepta cualquier valor en una posici\xf3n.")))),(0,o.yg)("h4",{id:"patr\xf3n-de-tuplas"},"Patr\xf3n de tuplas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n de tupla se puede utilizar para hacer coincidir m\xfaltiples valores de entrada."),(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n de tupla es una forma particular de utilizar el patr\xf3n posicional, pero el objeto que emparejamos no se deconstruye porque ya es una tupla."),(0,o.yg)("li",{parentName:"ul"},"Utilizamos La expresi\xf3n switch  en el siguiente ejemplo  para usar el patr\xf3n de tupla para seleccionar una \u201cdescripci\xf3n de forma (String)\u201d basada en los valores de la tupla de entrada (lo que contiene los par\xe9ntesis atr\xe1s de la expresi\xf3n switch):")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'public string ReturnDescriptionOfShape(string shape, int length, int height)\n{\n  return (shape, length, height) switch \n  {\n    ("Rectangle", 2, 1) => "This is a small rectangle",\n    ("Circle", 4, 2) => "This is a medium circle",\n    ("Square", 8, 4) => "This is a large square",\n    (_,_,_) => "This not a valid input"\n  };\n}\n\n')),(0,o.yg)("h4",{id:"patr\xf3n-relacional"},"Patr\xf3n relacional"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El patr\xf3n relacional se puede utilizar para comparaciones."),(0,o.yg)("li",{parentName:"ul"},"Se compara un valor con una constante utilizando operadores de comparaci\xf3n (>, <, >=, <=)."),(0,o.yg)("li",{parentName:"ul"},"El siguiente ejemplo muestra un patr\xf3n relacional que inspecciona la propiedad Radius de un objeto Circle. El patr\xf3n coincidir\xe1 con la expresi\xf3n si la entrada es Circle y  Radius   es mayor  igual a 100:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Circle {Radius = 110};\n\npublic void IsBigCircle(object shape)\n{\n  if (shape is Circle { Radius: >= 100 })\n  {\n    Console.WriteLine($"This is a big circle");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"tipo-patr\xf3n"},"Tipo patr\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Al igual que el patr\xf3n de declaraci\xf3n, puede utilizar un patr\xf3n de tipo para determinar en tiempo de ejecuci\xf3n si una expresi\xf3n es de un tipo determinado. "),(0,o.yg)("li",{parentName:"ul"},"Con el patr\xf3n de tipo, no se especifica ninguna variable. El m\xe9todo del siguiente ejemplo prueba si shape es de tipo Square:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Square { Length = 5 };\n\npublic void IsShapeSquare(object shape)\n{\n  if (shape is Square)\n  {\n    Console.WriteLine($"{shape} is a square");\n  }\n  else\n  {\n    Console.WriteLine($"{shape} is not a square");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"patrones-l\xf3gicos"},"Patrones l\xf3gicos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"C# 9.0 tambi\xe9n introdujo patrones l\xf3gicos, que es la capacidad de utilizar combinaciones de patrones or ,  not y and para crear patrones l\xf3gicos."),(0,o.yg)("li",{parentName:"ul"},"La negaci\xf3n o el patr\xf3n not se pueden utilizar para comprobaciones nulas."),(0,o.yg)("li",{parentName:"ul"},"Se puede comprobar si un objeto no es null utilizando el patr\xf3n l\xf3gico not en C# 9.0 de la siguiente manera:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"if (shape is not null)\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Que es lo mismo que:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"if (shape != null)\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se Puede utilizar la conjuntiva o el patr\xf3n and para comprobar si la expresi\xf3n de entrada coincide con m\xe1s de un patr\xf3n."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo del siguiente ejemplo muestra un   patr\xf3n que coincidir\xe1 con la expresi\xf3n si la entrada es Circle con un Radius mayor o igual a 100 y menor o igual a 200. La expresi\xf3n debe coincidir con ambos patrones para que haya una coincidencia.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Circle {Radius = 110};\n\npublic void IsBigCircleRange(object shape)\n{\n  if (shape is Circle { Radius: >= 100 and <= 200 })\n  {\n    Console.WriteLine($"This is a big circle");\n  }\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se puede utilizar la disyuntiva o el patr\xf3n or para comprobar si la expresi\xf3n de entrada coincide con cualquiera de los patrones especificados."),(0,o.yg)("li",{parentName:"ul"},"En el siguiente ejemplo, el patr\xf3n coincidir\xe1 con la expresi\xf3n si la entrada es un Circle con Radius igual a 100 o 200. Solo uno de estos patrones necesita coincidir con la expresi\xf3n para que haya una coincidencia:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'object shape = new Circle {Radius = 100};\n\npublic void IsBigCircleValue(object shape)\n{\n  if (shape is Circle { Radius: 100 or 200 })\n  {\n    Console.WriteLine($"This is a big circle");\n  }\n}\n\n')),(0,o.yg)("h4",{id:"cu\xe1les-son-las-diferentes-formas-de-hacer-coincidir-patrones"},"\xbfCu\xe1les son las diferentes formas de hacer coincidir patrones?"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"La expresi\xf3n is, declaraci\xf3n switch y expresi\xf3n switch (introducida en C# 8.0) admiten la coincidencia de patrones. Los ejemplos anteriores se centraron en c\xf3mo hacer coincidir el patr\xf3n con la expresi\xf3n is, y la expresi\xf3n switch se abord\xf3 en el ejemplo de coincidencia de patrones de tupla.")),(0,o.yg)("h4",{id:"declaraci\xf3n-switch"},"Declaraci\xf3n switch"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"A partir de C# 7.0, la declaraci\xf3n switch se mejor\xf3 para facilitar la coincidencia de patrones."),(0,o.yg)("li",{parentName:"ul"},"La declaraci\xf3n switch ahora puede admitir cualquier tipo de dato, mientras que anteriormente solo se admit\xedan tipos integrados y constantes de cadena (string)."),(0,o.yg)("li",{parentName:"ul"},"Cada uno de los case  puede ser ahora un patr\xf3n y no un valor constante.  Finalmente, se incluy\xf3 soporte de la palabra clave when para expresar y especificar a\xfan m\xe1s la condici\xf3n para la coincidencia de patrones."),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo del siguiente ejemplo calcula el \xe1rea de una forma utilizando la declaraci\xf3n  switch que usa el patr\xf3n var para seleccionar la f\xf3rmula correcta para este c\xe1lculo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public double CalculateAreaSwitchStatement(T shape)\n{\n  switch (shape)\n  {\n    case null:\n        throw new ArgumentNullException(nameof(shape));\n\n    case Square { Length: var l }:\n        return l * l;\n\n    case Circle { Radius: var r }:\n        return r * r * Math.PI;\n\n    case Rectangle { Length: var l, Height: var h }:\n        return l * h;\n\n    case Triangle { Base: var b, Height: var h}:\n        return b * h / 2;\n\n    default:\n        throw new NotSupportedException();\n  }\n}\n\n")),(0,o.yg)("h4",{id:"expresi\xf3n-switch"},"Expresi\xf3n switch"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"C# 8.0 introdujo la expresi\xf3n switch para evaluar una expresi\xf3n frente a un conjunto de patrones."),(0,o.yg)("li",{parentName:"ul"},"La expresi\xf3n switch proporciona una sintaxis m\xe1s concisa para la coincidencia de patrones."),(0,o.yg)("li",{parentName:"ul"},"Hay varias mejoras de sintaxis en la expresi\xf3n switch en comparaci\xf3n con la declaraci\xf3n switch:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"En primer lugar, la variable de entrada est\xe1 antes de la palabra clave switch. "),(0,o.yg)("li",{parentName:"ul"},"La palabra clave case y los dos puntos (:) se reemplazan con flechas (=>), lo que hace que el c\xf3digo sea m\xe1s legible y conciso. "),(0,o.yg)("li",{parentName:"ul"},"El caso default ahora se reemplaza con un descarte (_)."),(0,o.yg)("li",{parentName:"ul"},"Finalmente, el cuerpo es una expresi\xf3n, no una serie de enunciados.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una de las grandes diferencias entre una expresi\xf3n  switch y una declaraci\xf3n switch es que una expresi\xf3n switch le indicar\xe1 si no ha cubierto todas las posibilidades."),(0,o.yg)("li",{parentName:"ul"},'Con una declaraci\xf3n switch, el comportamiento se especifica s\xf3lo para algunos de los casos, siendo el valor predeterminado "no hacer nada". Sin embargo, una expresi\xf3n switch tiene que producir alg\xfan tipo de resultado cuando se eval\xfaa. Esto es \xfatil ya que el compilador le avisar\xe1 si ha olvidado algo. '),(0,o.yg)("li",{parentName:"ul"},"El m\xe9todo en el siguiente ejemplo es el mismo que el ejemplo anterior pero usando la expresi\xf3n switch. En este ejemplo, el patr\xf3n de descarte (_) se utiliza para hacer coincidir cualquier expresi\xf3n, incluida null. El patr\xf3n de descarte garantiza que la expresi\xf3n SWITCH maneje todos los valores de entrada posibles. Si no se utiliza el patr\xf3n de descarte y el valor de entrada no coincide con ninguno de los patrones en la expresi\xf3n, el tiempo de ejecuci\xf3n generar\xe1 una excepci\xf3n:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"public double CalculateAreaSwitchExpression(T shape)\n{\n  return shape switch\n  {\n    null => throw new ArgumentNullException(nameof(shape)),\n\n    Square { Length: var l } => l * l,\n    Circle { Radius: var r } => r * r * Math.PI,\n    Rectangle { Height: var h, Length: var l } => h * l,\n    Triangle { Base: var b, Height: var h } => b * h / 2,\n\n    _ => throw new NotSupportedException()\n  };\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://endjin.com/blog/2022/02/pattern-matching-in-csharp"},"Pattern Matching in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://blog.ndepend.com/c-pattern-matching-explained/"},"C# Pattern Matching Explained")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://blog.ndepend.com/c-pattern-matching-explained/"},"Pattern Matching in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://timdeschryver.dev/blog/pattern-matching-examples-in-csharp"},"Pattern Matching Examples in C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.bytehide.com/blog/pattern-matching-csharp"},"C# Pattern Matching: Full Guide")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://code-maze.com/csharp-pattern-matching/"},"Pattern Matching in C#"))))),(0,o.yg)("h2",{id:"switch"},"Switch"),(0,o.yg)("h4",{id:"declaraci\xf3n"},"Declaraci\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El elemento Switch nos permite evaluar una variable y realizar diferentes cosas seg\xfan el resultado de esta."),(0,o.yg)("li",{parentName:"ul"},"Es parecido a usar m\xfaltiples IF de manera secuencial, aunque se podr\xeda decir que con Switch puedes lograr un c\xf3digo m\xe1s ordenado."),(0,o.yg)("li",{parentName:"ul"},"Sintaxis:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"switch(variable) {\n    case valor1:\n         Instrucciones\n         break;\n    case valor2:\n         Instrucciones\n         break;\n    case valor3:\n         Instrucciones\n         break;\n    \u2026\n  default:\n          Instrucciones\n          break;\n}\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Luego de la palabra clave switch entre par\xe9ntesis indicamos una variable."),(0,o.yg)("li",{parentName:"ul"},"Con una serie de case verificamos si dicha variable almacena un valor igual a ","[valor1, valor2, valor3 , ...]"," en el caso de ser igual se ejecutan las instrucciones contenidas en dicho case (luego de los \u201c:\u201d)."),(0,o.yg)("li",{parentName:"ul"},"Si todos los case son falsos,  se ejecutan las instrucciones contenidas despu\xe9s de la palabra default (luego de los \u201c:\u201d)."),(0,o.yg)("li",{parentName:"ul"},"Por \xfaltimo, debemos tener en cuenta la palabra clave \u201cbreak\u201d que se usa para indicar que el \u201ccase\u201d ya ha terminado y se puede continuar con el siguiente. Es obligatorio usarlo, o si no, el sistema lo marcar\xe1 como error.")))),(0,o.yg)("h4",{id:"ejemplo-6"},"Ejemplo"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string number;\nint opt = 2;\n \nswitch(opt)\n{\n    case 1: \n        number = "One";\n        break;\n    case 2: \n        number = "Two";\n        break;\n    default:\n        number = "Error";\n        break;\n}\nConsole.WriteLine("El n\xfamero es: " + number);\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En el ejemplo anterior, lo que estamos haciendo es evaluar la variable \u201copt\u201d (dentro de switch), la cual es num\xe9rica (tambi\xe9n podemos evaluar variables tipo texto, booleanos y caracteres)."),(0,o.yg)("li",{parentName:"ul"},"Luego definimos los diferentes valores que puede tener la variable \u201copt\u201d con case. En ese caso, estamos indicando que cuando el n\xfamero sea uno (case 1), vamos a guardar en la variable number la palabra \u201cOne\u201d. En el caso que la variable sea dos (case 2), vamos a guardar en la variable number la palabrea \u201cTwo\u201d. "),(0,o.yg)("li",{parentName:"ul"},"Por \xfaltimo, tenemos un comod\xedn llamado \u201cDefault \u201c, este se usa si queremos hacer algo cuando la evaluaci\xf3n no ha ca\xeddo en ninguna condici\xf3n previamente programada (no se ejecut\xf3 ning\xfan case). En nuestro ejemplo, si la variable opt no es ni uno ni dos, ir\xe1 a \u201cdefault\u201d y guardar\xe1 en la variable number la palabra \u201cError\u201d.")))),(0,o.yg)("h4",{id:"podes-hacer-la-misma-acci\xf3n-en-diferentes-case"},"Podes hacer la misma acci\xf3n en diferentes case"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\n\nnamespace multiple_case_switch\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int x = 3;\n            switch (x)\n            {\n                case 1:\n                case 2:\n                case 3:\n                    Console.WriteLine("The value is between 1 and 3");\n                    break;\n                case 4:\n                case 5:\n                case 6:\n                    Console.WriteLine("The value is between 4 and 6");\n                    break;\n            }\n        }\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://clase13.com/2021/08/27/condicional-switch-csharp/"},"CONDICIONAL SWITCH EN C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/111/control-structures/the-switch-statement/"},"The switch statement")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.delftstack.com/es/howto/csharp/multiple-case-switch-in-csharp/"},"Declaraci\xf3n de switch de varios case en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.tutorialesprogramacionya.com/csharpya/detalleconcepto.php?codigo=184"},"Estructura condicional switch"))))),(0,o.yg)("h4",{id:"expresi\xf3n"},"Expresi\xf3n"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'En las expresiones Switch, todos los casos son expresiones, por lo que es una versi\xf3n m\xe1s "ligera" que la declaraci\xf3n.'),(0,o.yg)("li",{parentName:"ul"},"Sus caracteristicas son:",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"La variable utilizada en la expresi\xf3n switch ahora aparece antes de la palabra clave switch."),(0,o.yg)("li",{parentName:"ul"},"Los dos puntos (:) y la palabra clave case se reemplazan con flechas (=>). Lo que hace que el c\xf3digo sea m\xe1s compacto y legible."),(0,o.yg)("li",{parentName:"ul"},"El caso predeterminado ahora se reemplaza con un descarte (_)."),(0,o.yg)("li",{parentName:"ul"},"Y el cuerpo del cambio es una expresi\xf3n, no una declaraci\xf3n."))),(0,o.yg)("li",{parentName:"ul"},"En el siguiente c\xf3digo, cualquiera puede analizar qu\xe9 est\xe1 haciendo exactamente.:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'    var operation = 2;  \n      \n    var result = operation switch  \n    {  \n        1 => "Case 1",  \n        2 => "Case 2",  \n        3 => "Case 3",  \n        4 => "Case 4",  \n        _ => "No case availabe"  \n    };  \n      \n    Console.WriteLine(result);  \n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},'En el c\xf3digo anterior, cualquiera puede encontrar que no hay ninguna declaraci\xf3n de "case", "break" (o return). En las expresiones Switch, estas palabras clave no son necesarias. Los dos puntos (:) se reemplazan con la flecha (=>). '),(0,o.yg)("li",{parentName:"ul"},'Hay una palabra clave m\xe1s, es decir, "default". Tambi\xe9n se reemplaza por "_" (gui\xf3n bajo).')))),(0,o.yg)("h4",{id:"ejemplo-7"},"Ejemplo"),(0,o.yg)("h5",{id:"con-declaraci\xf3n"},"Con declaraci\xf3n"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'\nusing System;\n  \npublic class GFG {\n  \n \n    public static void Main(String[] args)\n    {\n        int gitem = 8;\n  \n        switch (gitem) {\n  \n        case 2:\n            Console.WriteLine("Hello");\n            break;\n  \n        case 4:\n            Console.WriteLine("Bonjour");\n  \n            break;\n        case 6:\n            Console.WriteLine("Konnichiwa");\n            break;\n  \n        case 8:\n            Console.WriteLine("Namaste");\n            break;\n  \n        case 10:\n            Console.WriteLine("Anyoung haseyo");\n            break;\n  \n        default:\n            Console.WriteLine("No greeting found");\n            break;\n        }\n    }\n}\n\n')),(0,o.yg)("h5",{id:"con-expresi\xf3n"},"Con expresi\xf3n"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'\nusing System;\n  \npublic class GFG {\n  \n  \n    public static void Main(String[] args)\n    {\n        var gitem = 4;\n  \n        var res = gitem switch {\n            2 => "Hello",\n            4 => "Bonjour",\n            6 => "Namaste",\n            8 => "Anyoung haseyo",\n            _ => "No greeting found",\n  \n        };\n  \n        Console.WriteLine(res);\n    }\n}\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/c-sharp-8-0-new-feature-swtich-expression/"},"What is a Switch Expression in C#?")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.thomasclaudiushuber.com/2021/02/25/c-9-0-pattern-matching-in-switch-expressions/"},"C# 9.0: Pattern Matching in Switch Expressions")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.geeksforgeeks.org/switch-expression-in-c-sharp-8-0/"},"Switch Expression in C# 8.0")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://codebuns.com/csharp-advanced/csharp-8-switch-expressions/"},"C# 8 Switch Expressions"))))),(0,o.yg)("h2",{id:"tuplas"},"Tuplas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'Seguramente te ha pasado, alguna vez has pensado "Ojal\xe1 pudiera devolver dos cosas desde este m\xe9todo" y si bien recuerdas que los m\xe9todos en C# \xfanicamente pueden tener un solo tipo de retorno, es posible devolver m\xe1s de dos valores haciendo uso de la clase gen\xe9rica Tuple.'),(0,o.yg)("li",{parentName:"ul"},'Podemos ver a Tuple (o tupla) como un auxiliar para el programador, que permite "agrupar" uno o varios valores dentro de uno solo, para as\xed tratarlos como uno solo, esto, a trav\xe9s de varias clases gen\xe9ricas definidas de la siguiente manera:',(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3, T4>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3, T4, T5>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3, T4, T5, T6>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3, T4, T5, T6, T7>"),(0,o.yg)("li",{parentName:"ul"},"Tuple","<","T1, T2, T3, T4, T5, T6, T7, TRest>")))),(0,o.yg)("h4",{id:"creando-tuplas"},"Creando tuplas"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Es una clase gen\xe9rica, as\xed que para crear una tupla que contiene un entero y dos cadenas debemos usar:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var t = new Tuple<int, string, string>(1, "A", "B");\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"O, por ejemplo, si quisi\xe9ramos crear algo m\xe1s complejo como una variable que contiene un entero, un decimal, un objeto, otro entero, un booleano y un flotante, tendr\xedamos que hacer algo como esto:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var t1 = new Tuple<int, decimal, object, int, bool, float>(3, 1.5m, new { emoji = ":grin:" }, 5, true, 7.5f);\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Uhhmm, la sintaxis se pone un poco complicada, \xbfno? para eliminar esta sintaxis complicada, podemos usar el m\xe9todo est\xe1tico Create de la clase Tuple para crear tuplas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'var t1 = Tuple.Create(3, 1.5m, new { emoji = ":grin:" }, 5, true, 7.5f);\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"Este m\xe9todo, inferir\xe1  los tipos de dato a partir de los par\xe1metros."))),(0,o.yg)("h4",{id:"accediento-a-los-miembros"},"Accediento a los miembros"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Una vez creada la tupla (ya sea con el constructor o el m\xe9todo est\xe1tico), podemos acceder a cada uno de los datos a trav\xe9s de las propiedades llamadas Item#, donde # es el n\xfamero de la propiedad a la que nos referimos."),(0,o.yg)("li",{parentName:"ul"},"\xd3sea para acceder a un dato es como un array, donde # es el \xedndice(index) pero empieza en 1:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine(t.Item1); // 1 -> int\nConsole.WriteLine(t.Item2 + " - " + t.Item3 ); // "A - B" -> string\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Es importante se\xf1alar que las propiedades de la clase Tuple son de solo lectura, y que una vez asignadas en el constructor, no pueden ser modificadas:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"t1.Item4 = 7; // Error, solo lectura\n")),(0,o.yg)("h4",{id:"tuplas-de-8-elementos"},"Tuplas de 8 elementos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'Si volvemos a las definiciones de las clases Tuple puedes ver que existen hasta 8 versiones gen\xe9ricas disponibles. Sin embargo, la octava una peculiaridad: el octavo valor no se almacena dentro de "Item8", sino dentro de otra tupla (a la que accedemos desde la propiedad Rest):')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"var megaTuple = Tuple.Create(1, 2, 3, 4, 5, 6, 7, 8);\n//Console.WriteLine(miniTuple.Item8); // Item8 no existe, entonces tenemos que usar Rest:\nConsole.WriteLine(megaTuple.Rest.Item1);\n\n")),(0,o.yg)("h4",{id:"ejemplos-de-usos"},"Ejemplos de usos"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como par\xe1metro de un m\xe9todo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'string MegaMetodoTuple(Tuple<int, int, string, decimal, bool> args)\nvar tuple = Tuple.Create(10, 3, "MX", 3.1m, true);\nMegaMetodoTuple(tuple);  \n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Como valores de retorno:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'private static Tuple<int, int, int> SplitColors(string hex)\n{\n    int r = Int32.Parse(hex.Substring(0, 2), NumberStyles.HexNumber);\n    int g = Int32.Parse(hex.Substring(2, 2), NumberStyles.HexNumber);\n    int b = Int32.Parse(hex.Substring(4, 2), NumberStyles.HexNumber);\n    return Tuple.Create(r, g, b);\n}\nstring color = "3C8A3F";\nvar colors = SplitColors(color);\nConsole.WriteLine("{0} es R:{1} G:{2} B:{3}", color, colors.Item1, colors.Item2, colors.Item3);\n\n')),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/language-reference/builtin-types/value-tuples"},"Tipos de tupla (referencia de C#)")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/api/system.tuple-2?view=net-7.0"},"Tuple","<","T1,T2> Clase")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/es-es/dotnet/csharp/fundamentals/functional/deconstruct"},"Deconstruir tuplas y otros tipos")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.campusmvp.es/recursos/post/c-y-net-tuplas-y-como-devolver-mas-de-un-objeto-como-retorno-de-una-funcion.aspx"},"C# y .NET: Tuplas y c\xf3mo devolver m\xe1s de un objeto como retorno de una funci\xf3n")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.netmentor.es/entrada/tuple-valuetuple"},"Tuple y ValueTuple en C# | Devuelve m\xfaltiples tipos de un m\xe9todo")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://thatcsharpguy.com/post/tuples-en-c"},"Tuples en C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.c-sharpcorner.com/article/tuples-in-c-sharp/"},"Tuples In C#")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.tutorialsteacher.com/csharp/csharp-tuple#google_vignette"},"C# - Tuple")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.programiz.com/csharp-programming/tuple"},"C# Tuples")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.bytehide.com/blog/tuple-csharp"},"Tuples in C#: Full Guide")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.csharptutorial.net/csharp-tutorial/csharp-tuples/"},"C# Tuples"))))),(0,o.yg)("h2",{id:"palabra-clave-where"},"Palabra clave Where"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"El Where proporcionar\xe1(usar\xe1) cada elemento de un conjunto de datos como entrada y luego proporcionar\xe1 la l\xf3gica que decide si el elemento es incluido (devuelve verdadero) o excluido (devuelve falso) del resultado final. Aqu\xed hay un ejemplo b\xe1sico:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<int> numbers = new List<int>()\n{\n    1, 2, 4, 8, 16, 32\n};\nvar smallNumbers = numbers.Where(n => n < 10);\nforeach (var n in smallNumbers)\n    Console.WriteLine(n);\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"El par\xe1metro del where es una expresi\xf3n lambda que devuelve false o true."),(0,o.yg)("li",{parentName:"ul"},"En este m\xe9todo an\xf3nimo, el primer argumento es la variable cuyo valor ser\xe1 el elemento de entrada (En este caso, es un numero)."),(0,o.yg)("li",{parentName:"ul"},"En este ejemplo, cada n\xfamero se compara con nuestra expresi\xf3n, que devolver\xe1 verdadero si el n\xfamero es menor que 10 y falso si es 10 o mayor. Como resultado, obtenemos una versi\xf3n de la lista original, donde solo hemos incluido n\xfameros por debajo de 10, que luego se env\xedan a la consola.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Pero la expresi\xf3n no tiene que ser tan simple como eso: podemos agregarle f\xe1cilmente m\xe1s requisitos, como si fuera una declaraci\xf3n if regular:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<int> numbers = new List<int>()\n{\n    1, 2, 4, 8, 16, 32\n};\nvar smallNumbers = numbers.Where(n => n > 1 && n != 4 &&  n < 10);\nforeach (var n in smallNumbers)\n    Console.WriteLine(n);\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Especificamos que el n\xfamero debe ser mayor que 1, pero no debe ser el n\xfamero 4 y debe ser menor que 10.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Por supuesto, tambi\xe9n puede usar varios m\xe9todos, siempre que el resultado final sea un valor booleano, de modo que el m\xe9todo Where() sepa si desea incluir el elemento en cuesti\xf3n o no. Aqu\xed hay un ejemplo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<int> numbers = new List<int>()\n{\n    1, 2, 4, 7, 8, 16, 29, 32, 64, 128\n};\nList<int> excludedNumbers = new List<int>()\n{\n    7, 29\n};\nvar validNumbers = numbers.Where(n => !excludedNumbers.Contains(n));\nforeach (var n in validNumbers)\n    Console.WriteLine(n);\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"En este ejemplo, declaramos una segunda lista de n\xfameros, \xa1una especie de lista negra de n\xfameros que no queremos incluir! En el m\xe9todo Where (), utilizamos el m\xe9todo Contains () en la lista negra, para decidir si un n\xfamero se puede incluir en la lista final de n\xfameros o no.")))),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'Y, por supuesto, funciona para objetos m\xe1s complejos que los n\xfameros y las cadenas, y sigue siendo muy f\xe1cil de usar. Solo eche un vistazo a este ejemplo, donde usamos objetos con informaci\xf3n del usuario en lugar de n\xfameros, y usamos el m\xe9todo Where () para obtener una lista de usuarios con nombres que comienzan con la letra "J", a la edad de 39 a\xf1os o menos:')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace LinqWhere2\n{\n    class Program\n    {\n    static void Main(string[] args)\n    {\n        List<User> listOfUsers = new List<User>()\n        {\n        new User() { Name = "John Doe", Age = 42 },\n        new User() { Name = "Jane Doe", Age = 34 },\n        new User() { Name = "Joe Doe", Age = 8 },\n        new User() { Name = "Another Doe", Age = 15 },\n        };\n\n        var filteredUsers = listOfUsers.Where(user => user.Name.StartsWith("J") && user.Age < 40);\n        foreach (User user in filteredUsers)\n        Console.WriteLine(user.Name + ": " + user.Age);\n    }\n\n\n    class User\n    {\n        public string Name { get; set; }\n        public int Age { get; set; }\n\n    }\n    }\n}\n\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Se puede encadenar multiples m\xe9todos where:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"List<int> numbers = new List<int>()\n{\n    1, 2, 4, 8, 16, 32\n};\nvar smallNumbers = numbers.Where(n => n > 1).Where(n => n != 4).Where(n => n < 10);\nforeach (var n in smallNumbers)\n    Console.WriteLine(n);\n\n")),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},"Especificamos que el n\xfamero debe ser mayor que 1, pero no debe ser el n\xfamero 4 y debe ser menor que 10."),(0,o.yg)("li",{parentName:"ul"},"El resultado es exactamente el mismo que un ejemplo anterior, y aunque la primera versi\xf3n podr\xeda no haber sido lo suficientemente compleja como para justificar la divisi\xf3n en m\xfaltiples llamadas al m\xe9todo Where (), es probable que se encuentre con situaciones en las que tenga sentido hacerlo. "),(0,o.yg)("li",{parentName:"ul"},'Quiero enfatizar que esto no cuesta m\xe1s, en t\xe9rminos de rendimiento, porque las operaciones reales de "where" no se llevan a cabo hasta la parte en la que hacemos un bucle sobre el resultado; para entonces, el compilador y el int\xe9rprete tendr\xe1n optimizado su consulta para que sea lo m\xe1s r\xe1pida posible, sin importar c\xf3mo la haya escrito.')))),(0,o.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("ul",{parentName:"div"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://csharp.net-tutorials.com/es/425/linq-/filtrar-datos-el-metodo-where-/"},"Filtrar datos: el m\xe9todo Where ().")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.dotnetperls.com/where"},"Where")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.tutorialspoint.com/chash-linq-where-method"},"C# Linq Where Method")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-clause"},"where clause (C# Reference)"))))))}m.isMDXComponent=!0}}]);