"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[5267],{5680:(e,a,n)=>{n.d(a,{xA:()=>u,yg:()=>g});var o=n(6540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,l=function(e,a){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var t=o.createContext({}),c=function(e){var a=o.useContext(t),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},u=function(e){var a=c(e.components);return o.createElement(t.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,l=e.mdxType,i=e.originalType,t=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,g=d["".concat(t,".").concat(m)]||d[m]||p[m]||i;return n?o.createElement(g,r(r({ref:a},u),{},{components:n})):o.createElement(g,r({ref:a},u))}));function g(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var t in a)hasOwnProperty.call(a,t)&&(s[t]=a[t]);s.originalType=e,s[d]="string"==typeof e?e:l,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},815:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(8168),l=(n(6540),n(5680));const i={sidebar_position:9},r="Extra #02",s={unversionedId:"Node/extra02",id:"Node/extra02",title:"Extra #02",description:"02",source:"@site/docs/Node/extra02.md",sourceDirName:"Node",slug:"/Node/extra02",permalink:"/documentacion/docs/Node/extra02",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Node/extra02.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"Node",previous:{title:"Extra",permalink:"/documentacion/docs/Node/extra"}},t={},c=[{value:"Controlador",id:"controlador",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"Endpoint y controlador",id:"endpoint-y-controlador",level:2},{value:"Controlador",id:"controlador-1",level:4},{value:"Endpoint",id:"endpoint-1",level:4},{value:"Resumen",id:"resumen",level:4},{value:"Bucle de eventos",id:"bucle-de-eventos",level:2},{value:"Creaci\xf3n de hilos adicionales (Primera opci\xf3n)",id:"creaci\xf3n-de-hilos-adicionales-primera-opci\xf3n",level:4},{value:"Pool de hilos",id:"pool-de-hilos",level:4},{value:"Creaci\xf3n de hilos adicionales (Segunda opci\xf3n)",id:"creaci\xf3n-de-hilos-adicionales-segunda-opci\xf3n",level:4},{value:"Conceptos de Node",id:"conceptos-de-node",level:2},{value:"Blocking",id:"blocking",level:3},{value:"Non-Blocking",id:"non-blocking",level:3},{value:"Operaciones s\xedncronas y as\xedncronas",id:"operaciones-s\xedncronas-y-as\xedncronas",level:3},{value:"Callbacks",id:"callbacks",level:3},{value:"Event loop",id:"event-loop",level:3},{value:"Call stack",id:"call-stack",level:3},{value:"Callback Queque",id:"callback-queque",level:3},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Brevemente explicar\xe9 que hace el snippet de c\xf3digo mostrado.",id:"brevemente-explicar\xe9-que-hace-el-snippet-de-c\xf3digo-mostrado",level:4},{value:"Fase 1",id:"fase-1",level:5},{value:"Fase 2",id:"fase-2",level:5},{value:"Fase 3",id:"fase-3",level:5},{value:"Fase 4",id:"fase-4",level:5},{value:"Fase 5",id:"fase-5",level:5},{value:"Fase 6",id:"fase-6",level:5},{value:"Fase 7",id:"fase-7",level:5},{value:"Fase 8",id:"fase-8",level:5},{value:"Fase 9",id:"fase-9",level:5},{value:"Fase 10",id:"fase-10",level:5}],u={toc:c},d="wrapper";function p(e){let{components:a,...n}=e;return(0,l.yg)(d,(0,o.A)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"extra-02"},"Extra #02"),(0,l.yg)("h2",{id:"controlador"},"Controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En el contexto de una API REST, un controlador es una parte del software que gestiona las solicitudes HTTP entrantes y se encarga de procesarlas. Los controladores son una parte fundamental de la arquitectura de una aplicaci\xf3n web basada en REST."),(0,l.yg)("li",{parentName:"ul"},"En el patr\xf3n de dise\xf1o Modelo-Vista-Controlador (MVC), que es com\xfanmente utilizado en el desarrollo web, un controlador es responsable de recibir las solicitudes del cliente, procesar la l\xf3gica de la aplicaci\xf3n y luego enviar una respuesta al cliente."),(0,l.yg)("li",{parentName:"ul"},"En el caso espec\xedfico de una API REST, el controlador maneja las solicitudes HTTP como GET, POST, PUT o DELETE, y decide qu\xe9 acci\xf3n tomar en funci\xf3n de la operaci\xf3n solicitada y de los par\xe1metros proporcionados."),(0,l.yg)("li",{parentName:"ul"},"Un controlador en una API REST puede ser responsable de realizar diversas tareas, como validar los datos de entrada, interactuar con la capa de modelo para acceder a la base de datos, ejecutar la l\xf3gica de negocio y formatear la respuesta que se enviar\xe1 al cliente. "),(0,l.yg)("li",{parentName:"ul"},"En resumen, el controlador act\xfaa como un intermediario entre la entrada HTTP (solicitud del cliente) y la l\xf3gica de la aplicaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en un sistema de gesti\xf3n de tareas basado en una API REST, un controlador podr\xeda manejar solicitudes para crear una nueva tarea, obtener la lista de tareas, actualizar una tarea existente o eliminar una tarea."),(0,l.yg)("li",{parentName:"ul"},"En diferentes marcos de desarrollo para aplicaciones web, como Express.js para Node.js, Spring MVC para Java o Django para Python, los controladores suelen implementarse de manera espec\xedfica seg\xfan la sintaxis y las convenciones del marco utilizado.")),(0,l.yg)("h2",{id:"endpoint"},"Endpoint"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'En el contexto de una API (Interfaz de Programaci\xf3n de Aplicaciones), un "endpoint" se refiere a un punto final o una URL espec\xedfica que se puede usar para realizar operaciones sobre recursos o servicios.'),(0,l.yg)("li",{parentName:"ul"},"En otras palabras, un endpoint es una interfaz expuesta por una API, a trav\xe9s de la cual los clientes pueden realizar solicitudes y obtener respuestas."),(0,l.yg)("li",{parentName:"ul"},"Cada endpoint est\xe1 asociado con una operaci\xf3n particular y representa una acci\xf3n espec\xedfica que se puede realizar en la API. Los cuatro m\xe9todos HTTP principales utilizados en los endpoints de una API REST son:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"GET: Utilizado para recuperar informaci\xf3n de un recurso."),(0,l.yg)("li",{parentName:"ul"},"POST: Utilizado para crear un nuevo recurso."),(0,l.yg)("li",{parentName:"ul"},"PUT o PATCH: Utilizados para actualizar un recurso existente."),(0,l.yg)("li",{parentName:"ul"},"DELETE: Utilizado para eliminar un recurso."))),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en una API de gesti\xf3n de usuarios, podr\xedas tener endpoints como:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"GET /users: Para obtener la lista de usuarios."),(0,l.yg)("li",{parentName:"ul"},"GET /users/{id}: Para obtener detalles de un usuario espec\xedfico."),(0,l.yg)("li",{parentName:"ul"},"POST /users: Para crear un nuevo usuario."),(0,l.yg)("li",{parentName:"ul"},"PUT /users/{id}: Para actualizar un usuario existente."),(0,l.yg)("li",{parentName:"ul"},"DELETE /users/{id}: Para eliminar un usuario.")))),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Cada uno de estos ejemplos representa un endpoint diferente que permite realizar una operaci\xf3n espec\xedfica en la API. La estructura y la sem\xe1ntica de los endpoints suelen seguir convenciones y patrones definidos por el dise\xf1o de la API y las mejores pr\xe1cticas RESTful.")))),(0,l.yg)("h2",{id:"endpoint-y-controlador"},"Endpoint y controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un endpoint y un controlador son conceptos relacionados en el contexto de una API REST, pero representan conceptos ligeramente diferentes.")),(0,l.yg)("h4",{id:"controlador-1"},"Controlador"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El controlador es una componente de la aplicaci\xf3n que maneja las solicitudes HTTP."),(0,l.yg)("li",{parentName:"ul"},"Es responsable de procesar la l\xf3gica de la aplicaci\xf3n y decidir c\xf3mo responder a las solicitudes."),(0,l.yg)("li",{parentName:"ul"},"En el contexto de un marco de desarrollo web (por ejemplo, Express.js, Spring MVC, Django), el controlador puede ser una clase o funci\xf3n espec\xedfica que se encarga de manejar un conjunto particular de rutas o URL.")),(0,l.yg)("h4",{id:"endpoint-1"},"Endpoint"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Un endpoint es una URL espec\xedfica a la que se puede enviar una solicitud HTTP para interactuar con la API."),(0,l.yg)("li",{parentName:"ul"},"Cada endpoint est\xe1 asociado con una operaci\xf3n espec\xedfica, como obtener datos, crear recursos, actualizar recursos o eliminar recursos."),(0,l.yg)("li",{parentName:"ul"},"Los endpoints son las rutas espec\xedficas que un cliente puede utilizar para realizar operaciones sobre recursos en la API."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, en una API de gesti\xf3n de tareas, podr\xedas tener endpoints como /tasks para obtener la lista de tareas, /tasks/:id para obtener detalles de una tarea espec\xedfica, etc.")),(0,l.yg)("h4",{id:"resumen"},"Resumen"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"En resumen, el controlador es la l\xf3gica que maneja las solicitudes HTTP y decide c\xf3mo responder, mientras que el endpoint es la URL espec\xedfica que representa una operaci\xf3n o recurso dentro de la API. "),(0,l.yg)("li",{parentName:"ul"},"En muchos casos, en el desarrollo de una API REST, hay una correspondencia directa entre los controladores y los endpoints, ya que cada endpoint suele ser manejado por un controlador espec\xedfico.")),(0,l.yg)("h2",{id:"bucle-de-eventos"},"Bucle de eventos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al usar Node.js, se introduce un un curioso componente denominado el bucle de eventos que constituye un elemento b\xe1sico en la plataforma."),(0,l.yg)("li",{parentName:"ul"},"No es algo exclusivo de Node.js. Tambi\xe9n el browser tiene su propio bucle de eventos que, aunque con distinta implementaci\xf3n, b\xe1sicamente funciona igual que el de Node.js."),(0,l.yg)("li",{parentName:"ul"},"Las instrucciones de un programa son ejecutadas secuencialmente, de manera que hay que esperar a que una instrucci\xf3n finalice para que comience la siguiente. "),(0,l.yg)("li",{parentName:"ul"},"Cuando llamamos a funciones, de la propia aplicaci\xf3n o de APIs externas, tenemos que esperar hasta que finalice su ejecuci\xf3n y se devuelva el control al elemento que la llam\xf3. "),(0,l.yg)("li",{parentName:"ul"},"Una llamada a una funci\xf3n significa colocar dicha funci\xf3n en la pila de llamadas del proceso. Cuando la funci\xf3n termina su ejecuci\xf3n y devuelve el control al elemento que la llam\xf3, se elimina de la pila."),(0,l.yg)("li",{parentName:"ul"},"Si la funci\xf3n que se llama requiere mucho tiempo en resolverse, ya sea porque realice c\xe1lculos pesados y utilice mucho tiempo de CPU o por que se trate de una funci\xf3n de entrada/salida, las cuales suelen ser bastante lentas, el hilo donde se ejecuta quedar\xe1 bloqueado durante todo ese tiempo. Dependiendo del tipo de aplicaci\xf3n esto puede ser admisible o no."),(0,l.yg)("li",{parentName:"ul"},"Pensemos en una aplicaci\xf3n de escritorio que obtiene datos mediante peticiones a un servicio web. No sabemos cu\xe1nto tiempo tardar\xe1 en resolverse las peticiones que hagamos, en ocasiones puede que sea inmediato, pero otras veces puede tardar varios segundos. Hasta puede que d\xe9 un fallo por timeout y tengamos que esperar unos minutos."),(0,l.yg)("li",{parentName:"ul"},"Pensemos ahora en un servidor web que lanza frecuentemente peticiones SQL a una base de datos. Tampoco podemos saber si se resolver\xe1n r\xe1pidamente o tardar\xe1n un tiempo considerable. Si durante el tiempo que est\xe1 consultando la base de datos no puede atender a ninguna petici\xf3n m\xe1s, mal asunto."),(0,l.yg)("li",{parentName:"ul"},"Ninguna de las aplicaciones anteriores estar\xeda bien dise\xf1ada si su fluidez dependiera de los tiempos invertidos en las peticiones. Es decir, si las llamadas de entrada/salida (peticiones) se ejecutaran en el hilo principal de la aplicaci\xf3n."),(0,l.yg)("li",{parentName:"ul"},"La soluci\xf3n, obviamente, pasa por la creaci\xf3n de hilos adicionales que traten dichas llamadas de entrada/salida. Existen dos estrategias fundamentales para la creaci\xf3n de dichos hilos adicionales.")),(0,l.yg)("h4",{id:"creaci\xf3n-de-hilos-adicionales-primera-opci\xf3n"},"Creaci\xf3n de hilos adicionales (Primera opci\xf3n)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La primera, llam\xe9mosla \u201ccl\xe1sica\u201d, consiste en crear nuevos hilos (o procesos) donde se ejecutar\xe1n las funciones \u201clentas\u201d de entrada/salida, liberando al hilo principal que puede continuar con su tarea; recibir nuevas peticiones en el caso del servidor o atender las \xf3rdenes del usuario en el caso de la aplicaci\xf3n de escritorio. El resultado de las operaciones de entrada/salida, una vez resueltas, se pasar\xe1n al hilo principal mediante alg\xfan mecanismo de comunicaci\xf3n entre hilos. Teniendo en cuenta que los hilos de un proceso comparten la memoria no es dif\xedcil colocar el resultado en el hilo principal."),(0,l.yg)("li",{parentName:"ul"},"Esta estrategia ha sido ampliamente usada en el dise\xf1o de servidores. El hilo principal del proceso escucha en un socket y cuando entra una nueva petici\xf3n crea un nuevo hilo para procesarla y vuelve a escuchar en el socket para repetir el proceso con las sucesivas peticiones. El problema de este enfoque es la escalabilidad, es decir, cuando el n\xfamero de peticiones (casi) simult\xe1neas aumenta, tambi\xe9n lo hace el n\xfamero de hilos secundarios, pudiendo llegar a colapsar el servidor por sobrecarga de la CPU o por agotamiento de la memoria. "),(0,l.yg)("li",{parentName:"ul"},"Para evitar este problema los servidores dise\xf1ados con esta estrategia suelen limitar el m\xe1ximo n\xfamero de hilos secundarios que el servidor puede crear. "),(0,l.yg)("li",{parentName:"ul"},"Tambi\xe9n suelen crear, al arrancar el servidor, un pool de hilos (o procesos) para eliminar el tiempo que se tarda en crear un hilo cuando llega una nueva petici\xf3n."),(0,l.yg)("li",{parentName:"ul"})),(0,l.yg)("h4",{id:"pool-de-hilos"},"Pool de hilos"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Un "pool de hilos" es un conjunto predefinido o din\xe1mico de hilos de ejecuci\xf3n que est\xe1n disponibles para realizar tareas en un programa o sistema. '),(0,l.yg)("li",{parentName:"ul"},"La idea detr\xe1s de un pool de hilos es tener un grupo de hilos listos para ser utilizados, en lugar de crear y destruir hilos cada vez que se necesita realizar una tarea."),(0,l.yg)("li",{parentName:"ul"},"Cuando un servidor (o cualquier programa) necesita manejar m\xfaltiples solicitudes simult\xe1neas, puede ser ineficiente crear un nuevo hilo para cada solicitud, ya que la creaci\xf3n y destrucci\xf3n de hilos conlleva un costo en t\xe9rminos de tiempo y recursos del sistema. En lugar de eso, se puede utilizar un pool de hilos para tener un conjunto de hilos ya creados y disponibles para gestionar solicitudes entrantes."),(0,l.yg)("li",{parentName:"ul"},"Cuando llega una nueva solicitud, el sistema toma un hilo disponible del pool y lo utiliza para manejar esa solicitud. Una vez que se completa la tarea, el hilo se devuelve al pool en lugar de ser destruido. Esto ayuda a reducir la sobrecarga asociada con la creaci\xf3n y destrucci\xf3n repetitiva de hilos, mejorando la eficiencia del sistema."),(0,l.yg)("li",{parentName:"ul"},'Es importante destacar que tambi\xe9n existen "pools de procesos", que funcionan de manera similar, pero en lugar de hilos, utilizan procesos independientes. La elecci\xf3n entre un pool de hilos o un pool de procesos depende de la arquitectura y los requisitos espec\xedficos del sistema.')),(0,l.yg)("h4",{id:"creaci\xf3n-de-hilos-adicionales-segunda-opci\xf3n"},"Creaci\xf3n de hilos adicionales (Segunda opci\xf3n)"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"La segunda soluci\xf3n no implica la creaci\xf3n de un nuevo hilo por cada nueva llamada a una operaci\xf3n de entrada/salida. "),(0,l.yg)("li",{parentName:"ul"},"Se trata de registrar handlers o funciones callbacks asociados a eventos que se producen en la interfaz gr\xe1fica. Dicho registro se lleva a cabo en un hilo distinto al principal. Cuando se produce un evento dicho hilo notifica al hilo principal que ejecute la funci\xf3n de callback asociada al evento."),(0,l.yg)("li",{parentName:"ul"},"Es una estrategia utilizada desde hace mucho tiempo en el dise\xf1o de interfaces gr\xe1ficas. "),(0,l.yg)("li",{parentName:"ul"},"De esta forma las llamadas a una operaci\xf3n de entrada/salida devuelven el control inmediatamente sin necesidad de haber completado la operaci\xf3n de lectura o escritura en el recurso. Cuando finalizan generan un evento que notifica al hilo que las llam\xf3 para que las procese. Como vemos el mecanismo es similar al de los eventos generados por los widgets de una interfaz gr\xe1fica, solo que la generaci\xf3n de eventos la realiza el sistema operativo cuando la operaci\xf3n ha concluido."),(0,l.yg)("li",{parentName:"ul"},"El siguiente gr\xe1fico proporciona un modelo que sirve para explicar el funcionamiento del bucle de eventos en ambas tecnolog\xedas:")),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://juandarodriguez.es/images/bucle_de_eventos.png",alt:"Bucle de eventos"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Cuando se lleva a cabo la ejecuci\xf3n de la aplicaci\xf3n, cada vez que se invoca una funci\xf3n se a\xf1ade a la pila de llamadas. Cuando las funciones terminan y devuelven el control, se sacan de la pila. Si todas las llamadas fuesen bloqueantes (s\xedncronas), llega un momento en que la pila se vac\xeda completamente que se corresponder\xe1 con el fin del programa."),(0,l.yg)("li",{parentName:"ul"},"Pero tanto en Node.js como en Chrome desde cualquiera de las funciones de la pila puede ocurrir que se realicen llamadas que responden al siguiente patr\xf3n:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"function funcionX(){\n     // c\xf3digo s\xedncrono\n\n     funcAsincrona(callback(data), args);\n\n     // c\xf3digo s\xedncrono\n }\n\n")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Observaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Lo normal es que la funci\xf3n as\xedncrona funcAs\xedcrona() sea mucho m\xe1s lenta que la propia funci\xf3n funcionX(), y como es no bloqueante el c\xf3digo sigue ejecut\xe1ndose finalizando la funci\xf3n funcionX() antes que la funci\xf3n funcAsincrona()."),(0,l.yg)("li",{parentName:"ul"},"La funci\xf3n funcionX() desaparece de la pila y se ejecuta la que queda en su cima. "),(0,l.yg)("li",{parentName:"ul"},"Por otro lado, la funci\xf3n as\xedncrona se est\xe1 ejecutando en otro hilo y cuando finaliza se a\xf1ade su funci\xf3n callback asociada a la cola de eventos, pas\xe1ndole como argumento el resultado de la funci\xf3n as\xedncrona."),(0,l.yg)("li",{parentName:"ul"},"Mientras tanto, el bucle de eventos vigila por un lado que no haya m\xe1s funciones en la pila de llamadas y por otro la existencia de callbacks en la cola de eventos. Cuando la pila est\xe9 vac\xeda, el bucle de eventos colocar\xe1 en dicha pila el primer callback de la cola de eventos. Por supuesto, las funciones de callback, que no dejan de ser funciones de Javascript, tambi\xe9n pueden hacer llamadas as\xedncronas a la API."),(0,l.yg)("li",{parentName:"ul"},"El proceso se repite indefinidamente hasta que no haya m\xe1s elementos en el hilo donde residen las API\u2019s (Es el cuadrado que dice Web Apis Chrome o Node.js API, es el hijo \u201csecundario\u201d de la segunda soluci\xf3n). Es decir, hasta que no haya m\xe1s posibilidades de generaci\xf3n de eventos. "),(0,l.yg)("li",{parentName:"ul"},"Puede ocurrir que el proceso se repita indefinidamente y s\xf3lo finalice abortando o cerrando la aplicaci\xf3n. Es el caso de las aplicaciones de escritorio y los servidores.")))),(0,l.yg)("h2",{id:"conceptos-de-node"},"Conceptos de Node"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Node, trabaja con un solo hilo. Esto significa que solo ejecutar\xe1 un proceso a la vez."),(0,l.yg)("li",{parentName:"ul"},"Como desarrolladores de Javascript debemos tener mucho cuidado al programar de no bloquear este \xfanico hilo. Aqu\xed entra la parte de Blocking y Non-Blocking.")),(0,l.yg)("h3",{id:"blocking"},"Blocking"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Es b\xe1sicamente esperar a que un proceso termine para despu\xe9s continuar con la ejecuci\xf3n del programa. Esto se hace usando operaciones s\xedncronas, ciclos infinitos, etc.")),(0,l.yg)("h3",{id:"non-blocking"},"Non-Blocking"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Permite que tu programa siga corriendo sin la obligaci\xf3n de esperar a que un proceso termine su ejecuci\xf3n. Esto se lleva a cabo usando operaciones as\xedncronas.")),(0,l.yg)("h3",{id:"operaciones-s\xedncronas-y-as\xedncronas"},"Operaciones s\xedncronas y as\xedncronas"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Las operaciones s\xedncronas nos obligan a esperar a que la tarea termine por completo su ejecuci\xf3n. En la librer\xeda de nodejs, muchas de las operaciones cuentan con m\xe9todos s\xedncronos y as\xedncronos a la vez."),(0,l.yg)("li",{parentName:"ul"},"Las operaciones as\xedncronas nos dan la capacidad de diferir una tarea para seguir ejecutando las dem\xe1s. Es decir, el programa se encuentra con una operaci\xf3n que va a llevar tiempo en completarse, entonces deja que esta corra y continua con lo dem\xe1s. Una vez se complete la operaci\xf3n en espera, la ejecuta.")),(0,l.yg)("h3",{id:"callbacks"},"Callbacks"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Los callbacks son funciones que se pasan como par\xe1metro de otra funci\xf3n. Son parte esencial de las operaciones as\xedncronas."),(0,l.yg)("li",{parentName:"ul"},"Por ejemplo, al escribir una funci\xf3n que se encarga de leer un archivo del disco duro, puedo pasarle una funci\xf3n o mejor llamado callback, el cual va a ser llamado una vez termine de leer el archivo y va a ejecutar lo que est\xe9 dentro de \xe9l. Por ello, el nombre callback.")),(0,l.yg)("h3",{id:"event-loop"},"Event loop"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El event loop es el que se encarga de implementar las operaciones as\xedncronas o el non-blocking. El event loop corre en el \xfanico hilo que existe en Node y como mencionamos anteriormente, al bloquear el \xfanico hilo de node, estamos bloqueando el event loop.")),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Importante: Libuv (una librer\xeda escrita en C), es el que permite que el event loop funcione y todo el comportamiento as\xedncrono en Node. Puedes conocer m\xe1s sobre esta librer\xeda ingresando a su sitio oficial.")))),(0,l.yg)("h3",{id:"call-stack"},"Call stack"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Cada vez que una funci\xf3n va a ser ejecutada pasa por el call stack (pila de llamadas) . Como ya sabemos, al trabajar con operaciones as\xedncronas, estas poseen callbacks, que se ejecutar\xe1n una vez el proceso de la operaci\xf3n haya terminado y que se ir\xe1n a\xf1adiendo al callback queue.")),(0,l.yg)("h3",{id:"callback-queque"},"Callback Queque"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Aqu\xed se agregan los callback o funciones que se ejecutan una vez las operaciones as\xedncronas hayan terminado. Se utiliza el m\xe9todo FIFO (first input, first output), traducido, primero en entrar, primero en salir."),(0,l.yg)("li",{parentName:"ul"},"El event loop es el que se encarga de revisar que el call stack este vac\xedo para a\xf1adir lo que est\xe1 dentro del callback queue y ejecutarlo.")),(0,l.yg)("h4",{id:"ejemplo"},"Ejemplo"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:828/format:webp/1*Wa6DuSyM3yzvDWqc43-ejA.png",alt:"callback queque"})),(0,l.yg)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.yg)("div",{parentName:"div",className:"admonition-heading"},(0,l.yg)("h5",{parentName:"div"},(0,l.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,l.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Explicaci\xf3n")),(0,l.yg)("div",{parentName:"div",className:"admonition-content"},(0,l.yg)("ul",{parentName:"div"},(0,l.yg)("li",{parentName:"ul"},"Linea 1: Obtenemos la librer\xeda File System de Nodejs para poder leer un archivo del disco duro."),(0,l.yg)("li",{parentName:"ul"},"Linea 3: Implementamos la operaci\xf3n as\xedncrona readFile, el cual recibir\xe1 como par\xe1metros la ruta del archivo y el callback."),(0,l.yg)("li",{parentName:"ul"},"Linea 4: Se encuentra un timer, en este caso, setTimeout la cual es una operaci\xf3n as\xedncrona y posee una funci\xf3n llamada timeout2 que se ejecutar\xe1 despu\xe9s de 4 segundos."),(0,l.yg)("li",{parentName:"ul"},"Linea 9: Operaci\xf3n s\xedncrona que imprimir\xe1 en consola el mensaje correspondiente."),(0,l.yg)("li",{parentName:"ul"},"Linea 11: Un timer que posee una funci\xf3n llamada timeout que se ejecutar\xe1 despu\xe9s de 5 segundos.")))),(0,l.yg)("h4",{id:"brevemente-explicar\xe9-que-hace-el-snippet-de-c\xf3digo-mostrado"},"Brevemente explicar\xe9 que hace el snippet de c\xf3digo mostrado."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Bueno, pasemos a explicar todo el trabajo que Nodejs hace para correr el programa que escribimos con el siguiente gr\xe1fico:")),(0,l.yg)("h5",{id:"fase-1"},"Fase 1"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*_vTb8PdvbS9bYy03duP0Pw.png",alt:"Fase 1 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Primeramente, se agrega la operaci\xf3n readFile al call stack, debido a que es la primera del programa."),(0,l.yg)("li",{parentName:"ul"},"Al ser una operaci\xf3n as\xedncrona, esta se mueve a la secci\xf3n de APIs donde ahi esperaremos a que las herramientas encargadas hagan lo necesario para completar la tarea.")),(0,l.yg)("h5",{id:"fase-2"},"Fase 2"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*0UcfZpRNXp-OEjJSsqcaLg.png",alt:"Fase 2 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El programa estar\xe1 esperando a que el archivo termine de leerse, pero \xe9l continuar\xe1 con la ejecuci\xf3n del programa. En este caso, se encuentra una operaci\xf3n s\xedncrona (se ejecuta de manera muy r\xe1pida) que imprime en consola el mensaje.")),(0,l.yg)("h5",{id:"fase-3"},"Fase 3"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*_NhUtsMan3PQhEKNOCDQnA.png",alt:"Fase 3 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Ahora, vemos que la operaci\xf3n de leer el archivo termin\xf3. Por lo tanto, pasa al callback queue. Tambi\xe9n, vemos que en el call stack se encuentra un timer. Esto porque es lo que esta despu\xe9s del console.log anterior.")),(0,l.yg)("h5",{id:"fase-4"},"Fase 4"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZQ72pbgAO383hNjxvmNtEA.png",alt:"Fase 4 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"El timer posee una funci\xf3n llamada timeout que se va a ejecutar despu\xe9s de 5 segundos e imprimir\xe1 en consola un mensaje. Por ello, pasa a la secci\xf3n de APIs y espera los 5 segundos. Ahora, el event loop revisa si esta vac\xedo el call stack para ejecutar el callback de la operaci\xf3n readFile.")),(0,l.yg)("h5",{id:"fase-5"},"Fase 5"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*6tGSp9iraXieXS_NSrAOwg.png",alt:"Fase 5 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al ejecutar el callback de la operaci\xf3n readFile nos encontramos con otra operaci\xf3n as\xedncrona. Un timer, con una funci\xf3n llamada timeout2, la cual se ejecutar\xe1 dentro de 4 segundos. Seguimos esperando a que pasen los 5 segundos del primer timer.")),(0,l.yg)("h5",{id:"fase-6"},"Fase 6"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*D8u5VYiddpdEH5Fds4bzIQ.png",alt:"Fase 6 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se agrega la funci\xf3n timeout2 a la secci\xf3n de APIs a esperar que los segundos pasen.")),(0,l.yg)("h5",{id:"fase-7"},"Fase 7"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZmaLd4mE5n4YjTCI1ChouA.png",alt:"Fase 7 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Podemos observar que la funci\xf3n timeout2 ya termin\xf3 su tiempo. Por lo tanto, pasa al callback queue y como el call stack no contiene ninguna operaci\xf3n en ejecuci\xf3n, lo ejecuta.")),(0,l.yg)("h5",{id:"fase-8"},"Fase 8"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*2egjCVogk59WODAzrydwIg.png",alt:"Fase 8 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Se ejecuta el callback de la funcion timeout2, el cual imprime en consola el archivo en formato JSON. Tambi\xe9n, vemos que la operaci\xf3n timeout culmino y se agrega al callback queue.")),(0,l.yg)("h5",{id:"fase-9"},"Fase 9"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://miro.medium.com/v2/resize:fit:640/format:webp/1*uriotJoRdulyfvOOQCFhVg.png",alt:"Fase 9 del proceso"})),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Finalmente, el event loop vuelve a revisar el call stack y ejecuta el callback de la funci\xf3n que estaba en el callback queue.")),(0,l.yg)("h5",{id:"fase-10"},"Fase 10"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Al no encontrar nada m\xe1s, el programa se acaba. El resultado final del programa ser\xeda el siguiente:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-powershell"},"Hello Event Loop\n{name: Fernando Hern\xe1ndez, age: 21}\nHi, I\u2019m executed\n\n")))}p.isMDXComponent=!0}}]);